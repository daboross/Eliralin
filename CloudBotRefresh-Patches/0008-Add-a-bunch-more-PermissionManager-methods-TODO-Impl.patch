From ade4a7a5983da2e83b6bb4723b4af036a9476e39 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Tue, 8 Apr 2014 00:02:30 -0700
Subject: [PATCH] Add a bunch more PermissionManager methods, TODO: Implement
 adding/removing


diff --git a/core/permissions.py b/core/permissions.py
index ad69531..677d8ad 100644
--- a/core/permissions.py
+++ b/core/permissions.py
@@ -11,6 +11,7 @@ class PermissionManager(object):
     :type group_users: dict[str, list[str]]
     :type perm_users: dict[str, list[str]]
     """
+
     def __init__(self, bot, conn):
         """
         :type bot: core.bot.CloudBot
@@ -70,6 +71,9 @@ class PermissionManager(object):
 
         return False
 
+    def get_groups(self):
+        return set().union(self.group_perms.keys(), self.group_users.keys())
+
     def get_group_permissions(self, group):
         """
         :type group: str
@@ -89,9 +93,69 @@ class PermissionManager(object):
         :type user_mask: str
         :rtype: list[str]
         """
-        permissions = []
+        permissions = set()
         for permission, users in self.perm_users.items():
             for mask_to_check in users:
                 if fnmatch(user_mask.lower(), mask_to_check):
-                    permissions.append(permission)
+                    permissions.add(permission)
         return permissions
+
+    def get_user_groups(self, user_mask):
+        """
+        :type user_mask: str
+        :rtype: list[str]
+        """
+        groups = []
+        for group, users in self.group_users.items():
+            for mask_to_check in users:
+                if fnmatch(user_mask.lower(), mask_to_check):
+                    groups.append(group)
+                    continue
+        return groups
+
+    def group_exists(self, group):
+        """
+        Checks whether a group exists
+        :type group: str
+        :rtype: bool
+        """
+        return group.lower() in self.group_perms
+
+    def user_in_group(self, user_mask, group):
+        """
+        Checks whether a user is matched by any masks in a given group
+        :type group: str
+        :type user_mask: str
+        :rtype: bool
+        """
+        users = self.group_users[group.lower()]
+        for mask_to_check in users:
+            if fnmatch(user_mask.lower(), mask_to_check):
+                return True
+        return False
+
+    def remove_group_user(self, group, user_mask):
+        """
+        Removes all users that match user_mask from group. Returns a list of user masks removed from the group
+        :type group: str
+        :type user_mask: str
+        :rtype: list[str]
+        """
+        masks_removed = []
+
+        for mask_to_check in list(self.group_users[group.lower()]):
+            if fnmatch(user_mask.lower(), mask_to_check):
+                masks_removed.append(mask_to_check)
+                # TODO: Actually remove this from the bot's permissions config
+
+        return masks_removed
+
+    def add_user_to_group(self, user_mask, group):
+        """
+        Adds user to group. Returns whether this actually did anything
+        :type group: str
+        :type user_mask: str
+        :rtype: bool
+        """
+        return not self.user_in_group(user_mask, group)
+        # TODO: Actually add this to the bot's permission config
-- 
1.9.1

