From dbe56280cbd52719fc0ac0ffa85ee1447985e1c7 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Tue, 22 Apr 2014 00:25:47 -0700
Subject: [PATCH] Add qpt


diff --git a/cloudbot.py b/cloudbot.py
index 0c05d80..66aba3a 100755
--- a/cloudbot.py
+++ b/cloudbot.py
@@ -25,7 +25,7 @@ print('CloudBot3 <http://git.io/cloudbotirc>')
 class CloudBotWrapper():
     def __init__(self):
         # create the master cloudbot
-        self.cloudbot = bot.CloudBot()
+        self.cloudbot = bot.CloudBot("--qpt" in sys.argv)
 
         self.original_sigint = None
 
@@ -63,7 +63,7 @@ class CloudBotWrapper():
                     if self.stopped_while_restarting:
                         print("Recieved stop signal, no longer restarting")
                         return
-                    self.cloudbot = bot.CloudBot()
+                    self.cloudbot = bot.CloudBot("--qpt" in sys.argv)
                     self.cloudbot.start()
                     continue
                 else:
diff --git a/core/bot.py b/core/bot.py
index 74f39a0..c0b2fee 100644
--- a/core/bot.py
+++ b/core/bot.py
@@ -78,7 +78,9 @@ class CloudBot(threading.Thread):
     :type loader: core.loader.PluginLoader
     """
 
-    def __init__(self):
+    def __init__(self, qpt):
+        # qpt = quick plugin testing
+        self.qpt = qpt
         # basic variables
         self.start_time = time.time()
         self.running = True
diff --git a/core/irc.py b/core/irc.py
index 30f541b..4369e40 100644
--- a/core/irc.py
+++ b/core/irc.py
@@ -4,7 +4,9 @@ import time
 import threading
 import queue
 from ssl import wrap_socket, CERT_NONE, CERT_REQUIRED, SSLError
+import traceback
 
+from core import qpt_tests
 from core.permissions import PermissionManager
 
 irc_prefix_rem = re.compile(r'(.*?) (.*?) (.*)').match
@@ -227,6 +229,68 @@ class IRCConnection(object):
         self.connect()
 
 
+class QptReceiveThread(threading.Thread):
+    """receives messages from IRC and puts them in the input_queue
+    :type input_queue: queue.Queue"""
+
+    def __init__(self, bot, logger, input_queue, output_queue):
+        self.bot = bot
+        self.logger = logger
+        self.input_queue = input_queue
+        self.output_queue = output_queue
+        self.func_args = [
+            lambda line: self.input_queue.put(line),
+            lambda: self.output_queue.get()
+        ]
+        self.shutdown = False
+        threading.Thread.__init__(self)
+
+    def run(self):
+        time.sleep(1.0)
+        for func in qpt_tests.__dict__.values():
+            if self.shutdown:
+                break
+
+            while not self.output_queue.empty():
+                self.logger.info("Ignored '{}'".format(self.output_queue.get()))
+            if callable(func) and func.__name__.startswith("test_"):
+                try:
+                    func(self.bot, *self.func_args)
+                except:
+                    traceback.print_exc()
+                    self.bot.stop()
+
+            time.sleep(0.1)
+
+
+class QptIRCConnection(object):
+    """fake IRC connection which just feeds back fake input
+    :type logger: logging.Logger
+    :type output_queue: queue.Queue
+    :type input_queue; queue.Queue
+    """
+
+    def __init__(self, bot, logger, input_queue, output_queue):
+        self.bot = bot
+        self.logger = logger
+        self.output_queue = output_queue  # lines to be sent out
+        self.input_queue = input_queue  # lines that were received
+        # to be assigned in connect()
+        self.receive_thread = None
+
+    def connect(self):
+        self.receive_thread = QptReceiveThread(self.bot, self.logger, self.input_queue, self.output_queue)
+        self.receive_thread.start()
+
+    def stop(self):
+        self.receive_thread.shutdown = True
+        time.sleep(0.1)
+
+    def reconnect(self):
+        self.stop()
+        self.connect()
+
+
 class BotConnection(object):
     """ A BotConnection represents each connection the bot makes to an IRC server
     :type bot: core.bot.CloudBot
@@ -296,8 +360,11 @@ class BotConnection(object):
         self.permissions = PermissionManager(self)
 
         # create the IRC connection and connect
-        self.connection = IRCConnection(self.bot.logger, self.name, self.server, self.port, self.input_queue,
-                                        self.output_queue, self.ssl)
+        if bot.qpt:
+            self.connection = QptIRCConnection(self.bot, self.bot.logger, self.input_queue, self.output_queue)
+        else:
+            self.connection = IRCConnection(self.bot.logger, self.name, self.server, self.port, self.input_queue,
+                                            self.output_queue, self.ssl)
         self.connection.connect()
 
         self.set_pass(self.config["connection"].get("password"))
diff --git a/core/qpt_tests.py b/core/qpt_tests.py
new file mode 100644
index 0000000..3aa5170
--- /dev/null
+++ b/core/qpt_tests.py
@@ -0,0 +1,17 @@
+"""
+QPT - Quick Plugin Testing
+This file contains tests
+"""
+import re
+
+rpass_re = re.compile("NOTICE Dabo :Your password is '\w+ \w+ \w+ \w+'. "
+                      "Feel free to remove the spaces when using it.")
+
+
+def match_re(reg, _str):
+    assert reg.match(_str), reg.pattern + " didn't match " + _str
+
+
+def test_rpass(bot, send, get):
+    send(":Dabo!~dabo@dabo.us PRIVMSG #dabo :>rpass")
+    match_re(rpass_re, get())
\ No newline at end of file
diff --git a/modules/core_sieve.py b/modules/core_sieve.py
index 33dc371..b5f8802 100644
--- a/modules/core_sieve.py
+++ b/modules/core_sieve.py
@@ -52,6 +52,8 @@ def sieve_suite(bot, input, plugin):
 
     # check command spam tokens
     if plugin.type == "command":
+        if bot.qpt:
+            return input  # Don't run tokens when testing plugins - need to do it quickly
         uid = input.chan
 
         if not uid in buckets:
-- 
1.9.2

