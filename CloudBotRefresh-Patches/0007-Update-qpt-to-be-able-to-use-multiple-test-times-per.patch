From 8f8c2d5b1c70ca21291534e32777998f3a650747 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Tue, 22 Apr 2014 11:04:53 -0700
Subject: [PATCH] Update qpt to be able to use multiple test times per test


diff --git a/util/qpt.py b/util/qpt.py
index 25e3251..95fe816 100644
--- a/util/qpt.py
+++ b/util/qpt.py
@@ -4,9 +4,10 @@ import inspect
 import os
 import traceback
 import sys
+import time
 
 
-def test(func):
+def _test_hook(func, times):
     specifications = inspect.getargspec(func)
     args = specifications[0]
     if args is None:
@@ -14,34 +15,45 @@ def test(func):
     func._qpt_test = True
     func._qpt_args = args
     func._qpt_name = func.__module__ + "." + func.__name__
+    func._qpt_times = times
     return func
 
 
+def test(times=1):
+    return lambda func: _test_hook(func, times)
+
+
 def run_test(logger, func, bot, input_queue, output_queue):
     if not hasattr(func, "_qpt_test") or not func._qpt_test:
         return
 
-    logger.info("Running test '{}'".format(func._qpt_name))
-
-    params = []
-    for arg in func._qpt_args:
-        if arg == "bot":
-            params.append(bot)
-        elif arg == "get":
-            params.append(lambda: output_queue.get())
-        elif arg == "send":
-            params.append(lambda line: input_queue.put(line))
+    for test_number in range(func._qpt_times):
+        # each test might want to run multiple times, with the test number as an argument.
+        # We'll treat each of these times as a different test
+
+        logger.info("=== Running test {} #{}".format(func._qpt_name, test_number))
+        params = []
+        for arg in func._qpt_args:
+            if arg == "bot":
+                params.append(bot)
+            elif arg == "get":
+                params.append(lambda: output_queue.get())
+            elif arg == "send":
+                params.append(lambda line: input_queue.put(line))
+            elif arg == "test_number":
+                params.append(test_number)
+            else:
+                logger.info("=== Test {} #{} Failure: required invalid arg {}".format(func._qpt_name, test_number, arg))
+                continue
+        try:
+            func(*params)
+        except Exception:
+            logger.warning("=== Test {} #{} Failure:".format(func._qpt_name, test_number))
+            traceback.print_exc()
+            continue
         else:
-            logger.info("Test {} required invalid arg {}".format(func._qpt_name, arg))
-            return
-    try:
-        func(*params)
-    except Exception:
-        logger.warning("Error in test " + func._qpt_name)
-        traceback.print_exc()
-        return False
-    else:
-        return True
+            logger.info("=== Test {} #{} success".format(func._qpt_name, test_number))
+            continue
 
 
 def run_tests(obj_with_shutdown, logger, bot, input_queue, output_queue):
@@ -56,12 +68,10 @@ def run_tests(obj_with_shutdown, logger, bot, input_queue, output_queue):
         if title == "__init__":
             return  # ignore __init__
 
-        logger.info("Running tests in {}".format(title))
-
         try:
             module = importlib.import_module("qpt_tests." + title)
         except Exception:
-            logger.warning("Failed to import test module {}".format(title))
+            logger.warning("=== Failed to start tests in {}:".format(title))
             traceback.print_exc()
             continue
 
@@ -71,10 +81,13 @@ def run_tests(obj_with_shutdown, logger, bot, input_queue, output_queue):
                 return
 
             while not output_queue.empty():
-                logger.info("Removed '{}' from queue.".format(output_queue.get()))
+                logger.debug("Removed '{}' from queue.".format(output_queue.get()))
 
             run_test(logger, func, bot, input_queue, output_queue)
 
+            # wait 0.1 second between tests
+            time.sleep(0.1)
+
 
 def is_enabled():
     return "--qpt" in sys.argv
-- 
1.9.2

