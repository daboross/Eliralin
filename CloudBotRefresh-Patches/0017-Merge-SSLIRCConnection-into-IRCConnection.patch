From 4cdd060ebce5efbf853a172f51d47462d1bd5c98 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Fri, 18 Apr 2014 20:21:45 -0700
Subject: [PATCH] Merge SSLIRCConnection into IRCConnection


diff --git a/core/irc.py b/core/irc.py
index d6f4284..f6ddf85 100644
--- a/core/irc.py
+++ b/core/irc.py
@@ -7,7 +7,6 @@ from ssl import wrap_socket, CERT_NONE, CERT_REQUIRED, SSLError
 
 from core.permissions import PermissionManager
 
-
 irc_prefix_rem = re.compile(r'(.*?) (.*?) (.*)').match
 irc_noprefix_rem = re.compile(r'()(.*?) (.*)').match
 irc_netmask_rem = re.compile(r':?([^!@]*)!?([^@]*)@?(.*)').match
@@ -162,18 +161,28 @@ class ParseThread(threading.Thread):
 class IRCConnection(object):
     """handles an IRC connection"""
 
-    def __init__(self, logger, name, host, port, input_queue, output_queue):
+    def __init__(self, logger, name, host, port, input_queue, output_queue, ssl, ignore_cert_errors=True, timeout=300):
         self.logger = logger
-        self.output_queue = output_queue  # lines to be sent out
-        self.input_queue = input_queue  # lines that were received
-        self.socket = self.create_socket()
         self.conn_name = name
         self.host = host
         self.port = port
-        self.timeout = 300
+        self.output_queue = output_queue  # lines to be sent out
+        self.input_queue = input_queue  # lines that were received
+        self.ssl = ssl
+        self.ignore_cert_errors = ignore_cert_errors
+        self.timeout = timeout
+        self.socket = self.create_socket()
 
     def create_socket(self):
-        return socket.socket(socket.AF_INET, socket.TCP_NODELAY)
+        sock = socket.socket(socket.AF_INET, socket.TCP_NODELAY)
+        if self.ssl:
+            if self.ignore_cert_errors:
+                cert_requirement = CERT_NONE
+            else:
+                cert_requirement = CERT_REQUIRED
+            sock = wrap_socket(sock, server_side=False, cert_reqs=cert_requirement)
+
+        return sock
 
     def connect(self):
         self.socket.connect((self.host, self.port))
@@ -196,19 +205,6 @@ class IRCConnection(object):
         self.connect()
 
 
-class SSLIRCConnection(IRCConnection):
-    """handles a SSL IRC connection"""
-
-    def __init__(self, logger, name, host, port, input_queue, output_queue, ignore_cert_errors):
-        self.ignore_cert_errors = ignore_cert_errors
-        IRCConnection.__init__(self, logger, name, host, port, input_queue, output_queue)
-
-    def create_socket(self):
-        return wrap_socket(IRCConnection.create_socket(self), server_side=False,
-                           cert_reqs=CERT_NONE if self.ignore_cert_errors else
-                           CERT_REQUIRED)
-
-
 class BotConnection(object):
     """ A BotConnection represents each connection the bot makes to an IRC server
     :type bot: core.bot.CloudBot
@@ -274,7 +270,8 @@ class BotConnection(object):
         self.permissions = PermissionManager(self)
 
         # create the IRC connection and connect
-        self.connection = self.create_connection()
+        self.connection = IRCConnection(self.bot.logger, self.name, self.server, self.port, self.input_queue,
+                                        self.output_queue, self.ssl)
         self.connection.connect()
 
         self.set_pass(self.config.get('server_password'))
@@ -288,14 +285,6 @@ class BotConnection(object):
         self.parse_thread.daemon = True
         self.parse_thread.start()
 
-    def create_connection(self):
-        if self.ssl:
-            return SSLIRCConnection(self.bot.logger, self.name, self.server, self.port, self.input_queue,
-                                    self.output_queue, True)
-        else:
-            return IRCConnection(self.bot.logger, self.name, self.server, self.port, self.input_queue,
-                                 self.output_queue)
-
     def stop(self):
         self.connection.stop()
 
-- 
1.9.2

