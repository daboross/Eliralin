From 5b8e1887feeb4d8ea996ea4994e7045cfe1dd160 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 7 Apr 2014 13:35:52 -0700
Subject: [PATCH] Document ALL the paramater types


diff --git a/core/bot.py b/core/bot.py
index fee633a..95f0135 100644
--- a/core/bot.py
+++ b/core/bot.py
@@ -19,14 +19,14 @@ logger_initialized = False
 def clean_name(n):
     """strip all spaces and capitalization
     :type n: str
-    :rtype : str
+    :rtype: str
     """
     return re.sub('[^A-Za-z0-9_]+', '', n.replace(" ", "_"))
 
 
 def get_logger():
     """create and return a new logger object
-    :rtype : logging.Logger
+    :rtype: logging.Logger
     """
     # create logger
     logger = logging.getLogger("cloudbot")
@@ -62,6 +62,20 @@ def get_logger():
 
 
 class CloudBot(threading.Thread):
+    """
+    :type start_time: float
+    :type running: bool
+    :type do_restart: bool
+    :type connections: list[core.irc.BotConnection]
+    :type commands: list
+    :type logger: logging.Logger
+    :type data_dir: bytes
+    :type config: core.config.Config
+    :type db_session: scoped_session
+    :type plugins: dict
+    :type loader: core.loader.PluginLoader
+    """
+
     def __init__(self):
         # basic variables
         self.start_time = time.time()
@@ -122,14 +136,14 @@ class CloudBot(threading.Thread):
         """recieves input from the IRC engine and processes it"""
         self.logger.info("Starting main thread.")
         while self.running:
-            for instance in self.connections:
+            for connection in self.connections:
                 try:
-                    incoming = instance.parsed_queue.get_nowait()
+                    incoming = connection.parsed_queue.get_nowait()
                     if incoming == StopIteration:
                         print("StopIteration")
                         # IRC engine has signalled timeout, so reconnect (ugly)
-                        instance.connection.reconnect()
-                    main.main(self, instance, incoming)
+                        connection.connection.reconnect()
+                    main.main(self, connection, incoming)
                 except queue.Empty:
                     pass
 
diff --git a/core/config.py b/core/config.py
index e8b8ae1..7f7fa09 100644
--- a/core/config.py
+++ b/core/config.py
@@ -8,10 +8,20 @@ from watchdog.tricks import Trick
 
 
 class Config(dict):
+    """
+    :type filename: str
+    :type path: bytes
+    :type bot: core.bot.CloudBot
+    :type observer: Observer
+    :type event_handler: ConfigEventHandler
+    """
     def __init__(self, bot, *args, **kwargs):
         """
         :type bot: core.bot.CloudBot
+        :type args: list
+        :type kwargs: dict
         """
+        dict.__init__(self, *args, **kwargs)
         self.filename = "config.json"
         self.path = os.path.abspath(self.filename)
         self.bot = bot
@@ -64,6 +74,11 @@ class Config(dict):
 
 
 class ConfigEventHandler(Trick):
+    """
+    :type bot: core.bot.CloudBot
+    :type config: core.config.Config
+    :type logger: logging.Logger
+    """
     def __init__(self, bot, config, *args, **kwargs):
         """
         :type bot: core.bot.CloudBot
diff --git a/core/irc.py b/core/irc.py
index 18b7303..d94bded 100644
--- a/core/irc.py
+++ b/core/irc.py
@@ -14,13 +14,13 @@ irc_netmask_rem = re.compile(r':?([^!@]*)!?([^@]*)@?(.*)').match
 irc_param_ref = re.compile(r'(?:^|(?<= ))(:.*|[^ ]+)').findall
 
 
-def decode(txt):
+def decode(encoded):
     for codec in ('utf-8', 'iso-8859-1', 'shift_jis', 'cp1252'):
         try:
-            return txt.decode(codec)
+            return encoded.decode(codec)
         except UnicodeDecodeError:
             continue
-    return txt.decode('utf-8', 'ignore')
+    return encoded.decode('utf-8', 'ignore')
 
 
 def censor(text):
@@ -207,7 +207,25 @@ class SSLIRCConnection(IRCConnection):
 
 
 class BotConnection(object):
-    """ A BotConnection represents each connection the bot makes to an IRC server """
+    """ A BotConnection represents each connection the bot makes to an IRC server
+    :type bot: core.bot.CloudBot
+    :type name: str
+    :type channels: list[str]
+    :type config: dict[str, ?]
+    :type ssl: bool
+    :type server: str
+    :type port: int
+    :type logger: logging.Logger
+    :type nick: str
+    :type vars: dict
+    :type history: dict
+    :type parsed_queue: queue.Queue
+    :type input_queue: queue.Queue
+    :type output_queue: queue.Queue
+    :type connection: IRCConnection
+    :type parse_thread: ParseThread
+    :type permissions: PermissionManager
+    """
 
     def __init__(self, bot, name, server, nick, port=6667, ssl=False, logger=None, channels=None, config=None):
         """
@@ -218,8 +236,8 @@ class BotConnection(object):
         :type port: int
         :type ssl: bool
         :type logger: logging.Logger
-        :type channels: list
-        :type config: map
+        :type channels: list[str]
+        :type config: dict[str, ?]
         """
         self.bot = bot
         self.name = name
@@ -246,7 +264,6 @@ class BotConnection(object):
         # format: [rawline, prefix, command, params,
         # nick, user, host, paramlist, msg]
 
-        self.parsed_queue = queue.Queue()
         self.input_queue = queue.Queue()
         self.output_queue = queue.Queue()
 
@@ -327,7 +344,7 @@ class BotConnection(object):
     def cmd(self, command, params=None):
         """
         :type command: str
-        :type params: list
+        :type params: list[str]
         """
         if params:
             params[-1] = ':' + params[-1]
diff --git a/core/main.py b/core/main.py
index 406628a..2284f1f 100644
--- a/core/main.py
+++ b/core/main.py
@@ -8,11 +8,40 @@ _thread.stack_size(1024 * 512)  # reduce vm size
 
 
 class Input:
+    """
+    :type bot: core.bot.CloudBot
+    :type conn: core.irc.BotConnection
+    :type raw: str
+    :type prefix: str
+    :type command: str
+    :type params: str
+    :type nick: str
+    :type user: str
+    :type host: str
+    :type mask: str
+    :type paraml: list[str]
+    :type msg: str
+    :type input: Input
+    :type text: list[str]
+    :type server: str
+    :type lastparam: str
+    :type chan: str
+    """
     def __init__(self, bot, conn, raw, prefix, command, params,
-                 nick, user, host, mask, paraml, msg):
+                 nick, user, host, mask, paramlist, msg):
         """
         :type bot: core.bot.CloudBot
         :type conn: core.irc.BotConnection
+        :type raw: str
+        :type prefix: str
+        :type command: str
+        :type params: str
+        :type nick: str
+        :type user: str
+        :type host: str
+        :type mask: str
+        :type paramlist: list[str]
+        :type msg: str
         """
         self.bot = bot
         self.conn = conn
@@ -24,21 +53,21 @@ class Input:
         self.user = user
         self.host = host
         self.mask = mask
-        self.paraml = paraml
+        self.paraml = paramlist
         self.msg = msg
         self.input = self
         self.text = self.paraml
         self.server = conn.server
-        self.lastparam = paraml[-1]
-        self.chan = paraml[0].lower()
+        self.lastparam = paramlist[-1]  # TODO: This is equivalent to msg
+        self.chan = paramlist[0].lower()
 
         if self.chan == conn.nick.lower():  # is a PM
             self.chan = nick
 
     def message(self, message, target=None):
         """sends a message to a specific or current channel/user
-        :type target: str
         :type message: str
+        :type target: str
         """
         if target is None:
             target = self.chan
@@ -46,8 +75,8 @@ class Input:
 
     def reply(self, message, target=None):
         """sends a message to the current channel/user with a prefix
-        :type target: str
         :type message: str
+        :type target: str
         """
         if target is None:
             target = self.chan
@@ -59,8 +88,8 @@ class Input:
 
     def action(self, message, target=None):
         """sends an action to the current channel/user or a specific channel/user
-        :type target: str
         :type message: str
+        :type target: str
         """
         if target is None:
             target = self.chan
@@ -69,9 +98,9 @@ class Input:
 
     def ctcp(self, message, ctcp_type, target=None):
         """sends an ctcp to the current channel/user or a specific channel/user
-        :type target: str
-        :type ctcp_type: str
         :type message: str
+        :type ctcp_type: str
+        :type target: str
         """
         if target is None:
             target = self.chan
@@ -79,8 +108,8 @@ class Input:
 
     def notice(self, message, target=None):
         """sends a notice to the current channel/user or a specific channel/user
-        :type target: str
         :type message: str
+        :type target: str
         """
         if target is None:
             target = self.nick
@@ -90,8 +119,8 @@ class Input:
 
 def run(bot, func, input):
     """
-    :type func: func
     :type bot: core.bot.CloudBot
+    :type func: func
     :type input: Input
     """
     uses_db = True
@@ -154,24 +183,30 @@ def do_sieve(sieve, bot, input, func, type, args):
     :type input: Input
     :type func: function
     :type type: str
-    :type args: list
+    :type args: dict[str, ?]
+    :rtype: Input
     """
     try:
         return sieve(bot, input, func, type, args)
-    except Exception:
+    except:
         bot.logger.exception("Error in sieve {}:".format(func._filename))
         return None
 
 
 class Handler:
-    """Runs plugins in their own threads (ensures order)"""
+    """Runs plugins in their own threads (ensures order)
+    :type bot: core.bot.CloudBot
+    :type func: function
+    :type input_queue: queue.Queue[Input]
+    """
 
     def __init__(self, bot, func):
         """
         :type bot: core.bot.CloudBot
+        :type func: function
         """
-        self.func = func
         self.bot = bot
+        self.func = func
         self.input_queue = queue.Queue()
         _thread.start_new_thread(self.start, ())
 
@@ -194,6 +229,9 @@ class Handler:
         self.input_queue.put(StopIteration)
 
     def put(self, value):
+        """
+        :type value: Input
+        """
         self.input_queue.put(value)
 
 
@@ -203,7 +241,7 @@ def dispatch(bot, input, kind, func, args, autohelp=False):
     :type input: Input
     :type kind: str
     :type func: function
-    :type args: list
+    :type args: dict[str, ?]
     :type autohelp: bool
     """
     for sieve, in bot.plugins['sieve']:
@@ -223,8 +261,9 @@ def dispatch(bot, input, kind, func, args, autohelp=False):
 
 def match_command(bot, command):
     """
-    :type command: str
     :type bot: core.bot.CloudBot
+    :type command: str
+    :rtype: str | list
     """
     commands = list(bot.commands)
 
@@ -239,6 +278,11 @@ def match_command(bot, command):
 
 
 def main(bot, conn, out):
+    """
+    :type bot: core.bot.CloudBot
+    :type conn: core.irc.BotConnection
+    :type out: list
+    """
     inp = Input(bot, conn, *out)
     command_prefix = conn.config.get('command_prefix', '.')
 
-- 
1.9.1

