From cff7f35420d7e254d40c7abb38853ede9bbcb573 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 7 Apr 2014 13:35:32 -0700
Subject: [PATCH] Fix permissions not registering if multiple groups have the
 same permission


diff --git a/core/permissions.py b/core/permissions.py
index 25103d1..ad69531 100644
--- a/core/permissions.py
+++ b/core/permissions.py
@@ -2,16 +2,27 @@ from fnmatch import fnmatch
 
 
 class PermissionManager(object):
+    """
+    :type logger: logging.Logger
+    :type bot: core.bot.CloudBot
+    :type name: str
+    :type config: dict[str, ?]
+    :type group_perms: dict[str, list[str]]
+    :type group_users: dict[str, list[str]]
+    :type perm_users: dict[str, list[str]]
+    """
     def __init__(self, bot, conn):
-
-        # this is all legacy code, needs to be redone with classes and whatnot
+        """
+        :type bot: core.bot.CloudBot
+        :type conn: core.irc.BotConnection
+        """
         self.logger = bot.logger
 
-        self.logger.info("Creating simple permission manager for {}.".format(conn.name))
+        self.logger.info("Created permission manager for {}.".format(conn.name))
 
         # stuff
         self.bot = bot
-        self.conn = conn
+        self.name = conn.name
         self.config = conn.config
 
         self.group_perms = {}
@@ -21,44 +32,66 @@ class PermissionManager(object):
         self.reload()
 
     def reload(self):
-        self.logger.info("Reloading permissions for {}.".format(self.conn.name))
-        groups = self.conn.config.get("permissions", [])
+        self.logger.info("Reloading permissions for {}.".format(self.name))
+        groups = self.config.get("permissions", {})
         # work out the permissions and users each group has
         for key, value in groups.items():
+            key = key.lower()
             self.group_perms[key] = []
             self.group_users[key] = []
             for permission in value["perms"]:
-                self.group_perms[key].append(permission)
+                self.group_perms[key].append(permission.lower())
             for user in value["users"]:
-                self.group_users[key].append(user)
+                self.group_users[key].append(user.lower())
 
         for group, users in self.group_users.items():
             group_perms = self.group_perms[group]
             for perm in group_perms:
-                self.perm_users[perm] = []
-                self.perm_users[perm] = users
-
-    def has_perm_mask(self, mask, perm):
-
-        allowed_users = self.perm_users[perm]
-
-        for pattern in allowed_users:
-            if fnmatch(mask.lower(), pattern.lower()):
-                self.logger.info("Allowed user {} access to {}".format(mask, perm))
+                if self.perm_users.get(perm) is None:
+                    self.perm_users[perm] = []
+                self.perm_users[perm].extend(users)
+
+        self.logger.debug("Group permissions for {}: {}".format(self.name, self.group_perms))
+        self.logger.debug("Group users for {}: {}".format(self.name, self.group_users))
+        self.logger.debug("Permission users for {}: {}".format(self.name, self.perm_users))
+
+    def has_perm_mask(self, user_mask, perm):
+        """
+        :type user_mask: str
+        :type perm: str
+        :rtype: bool
+        """
+        allowed_users = self.perm_users[perm.lower()]
+
+        for allowed_mask in allowed_users:
+            if fnmatch(user_mask.lower(), allowed_mask):
+                self.logger.info("Allowed user {} access to {}".format(user_mask, perm))
                 return True
 
         return False
 
     def get_group_permissions(self, group):
-        return self.group_perms.get(group)
+        """
+        :type group: str
+        :rtype: list[str]
+        """
+        return self.group_perms.get(group.lower())
 
     def get_group_users(self, group):
-        return self.group_users.get(group)
-
-    def get_user_permissions(self, user):
+        """
+        :type group: str
+        :rtype: list[str]
+        """
+        return self.group_users.get(group.lower())
+
+    def get_user_permissions(self, user_mask):
+        """
+        :type user_mask: str
+        :rtype: list[str]
+        """
         permissions = []
         for permission, users in self.perm_users.items():
-            for mask in users:
-                if fnmatch(user.lower(), mask.lower()):
+            for mask_to_check in users:
+                if fnmatch(user_mask.lower(), mask_to_check):
                     permissions.append(permission)
         return permissions
-- 
1.9.1

