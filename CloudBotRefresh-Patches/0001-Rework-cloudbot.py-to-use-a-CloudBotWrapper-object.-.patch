From bc25152b0d61d4e030e6fea997f7f7b2f18edd9e Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Sat, 5 Apr 2014 23:01:45 -0700
Subject: [PATCH] Rework cloudbot.py to use a 'CloudBotWrapper' object. Also
 make it not start if __name__ != "__main__"


diff --git a/cloudbot.py b/cloudbot.py
index f567315..9ec59d9 100755
--- a/cloudbot.py
+++ b/cloudbot.py
@@ -1,11 +1,12 @@
-#!/usr/bin/env python
-from core import bot
-
+#!/usr/bin/env python3
 import os
 import sys
 import time
 import signal
 
+from core import bot
+
+
 # check python version 
 if sys.version_info < (3, 2, 0):
     print("CloudBot3 requires Python 3.2 or newer.")
@@ -16,37 +17,50 @@ os.chdir(sys.path[0] or '.')  # do stuff relative to the install directory
 
 # this is not the code you are looking for
 if os.path.exists(os.path.abspath('lib')):
-    sys.path += ['lib'] 
+    sys.path += ['lib']
 
 print('CloudBot3 <http://git.io/cloudbotirc>')
 
 
-def exit_gracefully(signum, frame):
-    # this doesn't really work at all
-    cloudbot.stop()
-
-    # restore the original handler so if they do it again it triggers
-    signal.signal(signal.SIGINT, original_sigint)
-
-# store the original SIGINT handler
-original_sigint = signal.getsignal(signal.SIGINT)
-signal.signal(signal.SIGINT, exit_gracefully)
-
-# create a bot master and start it
-cloudbot = bot.CloudBot()
-cloudbot.start()
-
-# watch to see if the bot stops running or needs a restart
-while True:
-    if cloudbot.running:
-        time.sleep(.1)
-    else:
-        if cloudbot.do_restart:
-            # create a new bot thread and start it
-            # Todo: Make this work
-            del cloudbot
-            cloudbot = bot.Bot()
-            cloudbot.start()
-            continue
-        else:
-            break
\ No newline at end of file
+class CloudBotWrapper():
+    def __init__(self):
+        # create the master cloudbot
+        self.cloudbot = bot.CloudBot()
+
+        self.original_sigint = None
+
+    def set_signals(self):
+        # store the original SIGINT handler
+        self.original_sigint = signal.getsignal(signal.SIGINT)
+        signal.signal(signal.SIGINT, self.exit_gracefully)
+
+    def exit_gracefully(self, signum, frame):
+        # this doesn't really work at all
+        self.cloudbot.stop()
+
+        # restore the original handler so if they do it again it triggers
+        signal.signal(signal.SIGINT, self.original_sigint)
+
+    def run(self):
+        # start the bot master
+        self.cloudbot.start()
+
+        # watch to see if the bot stops running or needs a restart
+        while True:
+            if self.cloudbot.running:
+                time.sleep(.1)
+            else:
+                if self.cloudbot.do_restart:
+                    # create a new bot thread and start it
+                    del self.cloudbot
+                    self.cloudbot = bot.CloudBot()
+                    self.cloudbot.start()
+                    continue
+                else:
+                    break
+
+
+if __name__ == "__main__":
+    main_wrapper = CloudBotWrapper()
+    main_wrapper.set_signals()
+    main_wrapper.run()
-- 
1.9.1

