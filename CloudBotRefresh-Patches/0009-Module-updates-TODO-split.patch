From a72f9680bb69f8ad295a9d44d9379ada5b587fe3 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Tue, 22 Apr 2014 21:10:48 -0700
Subject: [PATCH] Module updates - TODO: split


diff --git a/modules/dbtest.py b/modules/dbtest.py
index 67b8afe..7a88e38 100644
--- a/modules/dbtest.py
+++ b/modules/dbtest.py
@@ -14,7 +14,7 @@ def init_db(db):
 
 
 @hook.command
-def adduser(text, db):
+def adduserdb(text, db):
     init_db(db)
 
     # create DB connection
diff --git a/modules/log.py b/modules/log.py
index 6d66a17..390893e 100644
--- a/modules/log.py
+++ b/modules/log.py
@@ -80,7 +80,7 @@ def beautify(input):
 
 def get_log_stream(data_dir, server, chan):
     new_filename = get_log_filename(data_dir, server, chan)
-    cache_key = "{} {}".format(server, chan)
+    cache_key = (server, chan)
     old_filename, log_stream = stream_cache.get(cache_key, (None, None))
 
     if new_filename != old_filename:  # we need to open a new stream
@@ -123,4 +123,8 @@ def log(input, bot):
             channel_log = get_log_stream(bot.data_dir, input.server, channel)
             channel_log.write(human_readable + '\n')
 
-        bot.logger.info(human_readable)
+# Log console separately to prevent lag
+@hook.event("*")
+def console_log(input, bot):
+    human_readable = beautify(input)
+    bot.logger.info(human_readable)
diff --git a/modules/minecraft_ping.py b/modules/minecraft_ping.py
index cc31679..f590f03 100644
--- a/modules/minecraft_ping.py
+++ b/modules/minecraft_ping.py
@@ -74,8 +74,8 @@ def mcping_modern(host, port):
             raise PingError("Request timed out")
 
         # send handshake + status request
-        s.send(pack_data("\x00\x00" + pack_data(host.encode('utf8')) + pack_port(port) + "\x01"))
-        s.send(pack_data("\x00"))
+        s.send(pack_data(b"\x00\x00" + pack_data(host.encode('utf8')) + pack_port(port) + b"\x01"))
+        s.send(pack_data(b"\x00"))
 
         # read response
         unpack_varint(s)  # Packet length
@@ -85,7 +85,7 @@ def mcping_modern(host, port):
         if not l > 1:
             raise PingError("Invalid response")
 
-        d = ""
+        d = b""
         while len(d) < l:
             d += s.recv(1024)
 
diff --git a/modules/minecraft_user.py b/modules/minecraft_user.py
index a9376fc..b442177 100644
--- a/modules/minecraft_user.py
+++ b/modules/minecraft_user.py
@@ -41,7 +41,7 @@ def get_profile(name):
         headers = {"Content-Type": "application/json"}
         r = http.get_json(
             'https://api.mojang.com/profiles/page/1',
-            post_data=json.dumps(request),
+            post_data=json.dumps(request).encode('utf-8'),
             headers=headers
         )
     except (http.URLError, http.HTTPError) as e:
diff --git a/modules/newegg.py b/modules/newegg.py
index 7ed66a4..ffc7014 100644
--- a/modules/newegg.py
+++ b/modules/newegg.py
@@ -83,7 +83,7 @@ def newegg(inp):
     # submit the search request
     r = http.get_json(
         'http://www.ows.newegg.com/Search.egg/Advanced',
-        post_data=json.dumps(request)
+        post_data=json.dumps(request).encode('utf-8')
     )
 
     # get the first result
diff --git a/modules/ping.py b/modules/ping.py
index 66286df..1ccfce1 100644
--- a/modules/ping.py
+++ b/modules/ping.py
@@ -5,7 +5,6 @@ import os
 
 from util import hook
 
-
 ping_regex = re.compile(r"(\d+.\d+)/(\d+.\d+)/(\d+.\d+)/(\d+.\d+)")
 
 
@@ -36,7 +35,7 @@ def ping(inp, reply=None):
 
     reply("Attempting to ping {} {} times...".format(host, count))
 
-    pingcmd = subprocess.check_output(["ping", "-c", count, host])
+    pingcmd = subprocess.check_output(["ping", "-c", count, host]).decode("utf-8")
     if "request timed out" in pingcmd or "unknown host" in pingcmd:
         return "error: could not ping host"
     else:
diff --git a/modules/plpaste.py b/modules/plpaste.py
index 97529cb..a5bdadb 100644
--- a/modules/plpaste.py
+++ b/modules/plpaste.py
@@ -1,16 +1,20 @@
-import os
 from os import listdir
 
 from util import hook, web
 
 
 @hook.command(permissions=["adminonly"])
-def plpaste(inp, bot=None):
-    if inp in bot.commands:
-        with open(os.path.join("modules", bot.commands[inp][0].__code__.co_filename.strip())) as f:
+def plpaste(text, bot):
+    """
+    :type text: str
+    :type bot: core.bot.CloudBot
+    """
+    if text in bot.plugin_manager.commands:
+        file_path = bot.plugin_manager.commands[text].module.file_path
+        with open(file_path) as f:
             return web.haste(f.read(), ext='py')
-    elif inp + ".py" in listdir('modules/'):
-        with open('modules/{}.py'.format(inp)) as f:
+    elif text + ".py" in listdir('modules/'):
+        with open('modules/{}.py'.format(text)) as f:
             return web.haste(f.read(), ext='py')
     else:
         return "Could not find specified plugin."
diff --git a/modules/title.py b/modules/title.py
index 506c793..a31dc42 100644
--- a/modules/title.py
+++ b/modules/title.py
@@ -6,7 +6,7 @@ from util import hook, http, urlnorm
 @hook.command
 def title(inp):
     """title <url> -- gets the title of a web page"""
-    url = urlnorm.normalize(inp.encode('utf-8'), assume_scheme="http")
+    url = urlnorm.normalize(inp, assume_scheme="http")
 
     try:
         page = http.open(url)
diff --git a/modules/urban.py b/modules/urban.py
index aa9a23c..42a3254 100644
--- a/modules/urban.py
+++ b/modules/urban.py
@@ -1,7 +1,6 @@
 import re
 
-from util import hook, http
-
+from util import hook, http, formatting
 
 base_url = 'http://www.urbandictionary.com/iphone/search/define'
 
@@ -35,7 +34,7 @@ def urban(text):
     try:
         definition = definitions[id_num - 1]['definition'].replace('\r\n', ' ')
         definition = re.sub('\s+', ' ', definition).strip()  # remove excess spaces
-        definition = text.truncate_str(definition, 200)
+        definition = formatting.truncate_str(definition, 200)
     except IndexError:
         return 'Not found.'
 
diff --git a/modules/utility.py b/modules/utility.py
index 86eaf37..2d1cc49 100644
--- a/modules/utility.py
+++ b/modules/utility.py
@@ -5,6 +5,7 @@ import re
 from util import hook, formatting
 
 
+
 # variables
 
 colors = collections.OrderedDict([
@@ -141,9 +142,9 @@ def reverse(inp):
 
 
 @hook.command("hash")
-def hash_command(inp):
+def hash_command(text):
     """hash <string> -- Returns hashes of <string>."""
-    return ', '.join(x + ": " + getattr(hashlib, x)(inp).hexdigest()
+    return ', '.join(x + ": " + getattr(hashlib, x)(text.encode("utf-8")).hexdigest()
                      for x in ['md5', 'sha1', 'sha256'])
 
 
-- 
1.9.2

