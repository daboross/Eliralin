From 50f9089c96f4cc2ba26ec5f297a39ef68822d563 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Wed, 23 Apr 2014 15:11:54 -0700
Subject: [PATCH] Update utility plugin for new format, and update encoding
 part to work with python3


diff --git a/modules/utility.py b/modules/utility.py
index 2d1cc49..4da1b90 100644
--- a/modules/utility.py
+++ b/modules/utility.py
@@ -1,13 +1,12 @@
+import base64
+import codecs
 import hashlib
 import collections
 import re
+import binascii
 
 from util import hook, formatting
 
-
-
-# variables
-
 colors = collections.OrderedDict([
     ('red', '\x0304'),
     ('orange', '\x0307'),
@@ -37,9 +36,11 @@ def strip(string):
 ## TODO: make this capitalize sentences correctly
 @hook.command("capitalise")
 @hook.command
-def capitalize(inp):
-    """capitalize <string> -- Capitalizes <string>."""
-    return inp.capitalize()
+def capitalize(text):
+    """capitalize <string> -- Capitalizes <string>.
+    :type text: str
+    """
+    return ". ".join([sentance.capitalize() for sentance in text.split(". ")])
 
 
 @hook.command
@@ -69,73 +70,68 @@ def swapcase(inp):
 # encoding
 
 
-@hook.command
-def rot13(inp):
+@hook.command("rot13")
+def rot13_encode(text):
     """rot13 <string> -- Encode <string> with rot13."""
-    return inp.encode('rot13')
+    encoder = codecs.getencoder("rot-13")
+    return encoder(text)[0]
 
 
-@hook.command
-def base64(inp):
+@hook.command("base64")
+def base64_encode(text):
     """base64 <string> -- Encode <string> with base64."""
-    return inp.encode('base64')
+    return base64.b64encode(text.encode()).decode()
 
 
-@hook.command
-def unbase64(inp):
+@hook.command(["debase64", "unbase64"])
+def base64_decode(text, notice):
     """unbase64 <string> -- Decode <string> with base64."""
-    return inp.decode('base64')
+    try:
+        return base64.b64decode(text.encode()).decode()
+    except binascii.Error:
+        notice("Invalid base64 string '{}'".format(text))
 
 
-@hook.command
-def checkbase64(inp):
+@hook.command(["isbase64", "checkbase64"])
+def base64_check(text):
+    """isbase64 <string> -- Checks if <string> is a valid base64 encoded string"""
     try:
-        decoded = inp.decode('base64')
-        recoded = decoded.encode('base64').strip()
-        is_base64 = recoded == inp
-    except:
-        return '"{}" is not base64 encoded'.format(inp)
-
-    if is_base64:
-        return '"{}" is base64 encoded'.format(recoded)
+        base64.b64decode(text.encode())
+    except binascii.Error:
+        return "'{}' is not a valid base64 encoded string".format(text)
     else:
-        return '"{}" is not base64 encoded'.format(inp)
+        return "'{}' is a valid base64 encoded string".format(text)
 
 
 @hook.command
-def unescape(inp):
-    """unescape <string> -- Unescapes <string>."""
-    try:
-        return inp.decode('unicode-escape')
-    except Exception as e:
-        return "Error: {}".format(e)
+def unescape(text):
+    """unescape <string> -- Unicode unescapes <string>."""
+    decoder = codecs.getdecoder("unicode_escape")
+    return decoder(text)[0]
 
 
 @hook.command
-def escape(inp):
-    """escape <string> -- Escapes <string>."""
-    try:
-        return inp.encode('unicode-escape')
-    except Exception as e:
-        return "Error: {}".format(e)
-
+def escape(text):
+    """escape <string> -- Unicode escapes <string>."""
+    encoder = codecs.getencoder("unicode_escape")
+    return encoder(text)[0].decode()
 
 # length
 
 
 @hook.command
-def length(inp):
-    """length <string> -- gets the length of <string>"""
-    return "The length of that string is {} characters.".format(len(inp))
+def length(text):
+    """length <string> -- Gets the length of <string>"""
+    return "The length of that string is {} characters.".format(len(text))
 
 
 # reverse
 
 
 @hook.command
-def reverse(inp):
-    """reverse <string> -- reverses <string>."""
-    return inp[::-1]
+def reverse(text):
+    """reverse <string> -- Reverses <string>."""
+    return text[::-1]
 
 
 # hashing
@@ -152,22 +148,22 @@ def hash_command(text):
 
 
 @hook.command
-def munge(inp):
+def munge(text):
     """munge <text> -- Munges up <text>."""
-    return formatting.munge(inp)
+    return formatting.munge(text)
 
 
 # colors - based on code by Reece Selwood - <https://github.com/hitzler/homero>
 
 
 @hook.command
-def rainbow(inp):
-    inp = str(inp)
-    inp = strip(inp)
+def rainbow(text):
+    text = str(text)
+    text = strip(text)
     col = list(colors.items())
     out = ""
     l = len(colors)
-    for i, t in enumerate(inp):
+    for i, t in enumerate(text):
         if t == " ":
             out += t
         else:
@@ -176,23 +172,23 @@ def rainbow(inp):
 
 
 @hook.command
-def wrainbow(inp):
-    inp = str(inp)
+def wrainbow(text):
+    text = str(text)
     col = list(colors.items())
-    inp = strip(inp).split(' ')
+    text = strip(text).split(' ')
     out = []
     l = len(colors)
-    for i, t in enumerate(inp):
+    for i, t in enumerate(text):
         out.append(col[i % l][1] + t)
     return ' '.join(out)
 
 
 @hook.command
-def usa(inp):
-    inp = strip(inp)
+def usa(text):
+    text = strip(text)
     c = [colors['red'], '\x0300', colors['blue']]
     l = len(c)
     out = ''
-    for i, t in enumerate(inp):
+    for i, t in enumerate(text):
         out += c[i % l] + t
     return out
-- 
1.9.2

