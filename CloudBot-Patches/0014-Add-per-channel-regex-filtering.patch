From 7eb4a59e911cf9f70f926f6f93d8521b20cc7fd0 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 13 Jan 2014 23:18:39 -0800
Subject: [PATCH] Add per-channel regex filtering.


diff --git a/plugins/regex_chans.py b/plugins/regex_chans.py
new file mode 100644
index 0000000..a6cf1f7
--- /dev/null
+++ b/plugins/regex_chans.py
@@ -0,0 +1,131 @@
+from util import hook
+
+
+def db_init(db):
+    db.execute("CREATE TABLE IF NOT EXISTS regexchans(channel PRIMARY KEY, status)")
+    db.commit()
+
+
+def get_status(db, channel):
+    row = db.execute("SELECT status FROM regexchans WHERE channel = ?", [channel]).fetchone()
+    if row:
+        return row[0]
+    else:
+        return None
+
+
+def set_status(db, channel, status):
+    row = db.execute("REPLACE INTO regexchans (channel, status) VALUES(?, ?)", [channel, status])
+    db.commit()
+
+
+def delete_status(db, channel):
+    row = db.execute("DELETE FROM regexchans WHERE channel = ?", [channel])
+    db.commit()
+
+
+def list_status(db):
+    row = db.execute("SELECT * FROM regexchans").fetchall()
+    result = ""
+    for values in row:
+        if result:
+            result += ", {}: {}".format(values[0], values[1])
+        else:
+            result = "{}: {}".format(values[0], values[1])
+    return result
+
+
+def clean_status_db(db):
+    row = db.execute("SELECT * FROM regexchans").fetchall()
+    for values in row:
+        chan = values[0]
+        chanstatus = values[1]
+        if chan != chan.lower():
+            delete_status(db, chan)
+            set_status(db, chan.lower(), chanstatus)
+
+
+@hook.sieve
+def sieve_regex(bot, input, func, kind, args):
+    db = bot.get_db_connection(input.conn)
+    db_init(db)
+    if kind == 'regex' and input.chan.startswith("#") and func.__name__ != 'factoid':
+        chanstatus = get_status(db, input.chan)
+        if chanstatus == "ENABLED":
+            print "Allowing input.raw={}, kind={}, args={} from {}".format(input.raw, kind, args, input.chan)
+        else:
+            print "Denying input.raw={}, kind={}, args={} from {}".format(input.raw, kind, args, input.chan)
+            return None
+    return input
+
+
+@hook.command(permissions=["botcontrol"])
+def enableregex(inp, db=None, message=None, chan=None, nick=None):
+    db_init(db)
+    inp = inp.strip()
+    if not inp:
+        channel = chan
+    elif inp.startswith("#"):
+        channel = inp
+    else:
+        channel = "#{}".format(inp)
+    print "Enabling regex matching (youtube, etc) in channel {} (issued by {})".format(channel, nick)
+    message("Enabling regex matching (youtube, etc) in channel {} (issued by {})".format(channel, nick))
+    set_status(db, channel, "ENABLED")
+
+
+@hook.command(permissions=["botcontrol"])
+def disableregex(inp, db=None, message=None, chan=None, nick=None):
+    db_init(db)
+    inp = inp.strip().lower()
+    if not inp:
+        channel = chan
+    elif inp.startswith("#"):
+        channel = inp
+    else:
+        channel = "#{}".format(inp)
+    print "Disabling regex matching (youtube, etc) in channel {} (issued by {})".format(channel, nick)
+    message("Disabling regex matching (youtube, etc) in channel {} (issued by {})".format(channel, nick))
+    set_status(db, channel, "DISABLED")
+
+
+@hook.command(permissions=["botcontrol"])
+def resetregex(inp, db=None, message=None, chan=None, nick=None):
+    db_init(db)
+    inp = inp.strip().lower()
+    if not inp:
+        channel = chan
+    elif inp.startswith("#"):
+        channel = inp
+    else:
+        channel = "#{}".format(inp)
+    print "Resetting regex matching (youtube, etc) in channel {} (issued by {})".format(channel, nick)
+    message("Resetting initial setting for regex matching (youtube, etc) in channel {} (issued by {})".format(channel, nick))
+    delete_status(db, channel)
+
+
+@hook.command(permissions=["botcontrol"])
+def regexstatus(inp, db=None, chan=None):
+    db_init(db)
+    inp = inp.strip().lower()
+    if not inp:
+        channel = chan
+    elif inp.startswith("#"):
+        channel = inp
+    else:
+        channel = "#{}".format(inp)
+    return "Regex status for {}: {}".format(channel, get_status(db, channel))
+
+
+@hook.command(permissions=["botcontrol"])
+def listregex(inp, db=None):
+    db_init(db)
+    return list_status(db)
+
+
+@hook.command(permissions=["botcontrol"])
+def cleanregex(inp, db=None, reply=None):
+    db_init(db)
+    reply("Initial: {}".format(list_status(db)))
+    clean_status_db(db)
+    return "After: {}".format(list_status(db))
-- 
1.8.3.2

