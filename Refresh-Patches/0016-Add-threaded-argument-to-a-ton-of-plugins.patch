From f23bf4f1c92d6167e3774419d0aef3c092d09215 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 5 May 2014 00:35:46 -0700
Subject: [PATCH] Add threaded argument to a ton of plugins


diff --git a/modules/admin.py b/modules/admin.py
index 913ad52..d6886ee 100644
--- a/modules/admin.py
+++ b/modules/admin.py
@@ -3,7 +3,7 @@ import re
 from util import hook
 
 
-@hook.command(["groups", "listgroups", "permgroups"], permissions=["permissions_users"], autohelp=False)
+@hook.command(["groups", "listgroups", "permgroups"], threaded=False, permissions=["permissions_users"], autohelp=False)
 def get_permission_groups(conn):
     """groups -- lists all valid groups
     :type conn: core.irc.BotConnection
@@ -11,7 +11,7 @@ def get_permission_groups(conn):
     return "Valid groups: {}".format(conn.permissions.get_groups())
 
 
-@hook.command("gperms", permissions=["permissions_users"])
+@hook.command("gperms", threaded=False, permissions=["permissions_users"])
 def get_group_permissions(text, conn, notice):
     """gperms <group> -- lists permissions of a group
     :type text: str
@@ -29,7 +29,7 @@ def get_group_permissions(text, conn, notice):
         notice("Unknown group '{}'".format(group))
 
 
-@hook.command("gusers", permissions=["permissions_users"])
+@hook.command("gusers", threaded=False, permissions=["permissions_users"])
 def get_group_users(text, conn, notice):
     """gusers <group> -- lists users in a group
     :type text: str
@@ -47,7 +47,7 @@ def get_group_users(text, conn, notice):
         notice("Unknown group '{}'".format(group))
 
 
-@hook.command("uperms", autohelp=False)
+@hook.command("uperms", threaded=False, autohelp=False)
 def get_user_permissions(text, conn, mask, has_permission, notice):
     """uperms [user] -- lists all permissions given to a user, or the current user if none is given
     :type text: str
@@ -71,7 +71,7 @@ def get_user_permissions(text, conn, mask, has_permission, notice):
         return "User {} has no elevated permissions".format(user)
 
 
-@hook.command("ugroups", autohelp=False)
+@hook.command("ugroups", threaded=False, autohelp=False)
 def get_user_groups(text, conn, mask, has_permission, notice):
     """uperms [user] -- lists all permissions given to a user, or the current user if none is given
     :type text: str
@@ -95,7 +95,7 @@ def get_user_groups(text, conn, mask, has_permission, notice):
         return "User {} is in no permission groups".format(user)
 
 
-@hook.command("deluser", permissions=["permissions_users"])
+@hook.command("deluser", threaded=False, permissions=["permissions_users"])
 def remove_permission_user(text, bot, conn, notice, reply):
     """deluser <user> [group] -- Removes a user from a permission group, or all permission groups if none is specified
     :type text: str
@@ -150,7 +150,7 @@ def remove_permission_user(text, bot, conn, notice, reply):
         permission_manager.reload()
 
 
-@hook.command("adduser", permissions=["permissions_users"])
+@hook.command("adduser", threaded=False, permissions=["permissions_users"])
 def add_permissions_user(text, conn, bot, notice, reply):
     """adduser <user> <group> -- Adds a user to a permission group
     :type text: str
@@ -191,7 +191,7 @@ def add_permissions_user(text, conn, bot, notice, reply):
         permission_manager.reload()
 
 
-@hook.command(["stop", "quit"], permissions=["botcontrol"], autohelp=False)
+@hook.command(["stop", "quit"], threaded=True, permissions=["botcontrol"], autohelp=False)
 def stop(text, bot):
     """stop [reason] -- Stops the bot with [reason] as its quit message.
     :type text: str
@@ -203,7 +203,7 @@ def stop(text, bot):
         bot.stop()
 
 
-@hook.command(permissions=["botcontrol"], autohelp=False)
+@hook.command(threaded=True, permissions=["botcontrol"], autohelp=False)
 def restart(text, bot):
     """restart [reason] -- Restarts the bot with [reason] as its quit message.
     :type text: str
@@ -215,7 +215,7 @@ def restart(text, bot):
         bot.restart()
 
 
-@hook.command(permissions=["botcontrol"])
+@hook.command(threaded=False, permissions=["botcontrol"])
 def join(text, conn, notice):
     """join <channel> -- Joins a given channel
     :type text: str
@@ -228,7 +228,7 @@ def join(text, conn, notice):
         conn.join(target)
 
 
-@hook.command(permissions=["botcontrol"], autohelp=False)
+@hook.command(threaded=False, permissions=["botcontrol"], autohelp=False)
 def part(text, conn, chan, notice):
     """part [channel] -- Leaves a given channel, or the current one if no channel is specified
     :type text: str
@@ -246,7 +246,7 @@ def part(text, conn, chan, notice):
         conn.part(target)
 
 
-@hook.command(autohelp=False, permissions=["botcontrol"])
+@hook.command(threaded=False, autohelp=False, permissions=["botcontrol"])
 def cycle(text, conn, chan, notice):
     """cycle <channel> -- Cycles a given channel, or the current one if no channel is specified
     :type text: str
@@ -265,7 +265,7 @@ def cycle(text, conn, chan, notice):
         conn.join(target)
 
 
-@hook.command(permissions=["botcontrol"])
+@hook.command(threaded=False, permissions=["botcontrol"])
 def nick(text, conn, notice):
     """nick <nick> -- Changes the bot's nickname
     :type text: str
@@ -278,7 +278,7 @@ def nick(text, conn, notice):
     conn.set_nick(text)
 
 
-@hook.command(permissions=["botcontrol"])
+@hook.command(threaded=False, permissions=["botcontrol"])
 def raw(text, conn, notice):
     """raw <command> -- Sends a raw IRC command
     :type text: str
@@ -288,7 +288,7 @@ def raw(text, conn, notice):
     conn.send(text)
 
 
-@hook.command(permissions=["botcontrol"])
+@hook.command(threaded=False, permissions=["botcontrol"])
 def say(text, conn, chan):
     """say [channel] <message> -- Makes the bot say <message> in [channel], or the current channel if none is specified
     :type text: str
@@ -306,7 +306,7 @@ def say(text, conn, chan):
     conn.msg(channel, text)
 
 
-@hook.command(permissions=["botcontrol"])
+@hook.command(threaded=False, permissions=["botcontrol"])
 def message(text, conn):
     """message <name> <message> -- Makes the bot say <message> to <name>, <name> may be a #channel or a nickname
     :type text: str
@@ -318,8 +318,7 @@ def message(text, conn):
     conn.msg(channel, text)
 
 
-@hook.command("act", permissions=["botcontrol"])
-@hook.command(permissions=["botcontrol"])
+@hook.command(["me", "act"], threaded=False, permissions=["botcontrol"])
 def me(text, conn, chan):
     """me [channel] <action> -- Makes the bot act out <action> in a [channel], or the current channel if none is given
     :type text: str
diff --git a/modules/attacks.py b/modules/attacks.py
index c43e955..39a3bb7 100644
--- a/modules/attacks.py
+++ b/modules/attacks.py
@@ -3,7 +3,6 @@ import re
 
 from util import hook
 
-
 with open("data/larts.txt") as f:
     larts = [line.strip() for line in f.readlines()
              if not line.startswith("//")]
@@ -28,7 +27,7 @@ def is_self(conn, target):
         return False
 
 
-@hook.command
+@hook.command(threaded=False)
 def lart(text, conn, nick, notice, action):
     """lart <user> -- LARTs <user>.
     :type text: str
@@ -51,7 +50,7 @@ def lart(text, conn, nick, notice, action):
     action(phrase.format(user=target))
 
 
-@hook.command
+@hook.command(threaded=False)
 def insult(text, conn, nick, notice, message):
     """insult <user> -- Makes the bot insult <user>.
     :type text: str
@@ -71,7 +70,7 @@ def insult(text, conn, nick, notice, message):
     message("{}, {}".format(target, random.choice(insults)))
 
 
-@hook.command
+@hook.command(threaded=False)
 def flirt(text, conn, nick, notice, message):
     """flirt <user> -- Makes the bot flirt with <user>.
     :type text: str
diff --git a/modules/brainfuck.py b/modules/brainfuck.py
index 427ea2b..9f04bcc 100644
--- a/modules/brainfuck.py
+++ b/modules/brainfuck.py
@@ -10,7 +10,7 @@ BUFFER_SIZE = 5000
 MAX_STEPS = 1000000
 
 
-@hook.command(["brainfuck", "bf"])
+@hook.command(["brainfuck", "bf"], threaded=False)
 def bf(text):
     """bf <prog> -- Executes <prog> as Brainfuck code.
     :type text: str
diff --git a/modules/cake.py b/modules/cake.py
index 109da3f..c6f81c9 100644
--- a/modules/cake.py
+++ b/modules/cake.py
@@ -7,7 +7,7 @@ from util import hook
 cakes = ['Chocolate', 'Ice Cream', 'Angel', 'Boston Cream', 'Birthday', 'Bundt', 'Carrot', 'Coffee', 'Devils', 'Fruit', 'Gingerbread', 'Pound', 'Red Velvet', 'Stack', 'Welsh', 'Yokan']
 
 
-@hook.command
+@hook.command(threaded=False)
 def cake(inp, action=None):
     """cake <user> - Gives <user> an awesome cake."""
     inp = inp.strip()
diff --git a/modules/choose.py b/modules/choose.py
index 0c41afa..2fba5cc 100644
--- a/modules/choose.py
+++ b/modules/choose.py
@@ -4,7 +4,7 @@ import random
 from util import hook
 
 
-@hook.command
+@hook.command(threaded=False)
 def choose(text, notice):
     """choose <choice1>, [choice2], [choice3], etc. -- Randomly picks one of the given choices.
     :type text: str
diff --git a/modules/coin.py b/modules/coin.py
index c23bc3c..a55fc2e 100644
--- a/modules/coin.py
+++ b/modules/coin.py
@@ -3,7 +3,7 @@ import random
 from util import hook
 
 
-@hook.command(autohelp=False)
+@hook.command(threaded=False, autohelp=False)
 def coin(text, notice, action):
     """coin [amount] -- Flips [amount] of coins.
     :type text: str
diff --git a/modules/core_ctcp.py b/modules/core_ctcp.py
index d4a7b7c..ae922e8 100644
--- a/modules/core_ctcp.py
+++ b/modules/core_ctcp.py
@@ -4,16 +4,16 @@ from util import hook
 
 
 # CTCP responses
-@hook.regex(r'^\x01VERSION\x01$')
+@hook.regex(r'^\x01VERSION\x01$', threaded=False)
 def ctcp_version(notice):
     notice('\x01VERSION Eliralin #refresh - http://git.io/elirefresh')
 
 
-@hook.regex(r'^\x01PING\x01$')
+@hook.regex(r'^\x01PING\x01$', threaded=False)
 def ctcp_ping(notice):
     notice('\x01PING: PONG')
 
 
-@hook.regex(r'^\x01TIME\x01$')
+@hook.regex(r'^\x01TIME\x01$', threaded=False)
 def ctcp_time(notice):
     notice('\x01TIME: The time is: {}'.format(time.strftime("%r", time.localtime())))
diff --git a/modules/core_misc.py b/modules/core_misc.py
index a54aa0f..eb08262 100644
--- a/modules/core_misc.py
+++ b/modules/core_misc.py
@@ -7,7 +7,7 @@ socket.setdefaulttimeout(10)
 
 
 # Auto-join on Invite (Configurable, defaults to True)
-@hook.event('INVITE')
+@hook.event('INVITE', threaded=False)
 def invite(paramlist, conn):
     """
     :type paramlist: list[str]
@@ -19,7 +19,7 @@ def invite(paramlist, conn):
 
 
 # Identify to NickServ (or other service)
-@hook.event('004')
+@hook.event('004', threaded=False)
 def onjoin(conn, bot):
     """
     :type conn: core.irc.BotConnection
@@ -58,7 +58,7 @@ def onjoin(conn, bot):
     bot.logger.info("ONJOIN hook completed. Bot ready.")
 
 
-@hook.event('004', singlethread=True)
+@hook.event('004', threaded=True, singlethread=True)
 def keep_alive(conn):
     """
     :type conn: core.irc.BotConnection
diff --git a/modules/core_tracker.py b/modules/core_tracker.py
index f5dd008..ddd6f4d 100644
--- a/modules/core_tracker.py
+++ b/modules/core_tracker.py
@@ -7,7 +7,7 @@ from util import hook
 nick_re = re.compile(":(.+?)!")
 
 
-@hook.event("KICK")
+@hook.event("KICK", threaded=False)
 def on_kick(paramlist, conn, chan):
     """
     :type paramlist: list[str]
@@ -22,7 +22,7 @@ def on_kick(paramlist, conn, chan):
             conn.join(paramlist[0])
 
 
-@hook.event("NICK")
+@hook.event("NICK", threaded=False)
 def on_nick(paramlist, bot, conn, raw):
     """
     :type paramlist: list[str]
diff --git a/modules/correction.py b/modules/correction.py
index 6ce1377..c5c574c 100644
--- a/modules/correction.py
+++ b/modules/correction.py
@@ -5,7 +5,7 @@ from util import hook
 correction_re = re.compile(r"^[sS]/([^/]*)/([^/]*)(/.*)?\s*$")
 
 
-@hook.regex(correction_re)
+@hook.regex(correction_re, threaded=False)
 def correction(match, conn, chan, message):
     """
     :type match: re.__Match
diff --git a/modules/cryptocoins.py b/modules/cryptocoins.py
index a83a510..6a449a6 100644
--- a/modules/cryptocoins.py
+++ b/modules/cryptocoins.py
@@ -29,7 +29,7 @@ exchanges = {
 
 ## HOOK FUNCTIONS
 
-@hook.command(["btc", "bitcoin"], autohelp=False)
+@hook.command(["btc", "bitcoin"], threaded=True, autohelp=False)
 def bitcoin(text, notice):
     """bitcoin <exchange> -- Gets current exchange rate for bitcoins from several exchanges, default is Blockchain.
     Supports MtGox, Bitpay, Coinbase and BitStamp.
@@ -53,7 +53,7 @@ def bitcoin(text, notice):
     return func(data)
 
 
-@hook.command(["ltc", "litecoin"], autohelp=False)
+@hook.command(["ltc", "litecoin"], threaded=True, autohelp=False)
 def litecoin(message):
     """litecoin -- gets current exchange rate for litecoins from BTC-E"""
     data = http.get_json("https://btc-e.com/api/2/ltc_usd/ticker")
diff --git a/modules/cypher.py b/modules/cypher.py
index 618442b..e2fcc7e 100644
--- a/modules/cypher.py
+++ b/modules/cypher.py
@@ -35,7 +35,7 @@ def decode(password, encoded, notice):
     return "".join(dec)
 
 
-@hook.command
+@hook.command(threaded=False)
 def cypher(text, notice):
     """cypher <pass> <string> -- Cyphers <string> with <password>.
     :type text: str
@@ -49,7 +49,7 @@ def cypher(text, notice):
     return encode(password, plaintext)
 
 
-@hook.command
+@hook.command(threaded=False)
 def decypher(text, notice):
     """decypher <pass> <string> -- Decyphers <string> with <password>.
     :type text: str
diff --git a/modules/dbtest.py b/modules/dbtest.py
index f104395..1fe7a98 100644
--- a/modules/dbtest.py
+++ b/modules/dbtest.py
@@ -9,7 +9,7 @@ users = Table(
 )
 
 
-@hook.command
+@hook.command(threaded=True)
 def dbadduser(text, db):
     """
     :type text: str
@@ -29,7 +29,7 @@ def dbadduser(text, db):
     db.commit()
 
 
-@hook.command(autohelp=False)
+@hook.command(threaded=True, autohelp=False)
 def select(db, message):
     results = db.execute(users.select())
     for row in results:
diff --git a/modules/dice.py b/modules/dice.py
index 241fbd9..bafb513 100644
--- a/modules/dice.py
+++ b/modules/dice.py
@@ -34,7 +34,7 @@ def n_rolls(count, n):
 
 
 #@hook.regex(valid_diceroll, re.I)
-@hook.command(["roll", "dice"])
+@hook.command(["roll", "dice"], threaded=False)
 def dice(text, notice):
     """dice <dice roll> -- Simulates dice rolls. Example: 'dice 2d20-d5+4 roll 2': D20s, subtract 1D5, add 4
     :type text: str
diff --git a/modules/dictionary.py b/modules/dictionary.py
index 06964dc..10a4fee 100644
--- a/modules/dictionary.py
+++ b/modules/dictionary.py
@@ -43,7 +43,7 @@ def format_output(h, definition, show_examples):
     return result
 
 
-@hook.command(["dictionary", "define"])
+@hook.command(["dictionary", "define"], threaded=True)
 def define(text):
     """define <word> -- Fetches definition of <word>.
     :type text: str
@@ -71,7 +71,7 @@ def define(text):
     return result
 
 
-@hook.command(["e", "etymology"])
+@hook.command(["e", "etymology"], threaded=True)
 def etymology(text):
     """etymology <word> -- Retrieves the etymology of <word>.
     :type text: str
diff --git a/modules/domainr.py b/modules/domainr.py
index 58202fd..4707dc9 100644
--- a/modules/domainr.py
+++ b/modules/domainr.py
@@ -18,7 +18,7 @@ def format_domain(domain):
     return domainformat.format(**domain)
 
 
-@hook.command(["domain", "domainr"])
+@hook.command(["domain", "domainr"], threaded=True)
 def domainr(text):
     """domainr <domain> - Use domain.nr's API to search for a domain, and similar domains.
     :type text: str
diff --git a/modules/drama.py b/modules/drama.py
index 74515ef..f41b34b 100644
--- a/modules/drama.py
+++ b/modules/drama.py
@@ -8,7 +8,7 @@ api_url = "http://encyclopediadramatica.se/api.php?action=opensearch"
 ed_url = "http://encyclopediadramatica.se/"
 
 
-@hook.command
+@hook.command(threaded=True)
 def drama(text):
     """drama <phrase> -- Gets the first paragraph of
     the Encyclopedia Dramatica article on <phrase>."""
diff --git a/modules/eightball.py b/modules/eightball.py
index 0571a87..dd3e316 100644
--- a/modules/eightball.py
+++ b/modules/eightball.py
@@ -19,7 +19,7 @@ def load_responses(bot):
                      f.readlines() if not line.startswith("//")]
 
 
-@hook.command(["8ball", "8", "eightball"])
+@hook.command(["8ball", "8", "eightball"], threaded=False)
 def eightball(action):
     """8ball <question> -- The all knowing magic eight ball, in electronic form. Ask and it shall be answered!"""
 
diff --git a/modules/encrypt.py b/modules/encrypt.py
index 3f1bfb7..f441a1b 100644
--- a/modules/encrypt.py
+++ b/modules/encrypt.py
@@ -61,7 +61,7 @@ def get_salt(bot):
     return bot.config.get("random_salt")
 
 
-@hook.command
+@hook.command(threaded=False)
 def encrypt(text, bot, db, notice):
     """encrypt <pass> <string> -- Encrypts <string> with <pass>. (<string> can only be decrypted using this bot)
     :type text: str
@@ -99,7 +99,7 @@ def encrypt(text, bot, db, notice):
     return encoded.decode()
 
 
-@hook.command
+@hook.command(threaded=False)
 def decrypt(text, bot, db, notice):
     """decrypt <pass> <string> -- Decrypts <string> with <pass>. (can only decrypt strings encrypted on this bot)
     :type bot: core.bot.CloudBot
diff --git a/modules/fact.py b/modules/fact.py
index 421a077..48501a7 100644
--- a/modules/fact.py
+++ b/modules/fact.py
@@ -1,7 +1,7 @@
 from util import hook, http, web
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=True)
 def fact():
     """fact -- Gets a random fact from OMGFACTS."""
 
diff --git a/modules/factoids.py b/modules/factoids.py
index d82b9d4..eee1d46 100644
--- a/modules/factoids.py
+++ b/modules/factoids.py
@@ -27,6 +27,7 @@ table = Table(
     Column("nick", String)
 )
 
+
 @hook.onload()
 def load_cache(db):
     """
@@ -68,7 +69,7 @@ def del_factoid(db, word):
     load_cache(db)
 
 
-@hook.command(["r", "remember"], permissions=["addfactoid"])
+@hook.command(["r", "remember"], threaded=False, permissions=["addfactoid"])
 def remember(text, nick, db, notice):
     """remember <word> [+]<data> -- Remembers <data> with <word>. Add + to <data> to append."""
 
@@ -103,7 +104,7 @@ def remember(text, nick, db, notice):
         notice('Remembering \x02{}\x02 for \x02{}\x02. Type ?{} to see it.'.format(data, word, word))
 
 
-@hook.command(["f", "forget"], permissions=["delfactoid"])
+@hook.command(["f", "forget"], threaded=True, permissions=["delfactoid"])
 def forget(text, db, notice):
     """forget <word> -- Forgets a remembered <word>."""
 
@@ -118,7 +119,7 @@ def forget(text, db, notice):
         return
 
 
-@hook.command
+@hook.command(threaded=False)
 def info(text, notice):
     """info <factoid> -- Shows the source of a factoid."""
 
@@ -130,7 +131,7 @@ def info(text, notice):
         notice("Unknown Factoid.")
 
 
-@hook.regex(r'^\^ ?(.+)')
+@hook.regex(r'^\^ ?(.+)', threaded=False)
 def factoid(inp, input, db, message, action):
     """?<word> -- Shows what data is associated with <word>."""
 
@@ -171,7 +172,7 @@ def factoid(inp, input, db, message, action):
             message(result)
 
 
-@hook.command(autohelp=False, permissions=["listfactoids"])
+@hook.command(autohelp=False, threaded=False, permissions=["listfactoids"])
 def listfactoids(reply):
     reply_text = []
     reply_text_length = 0
diff --git a/modules/fishbans.py b/modules/fishbans.py
index 8ef74ae..0b42c5e 100644
--- a/modules/fishbans.py
+++ b/modules/fishbans.py
@@ -2,11 +2,10 @@ from urllib.parse import quote_plus
 
 from util import hook, http, formatting
 
-
 api_url = "http://api.fishbans.com/stats/{}/"
 
 
-@hook.command(["bans", "fishbans"])
+@hook.command(["bans", "fishbans"], threaded=True)
 def fishbans(text):
     """fishbans <user> -- Gets information on <user>s minecraft bans from fishbans"""
     user = text.strip()
@@ -30,7 +29,7 @@ def fishbans(text):
         return "The user \x02{}\x02 has no bans - {}".format(user, user_url)
 
 
-@hook.command
+@hook.command(threaded=True)
 def bancount(text):
     """bancount <user> -- Gets a count of <user>s minecraft bans from fishbans"""
     user = text.strip()
diff --git a/modules/fmylife.py b/modules/fmylife.py
index 2f75ad1..d6628c3 100644
--- a/modules/fmylife.py
+++ b/modules/fmylife.py
@@ -12,13 +12,14 @@ def refresh_cache():
         text = ''.join(e.find('p').find_all(text=True))
         fml_cache.append((fml_id, text))
 
+
 @hook.onload()
 def initial_refresh():
     # do an initial refresh of the cache
     refresh_cache()
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=True)
 def fml(reply):
     """fml -- Gets a random quote from fmyfife.com."""
 
diff --git a/modules/fortune.py b/modules/fortune.py
index 8be9495..a181f01 100644
--- a/modules/fortune.py
+++ b/modules/fortune.py
@@ -13,7 +13,7 @@ def load_fortunes(bot):
                     if not line.startswith("//")]
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False,threaded=False)
 def fortune():
     """fortune -- Fortune cookies on demand."""
     return random.choice(fortunes)
diff --git a/modules/geoip.py b/modules/geoip.py
index 0abcd28..103d285 100644
--- a/modules/geoip.py
+++ b/modules/geoip.py
@@ -32,7 +32,7 @@ def load_regions(bot):
         geo = pygeoip.GeoIP(os.path.join(bot.data_dir, "GeoLiteCity.dat"))
 
 
-@hook.command
+@hook.command(threaded=True)
 def geoip(text):
     """geoip <host/ip> -- Gets the location of <host/ip>"""
 
diff --git a/modules/github.py b/modules/github.py
index 5639e48..d692ae0 100644
--- a/modules/github.py
+++ b/modules/github.py
@@ -59,7 +59,7 @@ def try_shorten_gitio(url, code=None):
         return url
 
 
-@hook.command
+@hook.command(threaded=True)
 def ghissues(text):
     """ghissues username/repo [number] - Get specified issue summary, or open issue count """
     args = text.split()
@@ -110,7 +110,7 @@ def ghissues(text):
         return format_without_summary.format(issue_number, state, user, title, shorturl)
 
 
-@hook.command
+@hook.command(threaded=True)
 def gitio(text):
     """gitio <url> [code] -- Shorten Github URLs with git.io. [code] is an optional custom short code."""
     split = text.split()
diff --git a/modules/google.py b/modules/google.py
index 51e28bf..9b393bf 100644
--- a/modules/google.py
+++ b/modules/google.py
@@ -10,7 +10,7 @@ def api_get(kind, query):
     return http.get_json(url % kind, q=query)
 
 
-@hook.command(["googleimage", "gis", "image"])
+@hook.command(["googleimage", "gis", "image"], threaded=True)
 def googleimage(text):
     """gis <query> -- Returns first Google Image result for <query>."""
 
@@ -22,7 +22,7 @@ def googleimage(text):
     return random.choice(parsed['responseData']['results'][:10])['unescapedUrl']
 
 
-@hook.command(["google", "g", "search"])
+@hook.command(["google", "g", "search"], threaded=True)
 def google(text):
     """google <query> -- Returns first google search result for <query>."""
 
diff --git a/modules/google_translate.py b/modules/google_translate.py
index 5430330..cb42a35 100644
--- a/modules/google_translate.py
+++ b/modules/google_translate.py
@@ -74,7 +74,7 @@ def match_language(fragment):
     return None
 
 
-@hook.command
+@hook.command(threaded=True)
 def translate(text, bot):
     """translate [source language [target language]] <sentence> -- translates
     <sentence> from source language (default autodetect) to target
diff --git a/modules/googleurlparse.py b/modules/googleurlparse.py
index a14c1a6..7f9dfb4 100644
--- a/modules/googleurlparse.py
+++ b/modules/googleurlparse.py
@@ -2,7 +2,7 @@ from util import hook
 from urllib.parse import unquote
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=True)
 def googleurl(text, db, nick):
     """googleurl [nickname] - Converts Google urls (google.com/url) to normal urls
        where possible, in the specified nickname's last message. If nickname isn't provided,
diff --git a/modules/help.py b/modules/help.py
index 606b499..b87fb0b 100644
--- a/modules/help.py
+++ b/modules/help.py
@@ -4,7 +4,7 @@ import re
 from util import hook
 
 
-@hook.command("help", autohelp=False)
+@hook.command("help", autohelp=False, threaded=False)
 def help_command(text, conn, bot, notice, has_permission):
     """help  -- Gives a list of commands/help for a command.
     :type text: str
diff --git a/modules/history.py b/modules/history.py
index db85841..81ca449 100644
--- a/modules/history.py
+++ b/modules/history.py
@@ -43,14 +43,14 @@ def track_history(input, message_time, conn):
     history.append(data)
 
 
-@hook.event('PRIVMSG', ignorebots=False, singlethread=True)
+@hook.event('PRIVMSG', threaded=True, singlethread=True)
 def chat_tracker(input, db, conn):
     message_time = time.time()
     track_seen(input, message_time, db, conn)
     track_history(input, message_time, conn)
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=False)
 def resethistory(input, conn):
     """resethistory - Resets chat history for the current channel"""
     try:
@@ -61,7 +61,7 @@ def resethistory(input, conn):
         return "There is no history for this channel."
 
 
-@hook.command
+@hook.command(threaded=True)
 def seen(text, nick, chan, db, input, conn):
     """seen <nick> <channel> -- Tell when a nickname was last in active in one of this bot's channels."""
 
diff --git a/modules/horoscope.py b/modules/horoscope.py
index 8be9eb8..6eebd19 100644
--- a/modules/horoscope.py
+++ b/modules/horoscope.py
@@ -3,13 +3,13 @@
 from util import hook, http, formatting
 
 
-@hook.onload
+@hook.onload()
 def init(db):
     db.execute("create table if not exists horoscope(nick primary key, sign)")
     db.commit()
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=True)
 def horoscope(text, db, notice, nick):
     """horoscope <sign> -- Get your horoscope."""
 
diff --git a/modules/hulu.py b/modules/hulu.py
index 68ee279..ee7197d 100644
--- a/modules/hulu.py
+++ b/modules/hulu.py
@@ -7,7 +7,7 @@ from util import hook, http, timeformat
 hulu_re = (r'(.*://)(www.hulu.com|hulu.com)(.*)', re.I)
 
 
-@hook.regex(*hulu_re)
+@hook.regex(*hulu_re, threaded=True)
 def hulu_url(match):
     data = http.get_json("http://www.hulu.com/api/oembed.json?url=http://www.hulu.com" + match.group(3))
     showname = data['title'].split("(")[-1].split(")")[0]
@@ -15,7 +15,7 @@ def hulu_url(match):
     return "{}: {} - {}".format(showname, title, timeformat.format_time(int(data['duration'])))
 
 
-@hook.command('hulu')
+@hook.command('hulu', threaded=True)
 def hulu_search(text):
     """hulu <search> - Search Hulu"""
     result = http.get_soup(
diff --git a/modules/ignore.py b/modules/ignore.py
index eaf901c..ded2bf5 100644
--- a/modules/ignore.py
+++ b/modules/ignore.py
@@ -29,7 +29,7 @@ def ignore_sieve(bot, input, plugin):
     return input
 
 
-@hook.command(autohelp=False)
+@hook.command(threaded=False, autohelp=False)
 def ignored(notice, bot):
     """ignored -- Lists ignored channels/users."""
     ignorelist = bot.config["modules"]["ignore"]["ignored"]
@@ -40,7 +40,7 @@ def ignored(notice, bot):
     return
 
 
-@hook.command(permissions=["ignore"])
+@hook.command(threaded=True, permissions=["ignore"])
 def ignore(text, notice, bot):
     """ignore <channel|nick|host> -- Makes the bot ignore <channel|user>."""
     target = text.lower()
@@ -55,7 +55,7 @@ def ignore(text, notice, bot):
     return
 
 
-@hook.command(permissions=["ignore"])
+@hook.command(threaded=True, permissions=["ignore"])
 def unignore(text, notice, bot):
     """unignore <channel|user> -- Makes the bot listen to
     <channel|user>."""
diff --git a/modules/imdb.py b/modules/imdb.py
index 8cd6be3..c8810d6 100644
--- a/modules/imdb.py
+++ b/modules/imdb.py
@@ -9,7 +9,7 @@ id_re = re.compile("tt\d+")
 imdb_re = (r'(.*:)//(imdb.com|www.imdb.com)(:[0-9]+)?(.*)', re.I)
 
 
-@hook.command
+@hook.command(threaded=True)
 def imdb(text):
     """imdb <movie> -- Gets information about <movie> from IMDb."""
 
@@ -37,7 +37,7 @@ def imdb(text):
         return 'Unknown error.'
 
 
-@hook.regex(*imdb_re)
+@hook.regex(*imdb_re, threaded=True)
 def imdb_url(match):
     imdb_id = match.group(4).split('/')[-1]
     if imdb_id == "":
diff --git a/modules/imgur.py b/modules/imgur.py
index 320bc6e..7b95cfb 100644
--- a/modules/imgur.py
+++ b/modules/imgur.py
@@ -17,7 +17,7 @@ def is_valid(data):
         return False
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=True)
 def imgur(inp):
     """imgur [subreddit] -- Gets the first page of imgur images from [subreddit] and returns a link to them.
      If [subreddit] is undefined, return any imgur images"""
diff --git a/modules/kernel.py b/modules/kernel.py
index 229130d..5944372 100644
--- a/modules/kernel.py
+++ b/modules/kernel.py
@@ -3,7 +3,7 @@ import re
 from util import hook, http
 
 
-@hook.command(autohelp=False)
+@hook.command(autohelp=False, threaded=True)
 def kernel(reply):
     contents = http.get("https://www.kernel.org/finger_banner")
     contents = re.sub(r'The latest(\s*)', '', contents)
diff --git a/modules/kill.py b/modules/kill.py
index 727274c..d687436 100644
--- a/modules/kill.py
+++ b/modules/kill.py
@@ -9,7 +9,7 @@ def get_generator(_json, variables):
                                  data["parts"], variables=variables)
 
 
-@hook.command
+@hook.command(threaded=False)
 def kill(inp, action=None, nick=None, conn=None, notice=None):
     """kill <user> -- Makes the bot kill <user>."""
     target = inp.strip()
diff --git a/modules/lastfm.py b/modules/lastfm.py
index 36e2889..51d6dc2 100644
--- a/modules/lastfm.py
+++ b/modules/lastfm.py
@@ -6,11 +6,9 @@ from util import hook, http, timesince
 api_url = "http://ws.audioscrobbler.com/2.0/?format=json"
 
 
-@hook.command('l', autohelp=False)
-@hook.command(autohelp=False)
-def lastfm(inp, nick='', db=None, bot=None, notice=None):
-    """lastfm [user] [dontsave] -- Displays the now playing (or last played)
-     track of LastFM user [user]."""
+@hook.command(["lastfm", "l"], threaded=True, autohelp=False)
+def lastfm(inp, nick, db, bot, notice):
+    """lastfm [user] [dontsave] -- Displays the now playing (or last played) track of LastFM user [user]."""
     api_key = bot.config.get("api_keys", {}).get("lastfm")
     if not api_key:
         return "error: no api key set"
diff --git a/modules/lmgtfy.py b/modules/lmgtfy.py
index c8dcee3..e09358a 100644
--- a/modules/lmgtfy.py
+++ b/modules/lmgtfy.py
@@ -1,8 +1,7 @@
 from util import hook, web, http
 
 
-@hook.command('gfy')
-@hook.command
+@hook.command(["lmgtfy", "gfy"], threaded=True)
 def lmgtfy(inp):
     """lmgtfy [phrase] - Posts a google link for the specified phrase"""
 
diff --git a/modules/log.py b/modules/log.py
index e887e0a..9befe60 100644
--- a/modules/log.py
+++ b/modules/log.py
@@ -3,6 +3,7 @@ log.py: written by Scaevolus 2009
 
 edited 2014
 """
+import asyncio
 
 import os
 import codecs
@@ -98,7 +99,7 @@ def get_log_stream(data_dir, server, chan):
     return log_stream
 
 
-@hook.event("*", singlethread=True)
+@hook.event("*", threaded=True, singlethread=True)
 def log(bot, input):
     """
     :type bot: core.bot.CloudBot
diff --git a/modules/lyrics.py b/modules/lyrics.py
index eabb84a..0a1aeb5 100644
--- a/modules/lyrics.py
+++ b/modules/lyrics.py
@@ -3,7 +3,7 @@ from util import hook, http, web
 url = "http://search.azlyrics.com/search.php?q="
 
 
-@hook.command
+@hook.command(threaded=True)
 def lyrics(inp):
     """lyrics <search> - Search AZLyrics.com for song lyrics"""
     if "pastelyrics" in inp:
diff --git a/modules/metacritic.py b/modules/metacritic.py
index 773d360..261c141 100644
--- a/modules/metacritic.py
+++ b/modules/metacritic.py
@@ -6,8 +6,7 @@ from urllib.error import HTTPError
 from util import hook, http
 
 
-@hook.command('mc')
-@hook.command
+@hook.command(["metacritic", "mc"], threaded=True)
 def metacritic(inp):
     """mc [all|movie|tv|album|x360|ps3|pc|gba|ds|3ds|wii|vita|wiiu|xone|ps4] <title>
     Gets rating for <title> from metacritic on the specified medium."""
diff --git a/modules/minecraft_bukget.py b/modules/minecraft_bukget.py
index 72a2ec8..f336fb4 100644
--- a/modules/minecraft_bukget.py
+++ b/modules/minecraft_bukget.py
@@ -113,8 +113,7 @@ def format_output(data):
 
 ## HOOK FUNCTIONS
 
-@hook.command('plugin')
-@hook.command
+@hook.command(["bukget", "plugin"], threaded=True)
 def bukget(text, reply, message):
     """bukget <slug/name> - Look up a plugin on dev.bukkit.org"""
     # get the plugin slug using search
@@ -136,7 +135,7 @@ def bukget(text, reply, message):
     message(line_b)
 
 
-@hook.command(autohelp=None)
+@hook.command(threaded=True, autohelp=None)
 def randomplugin(reply, message):
     """randomplugin - Gets a random plugin from dev.bukkit.org"""
     # get a random plugin slug
diff --git a/modules/minecraft_items.py b/modules/minecraft_items.py
index 4646269..bcb596b 100644
--- a/modules/minecraft_items.py
+++ b/modules/minecraft_items.py
@@ -49,8 +49,7 @@ with open("./data/itemids.txt") as f:
         ids.append((itemid, name))
 
 
-@hook.command("mcid")
-@hook.command
+@hook.command(["mcitem", "mcid"], threaded=False)
 def mcitem(inp, reply=None):
     """mcitem <item/id> -- gets the id from an item or vice versa"""
     inp = inp.lower().strip()
@@ -80,8 +79,7 @@ def mcitem(inp, reply=None):
     return out
 
 
-@hook.command("mccraft")
-@hook.command
+@hook.command(["mcrecipe", "mccraft"], threaded=False)
 def mcrecipe(inp, reply=None):
     """mcrecipe <item> -- gets the crafting recipe for an item"""
     inp = inp.lower().strip()
diff --git a/modules/minecraft_ping.py b/modules/minecraft_ping.py
index f590f03..3c59f81 100644
--- a/modules/minecraft_ping.py
+++ b/modules/minecraft_ping.py
@@ -213,8 +213,7 @@ def format_output(data):
                " players.".format(**data).replace("\n", "\x0f - ")
 
 
-@hook.command
-@hook.command("mcp")
+@hook.command(["mcping", "mcp"], threaded=True)
 def mcping(inp):
     """mcping <server>[:port] - Ping a Minecraft server to check status."""
     try:
diff --git a/modules/minecraft_status.py b/modules/minecraft_status.py
index c26706e..cb90dbd 100644
--- a/modules/minecraft_status.py
+++ b/modules/minecraft_status.py
@@ -11,7 +11,7 @@ red_prefix = "\x02\x0f"
 red_suffix = ": \x034\x02\u2716"
 
 
-@hook.command(["mcs", "mcstatus", "mojang"], autohelp=False)
+@hook.command(["mcs", "mcstatus", "mojang"], threaded=True, autohelp=False)
 def mcstatus():
     """mcstatus -- Checks the status of various Mojang (the creators of Minecraft) servers."""
 
diff --git a/modules/minecraft_user.py b/modules/minecraft_user.py
index b442177..0c8d495 100644
--- a/modules/minecraft_user.py
+++ b/modules/minecraft_user.py
@@ -66,9 +66,7 @@ def get_profile(name):
     return profile
 
 
-@hook.command("haspaid")
-@hook.command("mcpaid")
-@hook.command
+@hook.command(["mcuser", "mcpaid", "haspaid"], threaded=True)
 def mcuser(inp):
     """mcpaid <username> -- Gets information about the Minecraft user <account>."""
     user = inp.strip()
diff --git a/modules/minecraft_wiki.py b/modules/minecraft_wiki.py
index df884bc..e5419a7 100644
--- a/modules/minecraft_wiki.py
+++ b/modules/minecraft_wiki.py
@@ -7,7 +7,7 @@ api_url = "http://minecraft.gamepedia.com/api.php?action=opensearch"
 mc_url = "http://minecraft.gamepedia.com/"
 
 
-@hook.command
+@hook.command(threaded=True)
 def mcwiki(text):
     """mcwiki <phrase> -- Gets the first paragraph of
     the Minecraft Wiki article on <phrase>."""
diff --git a/modules/mlia.py b/modules/mlia.py
index 69bf081..9f3226f 100644
--- a/modules/mlia.py
+++ b/modules/mlia.py
@@ -22,7 +22,7 @@ def refresh_cache():
 refresh_cache()
 
 
-@hook.command(autohelp=False)
+@hook.command(threaded=True, autohelp=False)
 def mlia(reply):
     """mlia -- Gets a random quote from MyLifeIsAverage.com."""
     # grab the last item in the mlia cache and remove it
diff --git a/modules/namegen.py b/modules/namegen.py
index e13ce0e..e182c7f 100644
--- a/modules/namegen.py
+++ b/modules/namegen.py
@@ -10,7 +10,7 @@ def get_generator(_json):
                                  data["parts"], default_templates=data["default_templates"])
 
 
-@hook.command(autohelp=False)
+@hook.command(threaded=True, autohelp=False)
 def namegen(input, bot):
     """namegen [generator] -- Generates some names using the chosen generator.
     :type bot: core.bot.CloudBot
diff --git a/modules/newegg.py b/modules/newegg.py
index ffc7014..33d72af 100644
--- a/modules/newegg.py
+++ b/modules/newegg.py
@@ -63,14 +63,14 @@ def format_item(item, show_url=True):
 
 ## HOOK FUNCTIONS
 
-@hook.regex(*NEWEGG_RE)
+@hook.regex(*NEWEGG_RE, threaded=True)
 def newegg_url(match):
     item_id = match.group(1)
     item = http.get_json(API_PRODUCT.format(item_id))
     return format_item(item, show_url=False)
 
 
-@hook.command
+@hook.command(threaded=True)
 def newegg(inp):
     """newegg <item name> -- Searches newegg.com for <item name>"""
 
diff --git a/modules/newgrounds.py b/modules/newgrounds.py
index c0d7b6a..e0d96c1 100644
--- a/modules/newgrounds.py
+++ b/modules/newgrounds.py
@@ -11,7 +11,7 @@ def test(s):
     return set(s) <= valid
 
 
-@hook.regex(*newgrounds_re)
+@hook.regex(*newgrounds_re, threaded=True)
 def newgrounds_url(match):
     location = match.group(4).split("/")[-1]
     if not test(location):
-- 
1.9.2

