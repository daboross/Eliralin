From af65fde0fd90dfc4f91b7d5de823a92ccab5e6dc Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Thu, 29 May 2014 23:20:24 -0700
Subject: [PATCH] Documentation updates! Tons of them!


diff --git a/plugins/admin.py b/plugins/admin.py
index f09b1c9..ca4f38a 100644
--- a/plugins/admin.py
+++ b/plugins/admin.py
@@ -5,17 +5,17 @@ from cloudbot import hook
 
 @hook.command(["groups", "listgroups", "permgroups"], threaded=False, permissions=["permissions_users"], autohelp=False)
 def get_permission_groups(conn):
-    """groups -- lists all valid groups
-    :type conn: core.irc.BotConnection
+    """- lists all valid groups
+    :type conn: cloudbot.core.connection.BotConnection
     """
     return "Valid groups: {}".format(conn.permissions.get_groups())
 
 
 @hook.command("gperms", threaded=False, permissions=["permissions_users"])
 def get_group_permissions(text, conn, notice):
-    """gperms <group> -- lists permissions of a group
+    """<group> - lists permissions given to <group>
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     """
     group = text.strip().lower()
     permission_manager = conn.permissions
@@ -31,9 +31,9 @@ def get_group_permissions(text, conn, notice):
 
 @hook.command("gusers", threaded=False, permissions=["permissions_users"])
 def get_group_users(text, conn, notice):
-    """gusers <group> -- lists users in a group
+    """<group> - lists users in <group>
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     """
     group = text.strip().lower()
     permission_manager = conn.permissions
@@ -49,9 +49,9 @@ def get_group_users(text, conn, notice):
 
 @hook.command("uperms", threaded=False, autohelp=False)
 def get_user_permissions(text, conn, mask, has_permission, notice):
-    """uperms [user] -- lists all permissions given to a user, or the current user if none is given
+    """[user] - lists all permissions given to [user], or the caller if no user is specified
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type mask: str
     """
     if text:
@@ -73,9 +73,9 @@ def get_user_permissions(text, conn, mask, has_permission, notice):
 
 @hook.command("ugroups", threaded=False, autohelp=False)
 def get_user_groups(text, conn, mask, has_permission, notice):
-    """uperms [user] -- lists all permissions given to a user, or the current user if none is given
+    """[user] - lists all permissions given to [user], or the caller if no user is specified
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type mask: str
     """
     if text:
@@ -97,10 +97,10 @@ def get_user_groups(text, conn, mask, has_permission, notice):
 
 @hook.command("deluser", threaded=False, permissions=["permissions_users"])
 def remove_permission_user(text, bot, conn, notice, reply):
-    """deluser <user> [group] -- Removes a user from a permission group, or all permission groups if none is specified
+    """<user> [group] - removes <user> from [group], or from all groups if no group is specified
     :type text: str
-    :type bot: core.bot.CloudBot
-    :type conn: core.irc.BotConnection
+    :type bot: cloudbot.core.bot.CloudBot
+    :type conn: cloudbot.core.connection.BotConnection
     """
     split = text.split()
     if len(split) > 2:
@@ -152,10 +152,10 @@ def remove_permission_user(text, bot, conn, notice, reply):
 
 @hook.command("adduser", threaded=False, permissions=["permissions_users"])
 def add_permissions_user(text, conn, bot, notice, reply):
-    """adduser <user> <group> -- Adds a user to a permission group
+    """<user> <group> - adds <user> to <group>
     :type text: str
-    :type conn: core.irc.BotConnection
-    :type bot: core.bot.CloudBot
+    :type conn: cloudbot.core.connection.BotConnection
+    :type bot: cloudbot.core.bot.CloudBot
     """
     split = text.split()
     if len(split) > 2:
@@ -193,7 +193,7 @@ def add_permissions_user(text, conn, bot, notice, reply):
 
 @hook.command(["stop", "quit"], permissions=["botcontrol"], autohelp=False)
 def stop(text, bot):
-    """stop [reason] -- Stops the bot with [reason] as its quit message.
+    """[reason] - stops me with [reason] as its quit message.
     :type text: str
     :type bot: core.bot.CloudBot
     """
@@ -205,7 +205,7 @@ def stop(text, bot):
 
 @hook.command(permissions=["botcontrol"], autohelp=False)
 def restart(text, bot):
-    """restart [reason] -- Restarts the bot with [reason] as its quit message.
+    """[reason] - restarts me with [reason] as its quit message.
     :type text: str
     :type bot: core.bot.CloudBot
     """
@@ -217,9 +217,9 @@ def restart(text, bot):
 
 @hook.command(threaded=False, permissions=["botcontrol"])
 def join(text, conn, notice):
-    """join <channel> -- Joins a given channel
+    """<channel> - joins <channel>
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     """
     for target in text.split():
         if not target.startswith("#"):
@@ -230,9 +230,9 @@ def join(text, conn, notice):
 
 @hook.command(threaded=False, permissions=["botcontrol"], autohelp=False)
 def part(text, conn, chan, notice):
-    """part [channel] -- Leaves a given channel, or the current one if no channel is specified
+    """[#channel] - parts [#channel], or the caller's channel if no channel is specified
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type chan: str
     """
     if text:
@@ -248,9 +248,9 @@ def part(text, conn, chan, notice):
 
 @hook.command(threaded=False, autohelp=False, permissions=["botcontrol"])
 def cycle(text, conn, chan, notice):
-    """cycle <channel> -- Cycles a given channel, or the current one if no channel is specified
+    """[#channel] - cycles [#channel], or the caller's channel if no channel is specified
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type chan: str
     """
     if text:
@@ -267,9 +267,9 @@ def cycle(text, conn, chan, notice):
 
 @hook.command(threaded=False, permissions=["botcontrol"])
 def nick(text, conn, notice):
-    """nick <nick> -- Changes the bot's nickname
+    """<nick> - changes my nickname to <nick>
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     """
     if not re.match("^[a-z0-9_|.-\]\[]*$", text.lower()):
         notice("Invalid username '{}'".format(text))
@@ -280,9 +280,9 @@ def nick(text, conn, notice):
 
 @hook.command(threaded=False, permissions=["botcontrol"])
 def raw(text, conn, notice):
-    """raw <command> -- Sends a irc_raw IRC command
+    """<command> - sends <command> as a raw IRC command
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     """
     notice("Raw command sent.")
     conn.send(text)
@@ -290,9 +290,9 @@ def raw(text, conn, notice):
 
 @hook.command(threaded=False, permissions=["botcontrol"])
 def say(text, conn, chan):
-    """say [channel] <message> -- Makes the bot say <message> in [channel], or the current channel if none is specified
+    """[#channel] <message> - says <message> to [#channel], or to the caller's channel if no channel is specified
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type chan: str
     """
     text = text.strip()
@@ -306,11 +306,11 @@ def say(text, conn, chan):
     conn.msg(channel, text)
 
 
-@hook.command(threaded=False, permissions=["botcontrol"])
+@hook.command(["message", "sayto"], threaded=False, permissions=["botcontrol"])
 def message(text, conn):
-    """message <name> <message> -- Makes the bot say <message> to <name>, <name> may be a #channel or a nickname
+    """<name> <message> - says <message> to <name>
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     """
     split = text.split(None, 1)
     channel = split[0]
@@ -320,9 +320,9 @@ def message(text, conn):
 
 @hook.command(["me", "act"], threaded=False, permissions=["botcontrol"])
 def me(text, conn, chan):
-    """me [channel] <action> -- Makes the bot act out <action> in a [channel], or the current channel if none is given
+    """[#channel] <action> - acts out <action> in a [#channel], or in the current channel of none is specified
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type chan: str
     """
     text = text.strip()
diff --git a/plugins/attacks.py b/plugins/attacks.py
index 6473693..18a51fa 100644
--- a/plugins/attacks.py
+++ b/plugins/attacks.py
@@ -1,24 +1,36 @@
+import codecs
+import json
+import os
 import random
 import re
 
 from cloudbot import hook
+from cloudbot.util import textgen
 
-with open("data/larts.txt") as f:
-    larts = [line.strip() for line in f.readlines()
-             if not line.startswith("//")]
 
-with open("data/insults.txt") as f:
-    insults = [line.strip() for line in f.readlines()
-               if not line.startswith("//")]
+@hook.onload()
+def load_attacks(bot):
+    """
+    :type bot: cloudbot.core.bot.CloudBot
+    """
+    global larts, insults, flirts, kills
+
+    with codecs.open(os.path.join(bot.data_dir, "larts.txt"), encoding="utf-8") as f:
+        larts = [line.strip() for line in f.readlines() if not line.startswith("//")]
+
+    with codecs.open(os.path.join(bot.data_dir, "insults.txt"), encoding="utf-8") as f:
+        insults = [line.strip() for line in f.readlines() if not line.startswith("//")]
 
-with open("data/flirts.txt") as f:
-    flirts = [line.strip() for line in f.readlines()
-              if not line.startswith("//")]
+    with codecs.open(os.path.join(bot.data_dir, "flirts.txt"), encoding="utf-8") as f:
+        flirts = [line.strip() for line in f.readlines() if not line.startswith("//")]
+
+    with codecs.open(os.path.join(bot.data_dir, "kills.json"), encoding="utf-8") as f:
+        kills = json.load(f)
 
 
 def is_self(conn, target):
     """
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.connection.BotConnection
     :type target: str
     """
     if re.search("(^..?.?.?self|{})".format(re.escape(conn.nick.lower())), target.lower()):
@@ -29,9 +41,9 @@ def is_self(conn, target):
 
 @hook.command(threaded=False)
 def lart(text, conn, nick, notice, action):
-    """lart <user> -- LARTs <user>.
+    """<user> - LARTs <user>
     :type text: str
-    :type conn: core.irc.BotConnection
+    :type conn: cloudbot.core.irc.BotConnection
     :type nick: str
     """
     target = text.strip()
@@ -52,7 +64,7 @@ def lart(text, conn, nick, notice, action):
 
 @hook.command(threaded=False)
 def insult(text, conn, nick, notice, message):
-    """insult <user> -- Makes the bot insult <user>.
+    """<user> - insults <user>
     :type text: str
     :type conn: core.irc.BotConnection
     :type nick: str
@@ -72,7 +84,7 @@ def insult(text, conn, nick, notice, message):
 
 @hook.command(threaded=False)
 def flirt(text, conn, nick, notice, message):
-    """flirt <user> -- Makes the bot flirt with <user>.
+    """<user> - flirts with <user>
     :type text: str
     :type conn: core.irc.BotConnection
     :type nick: str
@@ -88,3 +100,26 @@ def flirt(text, conn, nick, notice, message):
         target = nick
 
     message('{}, {}'.format(target, random.choice(flirts)))
+
+
+@hook.command(threaded=False)
+def kill(text, conn, nick, notice, action):
+    """<user> - kills <user>
+    :type text: str
+    :type conn: core.irc.BotConnection
+    :type nick: str
+    """
+    target = text.strip()
+
+    if " " in target:
+        notice("Invalid username!")
+        return
+
+    # if the user is trying to make the bot kill itself, kill them
+    if is_self(conn, target):
+        target = nick
+
+    generator = textgen.TextGenerator(kills["templates"], kills["parts"], variables={"user": target})
+
+    # act out the message
+    action(generator.generate_string())
diff --git a/plugins/brainfuck.py b/plugins/brainfuck.py
index 4d2750f..7d5fdbf 100644
--- a/plugins/brainfuck.py
+++ b/plugins/brainfuck.py
@@ -12,7 +12,7 @@ MAX_STEPS = 1000000
 
 @hook.command(["brainfuck", "bf"], threaded=False)
 def bf(text):
-    """bf <prog> -- Executes <prog> as Brainfuck code.
+    """<prog> - executes <prog> as Brainfuck code
     :type text: str
     """
 
diff --git a/plugins/choose.py b/plugins/choose.py
index b5e504a..1faf2e5 100644
--- a/plugins/choose.py
+++ b/plugins/choose.py
@@ -6,7 +6,7 @@ from cloudbot import hook
 
 @hook.command(threaded=False)
 def choose(text, notice):
-    """choose <choice1>, [choice2], [choice3], etc. -- Randomly picks one of the given choices.
+    """<choice1>, [choice2], [choice3], etc. - randomly picks one of the given choices
     :type text: str
     """
     choices = re.findall(r'([^,\s]+)', text)
diff --git a/plugins/coin.py b/plugins/coin.py
index 7f032ba..86bf87c 100644
--- a/plugins/coin.py
+++ b/plugins/coin.py
@@ -5,7 +5,7 @@ from cloudbot import hook
 
 @hook.command(threaded=False, autohelp=False)
 def coin(text, notice, action):
-    """coin [amount] -- Flips [amount] of coins.
+    """[amount] - flips [amount] coins
     :type text: str
     """
 
diff --git a/plugins/core_sieve.py b/plugins/core_sieve.py
index a5f1881..760485d 100644
--- a/plugins/core_sieve.py
+++ b/plugins/core_sieve.py
@@ -8,18 +8,19 @@ buckets = {}
 
 
 @hook.sieve
-def sieve_suite(bot, event, hook):
+def sieve_suite(bot, event, _hook):
     """
     :type bot: cloudbot.core.bot.CloudBot
     :type event: cloudbot.core.events.BaseEvent
+    :type _hook: cloudbot.core.pluginmanager.Hook
     """
     conn = event.conn
     # check ignore bots
-    if event.irc_command == 'PRIVMSG' and event.nick.endswith('bot') and hook.ignore_bots:
+    if event.irc_command == 'PRIVMSG' and event.nick.endswith('bot') and _hook.ignore_bots:
         return None
 
     # check acls
-    acl = conn.config.get('acls', {}).get(hook.function_name)
+    acl = conn.config.get('acls', {}).get(_hook.function_name)
     if acl:
         if 'deny-except' in acl:
             allowed_channels = list(map(str.lower, acl['deny-except']))
@@ -31,13 +32,13 @@ def sieve_suite(bot, event, hook):
                 return None
 
     # check disabled_commands
-    if hook.type == "command":
+    if _hook.type == "command":
         disabled_commands = conn.config.get('disabled_commands', [])
         if event.triggered_command in disabled_commands:
             return None
 
     # check permissions
-    allowed_permissions = hook.permissions
+    allowed_permissions = _hook.permissions
     if allowed_permissions:
         allowed = False
         for perm in allowed_permissions:
@@ -50,7 +51,7 @@ def sieve_suite(bot, event, hook):
             return None
 
     # check command spam tokens
-    if hook.type == "command":
+    if _hook.type == "command":
         if qpt.is_enabled():
             return event  # Don't run tokens when testing plugins - need to do it quickly
         uid = event.chan
diff --git a/plugins/cryptocoins.py b/plugins/cryptocoins.py
index c087ebc..4f9b4c6 100644
--- a/plugins/cryptocoins.py
+++ b/plugins/cryptocoins.py
@@ -31,8 +31,7 @@ exchanges = {
 
 @hook.command(["btc", "bitcoin"], autohelp=False)
 def bitcoin(text, notice):
-    """bitcoin <exchange> -- Gets current exchange rate for bitcoins from several exchanges, default is Blockchain.
-    Supports MtGox, Bitpay, Coinbase and BitStamp.
+    """[mtgox|bitpay|coinbase|bitstamp] - gets bitcoin exchange rate using <exchange>, defaulting to blockchain
     :type text: str
     """
     text = text.lower()
@@ -55,7 +54,7 @@ def bitcoin(text, notice):
 
 @hook.command(["ltc", "litecoin"], autohelp=False)
 def litecoin(message):
-    """litecoin -- gets current exchange rate for litecoins from BTC-E"""
+    """- gets litecoin exchange rate from BTC-E"""
     data = http.get_json("https://btc-e.com/api/2/ltc_usd/ticker")
     ticker = data['ticker']
     message("Current: \x0307${:,.2f}\x0f - High: \x0307${:,.2f}\x0f"
diff --git a/plugins/cypher.py b/plugins/cypher.py
index e625436..6adc7d8 100644
--- a/plugins/cypher.py
+++ b/plugins/cypher.py
@@ -37,7 +37,7 @@ def decode(password, encoded, notice):
 
 @hook.command(threaded=False)
 def cypher(text, notice):
-    """cypher <pass> <string> -- Cyphers <string> with <password>.
+    """<pass> <string> - cyphers <string> with <password>
     :type text: str
     """
     split = text.split(None, 1)
@@ -51,7 +51,7 @@ def cypher(text, notice):
 
 @hook.command(threaded=False)
 def decypher(text, notice):
-    """decypher <pass> <string> -- Decyphers <string> with <password>.
+    """<pass> <string> - decyphers <string> with <password>
     :type text: str
     """
     split = text.split(None, 1)
diff --git a/plugins/debug.py b/plugins/debug.py
index 9896f08..782079a 100644
--- a/plugins/debug.py
+++ b/plugins/debug.py
@@ -3,7 +3,7 @@ import psutil
 
 from cloudbot import hook
 
-@hook.command
+@hook.command(autohelp=False)
 def debug():
     # get a Process object for the bot using psutil
     process = psutil.Process(os.getpid())
diff --git a/plugins/dice.py b/plugins/dice.py
index 7f2698f..f48a53e 100644
--- a/plugins/dice.py
+++ b/plugins/dice.py
@@ -36,7 +36,7 @@ def n_rolls(count, n):
 #@hook.regex(valid_diceroll, re.I)
 @hook.command(["roll", "dice"], threaded=False)
 def dice(text, notice):
-    """dice <dice roll> -- Simulates dice rolls. Example: 'dice 2d20-d5+4 roll 2': D20s, subtract 1D5, add 4
+    """<dice roll> - simulates dice rolls. Example: 'dice 2d20-d5+4 roll 2': D20s, subtract 1D5, add 4
     :type text: str
     """
 
diff --git a/plugins/dictionary.py b/plugins/dictionary.py
index 23691d2..fa1f9e1 100644
--- a/plugins/dictionary.py
+++ b/plugins/dictionary.py
@@ -44,7 +44,7 @@ def format_output(h, definition, show_examples):
 
 @hook.command(["dictionary", "define"])
 def define(text):
-    """define <word> -- Fetches definition of <word>.
+    """<word> - fetches definition of <word>
     :type text: str
     """
 
@@ -72,7 +72,7 @@ def define(text):
 
 @hook.command(["e", "etymology"])
 def etymology(text):
-    """etymology <word> -- Retrieves the etymology of <word>.
+    """<word> - retrieves the etymology of <word>
     :type text: str
     """
 
diff --git a/plugins/domainr.py b/plugins/domainr.py
index f24109e..37b62ee 100644
--- a/plugins/domainr.py
+++ b/plugins/domainr.py
@@ -20,7 +20,7 @@ def format_domain(domain):
 
 @hook.command(["domain", "domainr"])
 def domainr(text):
-    """domainr <domain> - Use domain.nr's API to search for a domain, and similar domains.
+    """<domain> - uses domain.nr's API to search for a domain, and similar domains
     :type text: str
     """
     try:
diff --git a/plugins/drama.py b/plugins/drama.py
index ac7940e..35a80d4 100644
--- a/plugins/drama.py
+++ b/plugins/drama.py
@@ -9,8 +9,7 @@ ed_url = "http://encyclopediadramatica.se/"
 
 @hook.command()
 def drama(text):
-    """drama <phrase> -- Gets the first paragraph of
-    the Encyclopedia Dramatica article on <phrase>."""
+    """<phrase> - gets the first paragraph of the Encyclopedia Dramatica article on <phrase>"""
 
     data = http.get_json(api_url, search=text)
 
diff --git a/plugins/eightball.py b/plugins/eightball.py
index bcb52e4..080b4a0 100644
--- a/plugins/eightball.py
+++ b/plugins/eightball.py
@@ -21,7 +21,7 @@ def load_responses(bot):
 
 @hook.command(["8ball", "8", "eightball"], threaded=False)
 def eightball(action):
-    """8ball <question> -- The all knowing magic eight ball, in electronic form. Ask and it shall be answered!"""
+    """<question> - asks the all knowing magic electronic eight ball <question>"""
 
     magic = formatting.multiword_replace(random.choice(responses), color_codes)
     action("shakes the magic 8 ball... {}".format(magic))
diff --git a/plugins/eliralin_teamcity.py b/plugins/eliralin_teamcity.py
index c206042..0a52aa3 100644
--- a/plugins/eliralin_teamcity.py
+++ b/plugins/eliralin_teamcity.py
@@ -113,7 +113,7 @@ database = ProjectDatabase()
 
 @hook.command(["teamcity", "ci"])
 def teamcity(text, bot, reply, message):
-    """teamcity [project] - Searches for project on teamcity, and displays project URL and download"""
+    """[project] - searches for project on teamcity, and displays project URL and download"""
     database.ensure_loaded(bot=bot)
     search = text.lower()
     level_found = 0
@@ -143,7 +143,7 @@ def teamcity(text, bot, reply, message):
 
 @hook.command(["reloadci", "reload_teamcity"], permissions=["botcontrol"], autohelp=False)
 def reload_teamcity(bot, reply):
-    """reloadci - Reloads teamcity database manually"""
+    """- Reloads teamcity database manually"""
     database.load_key(bot)
     database.reload_database()
     reply("Reloaded teamcity, found {} projects.".format(len(database.projects)))
@@ -152,7 +152,7 @@ def reload_teamcity(bot, reply):
 
 @hook.command(["listci", "list_teamcity"], permissions=["botcontrol"], autohelp=False)
 def list_teamcity(bot, reply):
-    """listci - Lists all projects loaded into database from teamcity"""
+    """- lists all projects loaded into database from teamcity"""
     database.ensure_loaded(bot=bot)
     reply("Projects: {}".format(", ".join([project.name for project in database.projects])))
     database.after_check()
diff --git a/plugins/eliralin_utility.py b/plugins/eliralin_utility.py
index 4eba97f..bb3e2e9 100644
--- a/plugins/eliralin_utility.py
+++ b/plugins/eliralin_utility.py
@@ -6,7 +6,7 @@ from cloudbot import hook
 
 @hook.command(["josephus", "jose"])
 def josephus(text):
-    """jose [size] [every x] [starting person] - Calculates who dies last """
+    """[size] [every x] [starting person] - calculates who dies last"""
     split = text.split()
     if len(split) != 3:
         return "Not enough / too many arguments. {}".format(len(split))
@@ -34,6 +34,7 @@ def pet(action, nick):
 
 @hook.command(["hug", "huggle"])
 def huggle(text, action, nick):
+    """<user> - huggles <user>"""
     if text:
         action("huggles {}".format(text))
     else:
@@ -42,6 +43,7 @@ def huggle(text, action, nick):
 
 @hook.command()
 def colors(text):
+    """[number] - shows all mIRC colors up to [number], defaulting to 30"""
     if text:
         intinp = int(text)
         if intinp > 70:
@@ -57,7 +59,7 @@ def colors(text):
 
 @hook.command(permissions=["adminonly"])
 def tree(text, message, notice):
-    """tree [type] [text] - Tree text"""
+    """<type> <text> - tree!"""
     type_input = text.split(None, 1)
     if len(type_input) < 2:
         notice("tree [type] [text] - Tree text")
@@ -83,7 +85,7 @@ def tree(text, message, notice):
 
 @hook.command
 def dns(text):
-    """dns [domain] - Resolves the IP of a domain"""
+    """<domain> - resolves the IP of <domain>"""
     try:
         socket.setdefaulttimeout(5)
         ip = None
@@ -100,7 +102,7 @@ def dns(text):
 
 @hook.command
 def rdns(text):
-    """rdns [ip] - Resolves the hostname of an IP"""
+    """<ip> - resolves the rdns hostname of <ip>"""
     try:
         socket.setdefaulttimeout(5)
         domain = socket.gethostbyaddr(text)[0]
diff --git a/plugins/encrypt.py b/plugins/encrypt.py
index 38ec426..6ee7e90 100644
--- a/plugins/encrypt.py
+++ b/plugins/encrypt.py
@@ -62,7 +62,7 @@ def get_salt(bot):
 
 @hook.command(threaded=False)
 def encrypt(text, bot, db, notice):
-    """encrypt <pass> <string> -- Encrypts <string> with <pass>. (<string> can only be decrypted using this bot)
+    """<pass> <string> - encrypts <string> with <pass>. (<string> can only be decrypted using this bot)
     :type text: str
     :type bot: core.bot.CloudBot
     :type db: sqlalchemy.orm.session.Session
@@ -100,8 +100,8 @@ def encrypt(text, bot, db, notice):
 
 @hook.command(threaded=False)
 def decrypt(text, bot, db, notice):
-    """decrypt <pass> <string> -- Decrypts <string> with <pass>. (can only decrypt strings encrypted on this bot)
-    :type bot: core.bot.CloudBot
+    """<pass> <string> - decrypts <string> with <pass>. (can only decrypt strings encrypted on this bot)
+    :type bot: cloudbot.core.bot.CloudBot
     :type db: sqlalchemy.orm.session.Session
     """
 
diff --git a/plugins/fact.py b/plugins/fact.py
index 9594c10..fe7364a 100644
--- a/plugins/fact.py
+++ b/plugins/fact.py
@@ -3,7 +3,7 @@ from cloudbot import hook, http, web
 
 @hook.command(autohelp=False)
 def fact():
-    """fact -- Gets a random fact from OMGFACTS."""
+    """- gets a random fact from OMGFACTS"""
 
     attempts = 0
 
diff --git a/plugins/factoids.py b/plugins/factoids.py
index 8a6657a..fd9c0b4 100644
--- a/plugins/factoids.py
+++ b/plugins/factoids.py
@@ -71,7 +71,7 @@ def del_factoid(db, word):
 
 @hook.command(["r", "remember"], threaded=False, permissions=["addfactoid"])
 def remember(text, nick, db, notice):
-    """remember <word> [+]<data> -- Remembers <data> with <word>. Add + to <data> to append."""
+    """<word> [+]<data> - remembers <data> with <word> - add + to <data> to append"""
 
     append = False
 
@@ -106,7 +106,7 @@ def remember(text, nick, db, notice):
 
 @hook.command(["f", "forget"], permissions=["delfactoid"])
 def forget(text, db, notice):
-    """forget <word> -- Forgets a remembered <word>."""
+    """<word> - forgets previously remembered <word>"""
 
     data = factoid_cache.get(text)
 
@@ -121,7 +121,7 @@ def forget(text, db, notice):
 
 @hook.command(threaded=False)
 def info(text, notice):
-    """info <factoid> -- Shows the source of a factoid."""
+    """<factoid> - shows the source of a factoid"""
 
     text = text.strip()
 
@@ -133,7 +133,7 @@ def info(text, notice):
 
 @hook.regex(r'^\^ ?(.+)', threaded=False)
 def factoid(inp, input, db, message, action):
-    """?<word> -- Shows what data is associated with <word>."""
+    """<word> - shows what data is associated with <word>"""
 
     # split up the input
     split = inp.group(1).strip().split(" ")
@@ -150,8 +150,8 @@ def factoid(inp, input, db, message, action):
         if data.startswith("<py>"):
             code = data[4:].strip()
             variables = 'input="""{}"""; nick="{}"; chan="{}"; bot_nick="{}";'.format(arguments.replace('"', '\\"'),
-                                                                                      input.nick, input.chan,
-                                                                                      input.conn.nick)
+                                                                                      event.nick, event.chan,
+                                                                                      event.conn.nick)
             result = pyexec.eval_py(variables + code)
         else:
             result = data
@@ -173,16 +173,17 @@ def factoid(inp, input, db, message, action):
 
 
 @hook.command(autohelp=False, threaded=False, permissions=["listfactoids"])
-def listfactoids(reply):
+def listfactoids(notice):
+    """- lists all available factoids"""
     reply_text = []
     reply_text_length = 0
     for word in factoid_cache.keys():
         added_length = len(word) + 2
         if reply_text_length + added_length > 400:
-            reply(", ".join(reply_text))
+            notice(", ".join(reply_text))
             reply_text = []
             reply_text_length = 0
         else:
             reply_text.append(word)
             reply_text_length += added_length
-    return ", ".join(reply_text)
+    notice(", ".join(reply_text))
diff --git a/plugins/fishbans.py b/plugins/fishbans.py
index 24d626c..6c189e2 100644
--- a/plugins/fishbans.py
+++ b/plugins/fishbans.py
@@ -12,7 +12,7 @@ api_url = "http://api.fishbans.com/stats/{}/"
 @hook.command(["bans", "fishbans"], async=True)
 @asyncio.coroutine
 def fishbans(text, loop):
-    """fishbans <user> -- Gets information on <user>s minecraft bans from fishbans"""
+    """<user> - gets information on <user>'s minecraft bans from fishbans"""
     user = text.strip()
 
     try:
@@ -43,7 +43,7 @@ def fishbans(text, loop):
 @hook.command(async=True)
 @asyncio.coroutine
 def bancount(text, loop):
-    """bancount <user> -- Gets a count of <user>s minecraft bans from fishbans"""
+    """<user> - gets a count of <user>'s minecraft bans from fishbans"""
     user = text.strip()
 
     try:
diff --git a/plugins/fmylife.py b/plugins/fmylife.py
index 34e4e86..c572227 100644
--- a/plugins/fmylife.py
+++ b/plugins/fmylife.py
@@ -1,3 +1,4 @@
+import asyncio
 from bs4 import BeautifulSoup
 import requests
 
@@ -6,10 +7,10 @@ from cloudbot import hook
 
 fml_cache = []
 
-
-def refresh_cache():
+@asyncio.coroutine
+def refresh_cache(loop):
     """ gets a page of random FMLs and puts them into a dictionary """
-    response = requests.get('http://www.fmylife.com/random/')
+    response = yield from loop.run_in_executor(None, requests.get, 'http://www.fmylife.com/random/')
     soup = BeautifulSoup(response.text)
 
     for e in soup.find_all('div', {'class': 'post article'}):
@@ -18,16 +19,15 @@ def refresh_cache():
         fml_cache.append((fml_id, text))
 
 
-@hook.onload()
-def initial_refresh():
+@hook.onload(threaded=False)
+def initial_refresh(loop):
     # do an initial refresh of the cache
-    refresh_cache()
+    yield from refresh_cache(loop)
 
 
-@hook.async
-@hook.command(autohelp=False)
+@hook.command(threaded=False, autohelp=False)
 def fml(reply, loop):
-    """fml -- Gets a random quote from fmyfife.com."""
+    """- gets a random quote from fmyfife.com"""
 
     # grab the last item in the fml cache and remove it
     fml_id, text = fml_cache.pop()
@@ -35,4 +35,4 @@ def fml(reply, loop):
     reply('(#{}) {}'.format(fml_id, text))
     # refresh fml cache if its getting empty
     if len(fml_cache) < 3:
-        yield from loop.run_in_executor(None, refresh_cache)
+        yield from refresh_cache(loop)
diff --git a/plugins/foods.py b/plugins/foods.py
index 73a8035..c3ebfd3 100644
--- a/plugins/foods.py
+++ b/plugins/foods.py
@@ -46,9 +46,9 @@ potatoes = ['AC Belmont', 'AC Blue Pride', 'AC Brador', 'AC Chaleur', 'AC Domino
             'Yukon Gold']
 
 
-@hook.command
-def potato(text, action=None):
-    """potato <user> - Makes <user> a tasty little potato."""
+@hook.command(threaded=False)
+def potato(text, action):
+    """<user> - makes <user> a tasty little potato"""
     text = text.strip()
 
     if not re.match("^[A-Za-z0-9_|.-\]\[]*$", text.lower()):
@@ -63,9 +63,9 @@ def potato(text, action=None):
     action("{} a {} {} {} potato for {} and serves it with a small {}!".format(method, flavor, size, potato_type, text,
                                                                                side_dish))
 
-@hook.command
+@hook.command(threaded=False)
 def cake(text, action):
-    """cake <user> - Gives <user> an awesome cake."""
+    """<user> - gives <user> an awesome cake"""
     text = text.strip()
 
     if not re.match("^[A-Za-z0-9_|.-\]\[]*$", text.lower()):
@@ -82,9 +82,9 @@ def cake(text, action):
                                                                          side_dish))
 
 
-@hook.command
+@hook.command(threaded=False)
 def cookie(text, action):
-    """cookie <user> - Gives <user> a cookie"""
+    """<user> - gives <user> a cookie"""
     text = text.strip()
 
     if not re.match("^[A-Za-z0-9_|.-\]\[]*$", text.lower()):
diff --git a/plugins/fortune.py b/plugins/fortune.py
index 9c99033..4f54264 100644
--- a/plugins/fortune.py
+++ b/plugins/fortune.py
@@ -1,6 +1,5 @@
 import os
 import random
-import asyncio
 
 from cloudbot import hook
 
@@ -10,11 +9,10 @@ def load_fortunes(bot):
     path = os.path.join(bot.data_dir, "fortunes.txt")
     global fortunes
     with open(path) as f:
-        fortunes = [line.strip() for line in f.readlines()
-                    if not line.startswith("//")]
+        fortunes = [line.strip() for line in f.readlines() if not line.startswith("//")]
 
 
 @hook.command(autohelp=False, threaded=False)
 def fortune():
-    """fortune -- Fortune cookies on demand."""
+    """- hands out a fortune cookie"""
     return random.choice(fortunes)
diff --git a/plugins/geoip.py b/plugins/geoip.py
index 921397a..cb8c7da 100644
--- a/plugins/geoip.py
+++ b/plugins/geoip.py
@@ -34,7 +34,7 @@ def load_regions(bot):
 
 @hook.command()
 def geoip(text):
-    """geoip <host/ip> -- Gets the location of <host/ip>"""
+    """<host/ip> - gets the location of <host/ip>"""
 
     try:
         record = geo.record_by_name(text)
@@ -48,7 +48,7 @@ def geoip(text):
         # it's a lazy patch, but it should do the job
         try:
             data["region"] = ", " + regions[record["country_code"]][record["region_name"]]
-        except:
+        except Exception:
             data["region"] = ""
     else:
         data["region"] = ""
@@ -56,4 +56,5 @@ def geoip(text):
     data["cc"] = record["country_code"] or "N/A"
     data["country"] = record["country_name"] or "Unknown"
     data["city"] = record["city"] or "Unknown"
+
     return "\x02Country:\x02 {country} ({cc}), \x02City:\x02 {city}{region}".format(**data)
diff --git a/plugins/github.py b/plugins/github.py
index 9b77db7..29747d1 100644
--- a/plugins/github.py
+++ b/plugins/github.py
@@ -8,7 +8,7 @@ shortcuts = {
 
 @hook.command
 def issues(text):
-    """issues <repo> [issue] - Get issues for <repo>. If [issue] is specified, summarize that issue."""
+    """<username|repo> [number] - gets issue [number]'s summary, or the open issue count if no issue is specified"""
     args = text.split()
     repo = args[0] if args[0] not in shortcuts else shortcuts[args[0]]
     issue = args[1] if len(args) > 1 else None   
diff --git a/plugins/google.py b/plugins/google.py
index d7a8db3..e3f1172 100644
--- a/plugins/google.py
+++ b/plugins/google.py
@@ -12,7 +12,7 @@ def api_get(kind, query):
 
 @hook.command(["googleimage", "gis", "image"])
 def googleimage(text):
-    """gis <query> -- Returns first Google Image result for <query>."""
+    """<query> - returns the first google image result for <query>"""
 
     parsed = api_get('images', text)
     if not 200 <= parsed['responseStatus'] < 300:
@@ -24,7 +24,7 @@ def googleimage(text):
 
 @hook.command(["google", "g", "search"])
 def google(text):
-    """google <query> -- Returns first google search result for <query>."""
+    """<query> - returns the first google search result for <query>"""
 
     parsed = api_get('web', text)
     if not 200 <= parsed['responseStatus'] < 300:
diff --git a/plugins/google_translate.py b/plugins/google_translate.py
index 6c10ab2..cdd2ad2 100644
--- a/plugins/google_translate.py
+++ b/plugins/google_translate.py
@@ -75,9 +75,7 @@ def match_language(fragment):
 
 @hook.command()
 def translate(text, bot):
-    """translate [source language [target language]] <sentence> -- translates
-    <sentence> from source language (default autodetect) to target
-    language (default English) using Google Translate"""
+    """[source language [target language]] <sentence> - translates <sentence> from source language (default autodetect) to target language (default English) using Google Translate"""
 
     api_key = bot.config.get("api_keys", {}).get("googletranslate", None)
     if not api_key:
diff --git a/plugins/googleurlparse.py b/plugins/googleurlparse.py
index 7271bfe..b25694b 100644
--- a/plugins/googleurlparse.py
+++ b/plugins/googleurlparse.py
@@ -5,9 +5,7 @@ from cloudbot import hook
 
 @hook.command(autohelp=False)
 def googleurl(text, db, nick):
-    """googleurl [nickname] - Converts Google urls (google.com/url) to normal urls
-       where possible, in the specified nickname's last message. If nickname isn't provided,
-       action will be performed on user's last message"""
+    """[nickname] - converts Google urls (google.com/url) to normal urls where possible, [nickname]'s last message, defaulting to the caller's last message if no nickname is specified"""
     if not text:
         text = nick
     last_message = db.execute("select name, quote from seen_user where name"
diff --git a/plugins/help.py b/plugins/help.py
index 78a18fc..a1ec999 100644
--- a/plugins/help.py
+++ b/plugins/help.py
@@ -6,10 +6,10 @@ from cloudbot import hook
 
 @hook.command("help", autohelp=False, threaded=False)
 def help_command(text, conn, bot, notice, has_permission):
-    """help  -- Gives a list of commands/help for a command.
+    """[command] - gives help for [command], or lists all available commands if no command is specified
     :type text: str
-    :type conn: core.irc.BotConnection
-    :type bot: core.bot.CloudBot
+    :type conn: cloudbot.core.connection.BotConnection
+    :type bot: cloudbot.core.bot.CloudBot
     """
     if text:
         searching_for = text.lower().strip()
diff --git a/plugins/history.py b/plugins/history.py
index 6f437e0..5950b98 100644
--- a/plugins/history.py
+++ b/plugins/history.py
@@ -51,7 +51,7 @@ def chat_tracker(event, db, conn):
 
 @hook.command(autohelp=False, threaded=False)
 def resethistory(event, conn):
-    """resethistory - Resets chat history for the current channel"""
+    """- resets chat history for the current channel"""
     try:
         conn.history[event.chan].clear()
         return "Reset chat history for current channel."
@@ -62,7 +62,7 @@ def resethistory(event, conn):
 
 @hook.command
 def seen(text, nick, chan, db, event, conn):
-    """seen <nick> <channel> -- Tell when a nickname was last in active in one of this bot's channels."""
+    """<nick> <channel> - tells when a nickname was last in active in one of my channels"""
 
     if event.conn.nick.lower() == text.lower():
         return "You need to get your eyes checked."
@@ -75,8 +75,8 @@ def seen(text, nick, chan, db, event, conn):
 
     db_init(db, conn.name)
 
-    last_seen = db.execute("select name, time, quote from seen_user where name"
-                           " like :name and chan = :chan", {'name': text, 'chan': chan}).fetchone()
+    last_seen = db.execute("select name, time, quote from seen_user where name like :name and chan = :chan",
+                           {'name': text, 'chan': chan}).fetchone()
 
     if last_seen:
         reltime = timesince.timesince(last_seen[1])
diff --git a/plugins/horoscope.py b/plugins/horoscope.py
index 394cb49..1eff2b9 100644
--- a/plugins/horoscope.py
+++ b/plugins/horoscope.py
@@ -11,7 +11,7 @@ def init(db):
 
 @hook.command(autohelp=False)
 def horoscope(text, db, notice, nick):
-    """horoscope <sign> -- Get your horoscope."""
+    """<sign> - get your horoscope"""
 
     # check if the user asked us not to save his details
     dontsave = text.endswith(" dontsave")
diff --git a/plugins/hulu.py b/plugins/hulu.py
index c12eaf4..3bf7973 100644
--- a/plugins/hulu.py
+++ b/plugins/hulu.py
@@ -16,7 +16,7 @@ def hulu_url(match):
 
 @hook.command('hulu')
 def hulu_search(text):
-    """hulu <search> - Search Hulu"""
+    """<query> - searches Hulu for <query>"""
     result = http.get_soup(
         "http://m.hulu.com/search?dp_identifier=hulu&{}&items_per_page=1&page=1".format(urlencode({'query': text})))
     data = result.find('results').find('videos').find('video')
diff --git a/plugins/ignore.py b/plugins/ignore.py
index ec0df55..263da6e 100644
--- a/plugins/ignore.py
+++ b/plugins/ignore.py
@@ -52,7 +52,7 @@ def ignore_sieve(bot, event, _hook):
 
 @hook.command(threaded=False, autohelp=False)
 def ignored(notice, conn):
-    """ignored -- Lists ignored channels/users."""
+    """- lists all channels and users I'm ignoring"""
     ignorelist = conn.config["plugins"]["ignore"]["ignored"]
     if ignorelist:
         notice("Ignored channels/users are: {}".format(", ".join(ignorelist)))
@@ -63,7 +63,7 @@ def ignored(notice, conn):
 
 @hook.command(permissions=["ignore"])
 def ignore(text, bot, conn, notice):
-    """ignore <channel|nick|host> -- Makes the bot ignore <channel|user>."""
+    """<channel|nick|usermask> - adds <channel|nick> to my ignore list"""
     target = text.lower()
     if "!" not in target or "@" not in target:
         target = "{}!*@*".format(target)
@@ -80,7 +80,7 @@ def ignore(text, bot, conn, notice):
 
 @hook.command(permissions=["ignore"])
 def unignore(text, bot, conn, notice):
-    """unignore <channel|user> -- Makes the bot listen to <channel|user>."""
+    """<channel|nick|usermask> - removes <channel|nick|usermask> from my ignore list"""
     target = text.lower()
     if "!" not in target or "@" not in target:
         target = "{}!*@*".format(target)
diff --git a/plugins/imdb.py b/plugins/imdb.py
index 20a05a7..87dd83f 100644
--- a/plugins/imdb.py
+++ b/plugins/imdb.py
@@ -10,7 +10,7 @@ imdb_re = (r'(.*:)//(imdb.com|www.imdb.com)(:[0-9]+)?(.*)', re.I)
 
 @hook.command()
 def imdb(text):
-    """imdb <movie> -- Gets information about <movie> from IMDb."""
+    """imdb <movie> - gets information about <movie> from IMDb"""
 
     strip = text.strip()
 
diff --git a/plugins/imgur.py b/plugins/imgur.py
index b88a297..8fbcefb 100644
--- a/plugins/imgur.py
+++ b/plugins/imgur.py
@@ -18,8 +18,7 @@ def is_valid(data):
 
 @hook.command(autohelp=False)
 def imgur(text):
-    """imgur [subreddit] -- Gets the first page of imgur images from [subreddit] and returns a link to them.
-     If [subreddit] is undefined, return any imgur images"""
+    """[subreddit] - returns a link to the first page of imgur images from [subreddit], or the first page of all imgur images if no subreddit is provided"""
     if text:
         # see if the input ends with "nsfw"
         show_nsfw = text.endswith(" nsfw")
diff --git a/plugins/kernel.py b/plugins/kernel.py
index d9c0043..ae8434d 100644
--- a/plugins/kernel.py
+++ b/plugins/kernel.py
@@ -5,6 +5,7 @@ from cloudbot import hook, http
 
 @hook.command(autohelp=False)
 def kernel(reply):
+    """- gets a list of linux kernel versions"""
     contents = http.get("https://www.kernel.org/finger_banner")
     contents = re.sub(r'The latest(\s*)', '', contents)
     contents = re.sub(r'version of the Linux kernel is:(\s*)', '- ', contents)
diff --git a/plugins/kill.py b/plugins/kill.py
deleted file mode 100644
index cbc6845..0000000
--- a/plugins/kill.py
+++ /dev/null
@@ -1,33 +0,0 @@
-import json
-
-from cloudbot import hook, textgen
-
-
-def get_generator(_json, variables):
-    data = json.loads(_json)
-    return textgen.TextGenerator(data["templates"],
-                                 data["parts"], variables=variables)
-
-
-@hook.command(threaded=False)
-def kill(text, action=None, nick=None, conn=None, notice=None):
-    """kill <user> -- Makes the bot kill <user>."""
-    target = text.strip()
-
-    if " " in target:
-        notice("Invalid username!")
-        return
-
-    # if the user is trying to make the bot kill itself, kill them
-    if target.lower() == conn.nick.lower() or target.lower() == "itself":
-        target = nick
-
-    variables = {
-        "user": target
-    }
-
-    with open("./data/kills.json") as f:
-        generator = get_generator(f.read(), variables)
-
-    # act out the message
-    action(generator.generate_string())
diff --git a/plugins/lastfm.py b/plugins/lastfm.py
index 620dacd..ae1f4ef 100644
--- a/plugins/lastfm.py
+++ b/plugins/lastfm.py
@@ -7,7 +7,7 @@ api_url = "http://ws.audioscrobbler.com/2.0/?format=json"
 
 @hook.command(["lastfm", "l"], autohelp=False)
 def lastfm(inp, nick, db, bot, notice):
-    """lastfm [user] [dontsave] -- Displays the now playing (or last played) track of LastFM user [user]."""
+    """[user] [dontsave] - displays the now playing (or last played) track of LastFM user [user]"""
     api_key = bot.config.get("api_keys", {}).get("lastfm")
     if not api_key:
         return "error: no api key set"
@@ -73,8 +73,8 @@ def lastfm(inp, nick, db, bot, notice):
     out += ending
 
     if inp and not dontsave:
-        db.execute("insert or replace into lastfm(nick, acc) values "
-                   "(:nick, :account)", {'nick': nick.lower(), 'account': user})
+        db.execute("insert or replace into lastfm(nick, acc) values (:nick, :account)",
+                   {'nick': nick.lower(), 'account': user})
         db.commit()
 
     return out
diff --git a/plugins/lmgtfy.py b/plugins/lmgtfy.py
index de03830..d30e3b7 100644
--- a/plugins/lmgtfy.py
+++ b/plugins/lmgtfy.py
@@ -3,7 +3,7 @@ from cloudbot import hook, web, http
 
 @hook.command(["lmgtfy", "gfy"])
 def lmgtfy(text):
-    """lmgtfy [phrase] - Posts a google link for the specified phrase"""
+    """[phrase] - gets a lmgtfy.com link for the specified phrase"""
 
     link = "http://lmgtfy.com/?q={}".format(http.quote_plus(text))
 
diff --git a/plugins/lyrics.py b/plugins/lyrics.py
index da35e35..d8600fc 100644
--- a/plugins/lyrics.py
+++ b/plugins/lyrics.py
@@ -5,7 +5,7 @@ url = "http://search.azlyrics.com/search.php?q="
 
 @hook.command
 def lyrics(inp):
-    """lyrics <search> - Search AZLyrics.com for song lyrics"""
+    """<search> - search AZLyrics.com for song lyrics"""
     if "pastelyrics" in inp:
         dopaste = True
         inp = inp.replace("pastelyrics", "").strip()
diff --git a/plugins/metacritic.py b/plugins/metacritic.py
index 71dbf35..c56e792 100644
--- a/plugins/metacritic.py
+++ b/plugins/metacritic.py
@@ -8,8 +8,7 @@ from cloudbot import hook, http
 
 @hook.command(["metacritic", "mc"])
 def metacritic(inp):
-    """mc [all|movie|tv|album|x360|ps3|pc|gba|ds|3ds|wii|vita|wiiu|xone|ps4] <title>
-    Gets rating for <title> from metacritic on the specified medium."""
+    """[all|movie|tv|album|x360|ps3|pc|gba|ds|3ds|wii|vita|wiiu|xone|ps4] <title> - gets rating for <title> from metacritic on the specified medium"""
 
     args = inp.strip()
 
diff --git a/plugins/minecraft_bukget.py b/plugins/minecraft_bukget.py
index 4ade7c6..400acc0 100644
--- a/plugins/minecraft_bukget.py
+++ b/plugins/minecraft_bukget.py
@@ -121,7 +121,7 @@ def format_output(data):
 
 @hook.command(["bukget", "plugin"])
 def bukget(text, reply, message):
-    """bukget <slug/name> - Look up a plugin on dev.bukkit.org"""
+    """<slug/name> - gets details on a plugin from dev.bukkit.org"""
     # get the plugin slug using search
     try:
         slug = plugin_search(text)
@@ -143,7 +143,7 @@ def bukget(text, reply, message):
 
 @hook.command(autohelp=None)
 def randomplugin(reply, message):
-    """randomplugin - Gets a random plugin from dev.bukkit.org"""
+    """- gets details on a random plugin from dev.bukkit.org"""
     # get a random plugin slug
     try:
         slug = plugin_random()
diff --git a/plugins/minecraft_items.py b/plugins/minecraft_items.py
index dc5ed61..fb71df2 100644
--- a/plugins/minecraft_items.py
+++ b/plugins/minecraft_items.py
@@ -50,7 +50,7 @@ with open("./data/itemids.txt") as f:
 
 @hook.command(["mcitem", "mcid"], threaded=False)
 def mcitem(text, reply):
-    """mcitem <item/id> -- gets the id from an item or vice versa"""
+    """<item/id> - gets the id for <item> or the item name for <id>"""
     text = text.lower().strip()
 
     if text == "":
@@ -80,7 +80,7 @@ def mcitem(text, reply):
 
 @hook.command(["mccraft", "mcrecipe"], threaded=False)
 def mcrecipe(text, reply):
-    """mcrecipe <item> -- gets the crafting recipe for an item"""
+    """<item> -- gets the crafting recipe for <item>"""
     text = text.lower().strip()
 
     results = [recipe.line for recipe in recipelist
diff --git a/plugins/minecraft_ping.py b/plugins/minecraft_ping.py
index 5b91ceb..95b7918 100644
--- a/plugins/minecraft_ping.py
+++ b/plugins/minecraft_ping.py
@@ -220,7 +220,7 @@ def format_output(data):
 
 @hook.command(["mcping", "mcp"])
 def mcping(text):
-    """mcping <server>[:port] - Ping a Minecraft server to check status."""
+    """<server[:port]> - gets the MOTD of the Minecraft server at <server[:port]>"""
     try:
         host, port = parse_input(text)
     except ParseError as e:
diff --git a/plugins/minecraft_status.py b/plugins/minecraft_status.py
index d1a6ab4..855eccc 100644
--- a/plugins/minecraft_status.py
+++ b/plugins/minecraft_status.py
@@ -13,7 +13,7 @@ red_suffix = ": \x034\x02\u2716"
 
 @hook.command(["mcs", "mcstatus", "mojang"], autohelp=False)
 def mcstatus():
-    """mcstatus -- Checks the status of various Mojang (the creators of Minecraft) servers."""
+    """- gets the status of various Mojang (Minecraft) servers"""
 
     try:
         result = http.get("http://status.mojang.com/check")
diff --git a/plugins/minecraft_user.py b/plugins/minecraft_user.py
index 4b7eec0..ca98223 100644
--- a/plugins/minecraft_user.py
+++ b/plugins/minecraft_user.py
@@ -67,7 +67,7 @@ def get_profile(name):
 
 @hook.command(["mcuser", "mcpaid", "haspaid"])
 def mcuser(text):
-    """mcpaid <username> -- Gets information about the Minecraft user <account>."""
+    """<username> - gets information about the Minecraft user <account>"""
     user = text.strip()
 
     try:
diff --git a/plugins/minecraft_wiki.py b/plugins/minecraft_wiki.py
index 1d724f9..570723d 100644
--- a/plugins/minecraft_wiki.py
+++ b/plugins/minecraft_wiki.py
@@ -8,8 +8,7 @@ mc_url = "http://minecraft.gamepedia.com/"
 
 @hook.command()
 def mcwiki(text):
-    """mcwiki <phrase> -- Gets the first paragraph of
-    the Minecraft Wiki article on <phrase>."""
+    """mcwiki <phrase> - gets the first paragraph of the Minecraft Wiki article on <phrase>"""
 
     try:
         j = http.get_json(api_url, search=text)
diff --git a/plugins/mlia.py b/plugins/mlia.py
index 337eb03..065e960 100644
--- a/plugins/mlia.py
+++ b/plugins/mlia.py
@@ -23,7 +23,7 @@ refresh_cache()
 
 @hook.command(autohelp=False)
 def mlia(reply):
-    """mlia -- Gets a random quote from MyLifeIsAverage.com."""
+    """- gets a random quote from MyLifeIsAverage.com"""
     # grab the last item in the mlia cache and remove it
     mlia_id, text = mlia_cache.pop()
     # reply with the mlia we grabbed
diff --git a/plugins/namegen.py b/plugins/namegen.py
index 07375af..c9b909c 100644
--- a/plugins/namegen.py
+++ b/plugins/namegen.py
@@ -12,9 +12,9 @@ def get_generator(_json):
 
 @hook.command(autohelp=False)
 def namegen(text, bot, notice):
-    """namegen [generator] -- Generates some names using the chosen generator.
+    """[generator|list] - generates some names using the chosen generator, or lists all generators if 'list' is specified
     :type bot: core.bot.CloudBot
-    'namegen list' will display a list of all generators."""
+    """
 
     # clean up the input
     inp = text.strip().lower()
diff --git a/plugins/newegg.py b/plugins/newegg.py
index c78816c..92ab4d1 100644
--- a/plugins/newegg.py
+++ b/plugins/newegg.py
@@ -72,7 +72,7 @@ def newegg_url(match):
 
 @hook.command
 def newegg(text):
-    """newegg <item name> -- Searches newegg.com for <item name>"""
+    """newegg <item name> - searches newegg.com for <item name>"""
 
     # form the search request
     request = {
diff --git a/plugins/notes.py b/plugins/notes.py
index 7024186..bf93042 100644
--- a/plugins/notes.py
+++ b/plugins/notes.py
@@ -91,7 +91,7 @@ def db_search(db, nick, query):
 
 @hook.command(["note", "notes"])
 def note(inp, nick, db, notice):
-    """note(s) <add|del|list|search> args -- Manipulates your list of notes."""
+    """<add|del|list|search> args - manipulates your list of notes"""
 
     db_init(db)
 
diff --git a/plugins/op.py b/plugins/op.py
index 2c6a37b..e1d148a 100644
--- a/plugins/op.py
+++ b/plugins/op.py
@@ -31,71 +31,55 @@ def mode_cmd_no_target(mode, text, text_inp, chan, conn, notice):
 
 @hook.command(permissions=["op_ban", "op"])
 def ban(text, conn, chan, notice):
-    """ban [channel] <user> -- Makes the bot ban <user> in [channel].
-    If [channel] is blank the bot will ban <user> in
-    the channel the command was used in."""
+    """[channel] <user> - bans <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("+b", "ban", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_ban", "op"])
 def unban(text, conn, chan, notice):
-    """unban [channel] <user> -- Makes the bot unban <user> in [channel].
-    If [channel] is blank the bot will unban <user> in
-    the channel the command was used in."""
+    """[channel] <user> - unbans <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("-b", "unban", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_quiet", "op"])
 def quiet(text, conn, chan, notice):
-    """quiet [channel] <user> -- Makes the bot quiet <user> in [channel].
-    If [channel] is blank the bot will quiet <user> in
-    the channel the command was used in."""
+    """[channel] <user> - quiets <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("+q", "quiet", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_quiet", "op"])
 def unquiet(text, conn, chan, notice):
-    """unquiet [channel] <user> -- Makes the bot unquiet <user> in [channel].
-    If [channel] is blank the bot will unquiet <user> in
-    the channel the command was used in."""
+    """[channel] <user> - unquiets <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("-q", "unquiet", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_voice", "op"])
 def voice(text, conn, chan, notice):
-    """voice [channel] <user> -- Makes the bot voice <user> in [channel].
-    If [channel] is blank the bot will voice <user> in
-    the channel the command was used in."""
+    """[channel] <user> - voices <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("+v", "voice", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_voice", "op"])
 def devoice(text, conn, chan, notice):
-    """devoice [channel] <user> -- Makes the bot devoice <user> in [channel].
-    If [channel] is blank the bot will devoice <user> in
-    the channel the command was used in."""
+    """[channel] <user> - devoices <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("-v", "devoice", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_op", "op"])
 def op(text, conn, chan, notice):
-    """op [channel] <user> -- Makes the bot op <user> in [channel].
-    If [channel] is blank the bot will op <user> in
-    the channel the command was used in."""
+    """[channel] <user> - ops <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("+o", "op", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_op", "op"])
 def deop(text, conn, chan, notice):
-    """deop [channel] <user> -- Makes the bot deop <user> in [channel].
-    If [channel] is blank the bot will deop <user> in
-    the channel the command was used in."""
+    """[channel] <user> - deops <user> in [channel], or in the caller's channel if no channel is specified"""
     mode_cmd("-o", "deop", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_topic", "op"])
 def topic(text, conn, chan):
-    """topic [channel] <topic> -- Change the topic of a channel."""
+    """[channel] <topic> - changes the topic to <topic> in [channel], or in the caller's channel if no channel is specified"""
     split = text.split(" ")
     if split[0].startswith("#"):
         message = " ".join(split[1:])
@@ -107,9 +91,7 @@ def topic(text, conn, chan):
 
 @hook.command(permissions=["op_kick", "op"])
 def kick(text, chan, conn, notice):
-    """kick [channel] <user> [reason] -- Makes the bot kick <user> in [channel]
-    If [channel] is blank the bot will kick the <user> in
-    the channel the command was used in."""
+    """[channel] <user> - kicks <user> from [channel], or from the caller's channel if no channel is specified"""
     split = text.split(" ")
 
     if split[0].startswith("#"):
@@ -135,7 +117,7 @@ def kick(text, chan, conn, notice):
 
 @hook.command(permissions=["op_rem", "op"])
 def remove(text, chan, conn):
-    """remove [channel] [user] -- Force a user to part from a channel."""
+    """[channel] <user> - force removes <user> from [channel], or in the caller's channel if no channel is specified"""
     split = text.split(" ")
     if split[0].startswith("#"):
         message = " ".join(split[1:])
@@ -149,31 +131,23 @@ def remove(text, chan, conn):
 
 @hook.command(permissions=["op_mute", "op"], autohelp=False)
 def mute(text, conn, chan, notice):
-    """mute [channel] -- Makes the bot mute a channel..
-    If [channel] is blank the bot will mute
-    the channel the command was used in."""
+    """[channel] - mutes [channel], or in the caller's channel if no channel is specified"""
     mode_cmd_no_target("+m", "mute", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_mute", "op"], autohelp=False)
 def unmute(text, conn, chan, notice):
-    """mute [channel] -- Makes the bot mute a channel..
-    If [channel] is blank the bot will mute
-    the channel the command was used in."""
+    """[channel] - unmutes [channel], or in the caller's channel if no channel is specified"""
     mode_cmd_no_target("-m", "unmute", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_lock", "op"], autohelp=False)
 def lock(text, conn, chan, notice):
-    """lock [channel] -- Makes the bot lock a channel.
-    If [channel] is blank the bot will mute
-    the channel the command was used in."""
+    """[channel] - locks [channel], or in the caller's channel if no channel is specified"""
     mode_cmd_no_target("+i", "lock", text, chan, conn, notice)
 
 
 @hook.command(permissions=["op_lock", "op"], autohelp=False)
 def unlock(text, conn, chan, notice):
-    """unlock [channel] -- Makes the bot unlock a channel..
-    If [channel] is blank the bot will mute
-    the channel the command was used in."""
+    """[channel] - unlocks [channel], or in the caller's channel if no channel is specified"""
     mode_cmd_no_target("-i", "unlock", text, chan, conn, notice)
diff --git a/plugins/osrc.py b/plugins/osrc.py
index 8468bec..4832a43 100644
--- a/plugins/osrc.py
+++ b/plugins/osrc.py
@@ -6,7 +6,7 @@ user_url = "http://osrc.dfm.io/{}"
 
 @hook.command
 def osrc(text):
-    """osrc <github user> -- Gets an Open Source Report Card for <github user>"""
+    """<github user> - gets an Open Source Report Card for <github user> from osrc.dfm.io"""
 
     user_nick = text.strip()
     url = user_url.format(user_nick)
diff --git a/plugins/pagecheck.py b/plugins/pagecheck.py
index 33fc807..e3e922d 100644
--- a/plugins/pagecheck.py
+++ b/plugins/pagecheck.py
@@ -3,9 +3,9 @@ import urllib.parse
 from cloudbot import hook, http, urlnorm
 
 
-@hook.command
+@hook.command(["down", "offline", "up"])
 def down(text):
-    """down <url> -- Checks if the site at <url> is up or down.
+    """<url> - checks if <url> is online or offline
     :type text: str
     """
 
@@ -23,7 +23,7 @@ def down(text):
 
 @hook.command
 def isup(text):
-    """isup -- uses isup.me to see if a site is up or not
+    """<url> - uses isup.me to check if <url> is online or offline
     :type text: str
     """
 
diff --git a/plugins/password.py b/plugins/password.py
index 55d4456..e3b90ed 100644
--- a/plugins/password.py
+++ b/plugins/password.py
@@ -14,8 +14,7 @@ with open("data/password_words.txt") as f:
 
 @hook.command(autohelp=False)
 def password(text, notice):
-    """password <length> [types] -- Generates a password of <length> (default 10).
-    [types] can include 'alpha', 'no caps', 'numeric', 'symbols' or any combination of the inp, eg. 'numbers symbols'"""
+    """[length [types]] - generates a password of <length> (default 10). [types] can include 'alpha', 'no caps', 'numeric', 'symbols' or any combination: eg. 'numbers symbols'"""
     okay = []
 
     # find the length needed for the password
@@ -58,7 +57,7 @@ def password(text, notice):
 
 @hook.command(["rpass", "rpassword", "readablepassword"], autohelp=False)
 def readable_password(text, notice):
-    """rpass [length]  -- Generates an easy to remember password with [length] (default 4) commonly used words."""
+    """[length] - generates an easy to remember password with [length] (default 4) commonly used words"""
     if text:
         try:
             length = int(text)
diff --git a/plugins/ping.py b/plugins/ping.py
index 1ac9431..53dc7e0 100644
--- a/plugins/ping.py
+++ b/plugins/ping.py
@@ -10,7 +10,7 @@ ping_regex = re.compile(r"(\d+.\d+)/(\d+.\d+)/(\d+.\d+)/(\d+.\d+)")
 
 @hook.command
 def ping(text, reply):
-    """ping <host> [count] -- Pings <host> [count] times."""
+    """<host> [count] - pings <host> [count] times"""
 
     if os.name == "nt":
         return "Sorry, this command is not supported on Windows systems."
diff --git a/plugins/plpaste.py b/plugins/plpaste.py
index 2cd984a..2a4bab7 100644
--- a/plugins/plpaste.py
+++ b/plugins/plpaste.py
@@ -5,7 +5,7 @@ from cloudbot import hook, web
 
 @hook.command(permissions=["adminonly"])
 def plpaste(text, bot):
-    """
+    """<command> - pastes the plugin file that contains <command>
     :type text: str
     :type bot: core.bot.CloudBot
     """
diff --git a/plugins/prefixes.py b/plugins/prefixes.py
index 52550b3..960f2b1 100644
--- a/plugins/prefixes.py
+++ b/plugins/prefixes.py
@@ -40,7 +40,7 @@ def load_command_re(db):
 
 @hook.command(permissions=["botcontrol"])
 def addprefix(text, conn, chan, db):
-    """delprefix <prefix> - Adds a command prefix <prefix> to the current channel
+    """<prefix> - adds a command prefix <prefix> to the current channel
     :type text: str
     :type chan: str
     :type db: sqlalchemy.orm.Session
@@ -54,7 +54,7 @@ def addprefix(text, conn, chan, db):
 
 @hook.command(permissions=["botcontrol"])
 def delprefix(text, chan, db):
-    """delprefix <prefix> - Removes command prefix <prefix> from the current channel
+    """<prefix> - removes command prefix <prefix> from the current channel
     :type text: str
     :type chan: str
     :type db: sqlalchemy.orm.Session
diff --git a/plugins/python.py b/plugins/python.py
index d7ab3a0..624bae3 100644
--- a/plugins/python.py
+++ b/plugins/python.py
@@ -2,8 +2,8 @@ from cloudbot import hook
 from cloudbot.util.pyexec import eval_py
 
 
-@hook.command
+@hook.command(["python", "py"])
 def python(text):
-    """python <prog> -- Executes <prog> as Python code."""
+    """<python code> - executes <python code> using eval.appspot.com"""
 
     return eval_py(text)
diff --git a/plugins/qrcode.py b/plugins/qrcode.py
index 4c31144..f5c927c 100644
--- a/plugins/qrcode.py
+++ b/plugins/qrcode.py
@@ -5,7 +5,7 @@ from cloudbot import hook, web, http
 @hook.command('qr')
 @hook.command
 def qrcode(text):
-    """qrcode [link] returns a link for a QR code."""
+    """[link] - returns a link to a QR code image for [link]"""
 
     args = {
         "cht": "qr",  # chart type (QR)
diff --git a/plugins/quote.py b/plugins/quote.py
index add0dcd..65fb512 100644
--- a/plugins/quote.py
+++ b/plugins/quote.py
@@ -123,8 +123,7 @@ def get_quote_by_chan(db, chan, num=False):
 @hook.command('q')
 @hook.command
 def quote(inp, nick='', chan='', db=None, notice=None):
-    """quote [#chan] [nick] [#n]/.quote add <nick> <msg>
-    Gets random or [#n]th quote by <nick> or from <#chan>/adds quote."""
+    """[#chan] [nick] [#n] OR add <nick> <message> - gets the [#n]th quote by <nick> (defaulting to random) OR adds <message> as a quote for <nick> in the caller's channel"""
     create_table_if_not_exists(db)
 
     add = re.match(r"add[^\w@]+(\S+?)>?\s+(.*)", inp, re.I)
diff --git a/plugins/rdio.py b/plugins/rdio.py
index 5295041..1cc6250 100644
--- a/plugins/rdio.py
+++ b/plugins/rdio.py
@@ -1,4 +1,5 @@
 import urllib
+import urllib.parse
 import json
 import re
 
@@ -17,13 +18,13 @@ def getdata(inp, types, api_key, api_secret):
 
 
 @hook.command
-def rdio(inp, bot=None):
-    """ rdio <search term> - alternatives: .rdiot (track), .rdioar (artist), .rdioal (album) """
+def rdio(text, bot):
+    """<query> - searches rdio for <query>"""
     api_key = bot.config.get("api_keys", {}).get("rdio_key")
     api_secret = bot.config.get("api_keys", {}).get("rdio_secret")
     if not api_key:
         return "error: no api key set"
-    data = getdata(inp, "Track,Album,Artist", api_key, api_secret)
+    data = getdata(text, "Track,Album,Artist", api_key, api_secret)
     try:
         info = data['result']['results'][0]
     except IndexError:
@@ -47,13 +48,13 @@ def rdio(inp, bot=None):
 
 
 @hook.command
-def rdiot(inp, bot=None):
-    """ rdiot <search term> - Search for tracks on rdio """
+def rdiot(text, bot):
+    """<query> - searches rdio for tracks matching <query>"""
     api_key = bot.config.get("api_keys", {}).get("rdio_key")
     api_secret = bot.config.get("api_keys", {}).get("rdio_secret")
     if not api_key:
         return "error: no api key set"
-    data = getdata(inp, "Track", api_key, api_secret)
+    data = getdata(text, "Track", api_key, api_secret)
     try:
         info = data['result']['results'][0]
     except IndexError:
@@ -66,13 +67,13 @@ def rdiot(inp, bot=None):
 
 
 @hook.command
-def rdioar(inp, bot=None):
-    """ rdioar <search term> - Search for artists on rdio """
+def rdioar(text, bot):
+    """<query> - searches rdio for artists matching <query>"""
     api_key = bot.config.get("api_keys", {}).get("rdio_key")
     api_secret = bot.config.get("api_keys", {}).get("rdio_secret")
     if not api_key:
         return "error: no api key set"
-    data = getdata(inp, "Artist", api_key, api_secret)
+    data = getdata(text, "Artist", api_key, api_secret)
     try:
         info = data['result']['results'][0]
     except IndexError:
@@ -83,13 +84,13 @@ def rdioar(inp, bot=None):
 
 
 @hook.command
-def rdioal(inp, bot=None):
-    """ rdioal <search term> - Search for albums on rdio """
+def rdioal(text, bot):
+    """<query> - searches rdio for albums matching <query>"""
     api_key = bot.config.get("api_keys", {}).get("rdio_key")
     api_secret = bot.config.get("api_keys", {}).get("rdio_secret")
     if not api_key:
         return "error: no api key set"
-    data = getdata(inp, "Album", api_key, api_secret)
+    data = getdata(text, "Album", api_key, api_secret)
     try:
         info = data['result']['results'][0]
     except IndexError:
@@ -104,7 +105,7 @@ rdio_re = (r'(.*:)//(rd.io|www.rdio.com|rdio.com)(:[0-9]+)?(.*)', re.I)
 
 
 @hook.regex(*rdio_re)
-def rdio_url(match, bot=None):
+def rdio_url(match, bot):
     api_key = bot.config.get("api_keys", {}).get("rdio_key")
     api_secret = bot.config.get("api_keys", {}).get("rdio_secret")
     if not api_key:
diff --git a/plugins/recipe.py b/plugins/recipe.py
index 12c6ae0..5ec0ea2 100644
--- a/plugins/recipe.py
+++ b/plugins/recipe.py
@@ -48,7 +48,7 @@ def get_data(url):
 
 @hook.command(autohelp=False)
 def recipe(text):
-    """recipe [term] - Gets a recipe for [term], or ets a random recipe if [term] is not provided"""
+    """[term] - gets a recipe for [term], or gets a random recipe if no term is specified"""
     if text:
         # get the recipe URL by searching
         try:
@@ -90,7 +90,7 @@ def recipe(text):
 
 @hook.command(autohelp=False)
 def dinner():
-    """dinner - WTF IS FOR DINNER"""
+    """- gets a random dinner from whatthefuckshouldimakefordinner.com"""
     try:
         page = http.open(random_url)
     except (http.HTTPError, http.URLError) as e:
diff --git a/plugins/reddit.py b/plugins/reddit.py
index 74e8837..5a3ca2d 100644
--- a/plugins/reddit.py
+++ b/plugins/reddit.py
@@ -26,13 +26,13 @@ def reddit_url(match):
 
 
 @hook.command(autohelp=False)
-def reddit(inp):
-    """reddit <subreddit> [n] -- Gets a random post from <subreddit>, or gets the [n]th post in the subreddit."""
+def reddit(text):
+    """<subreddit> [n] - gets a random post from <subreddit>, or gets the [n]th post in the subreddit"""
     id_num = None
 
-    if inp:
+    if text:
         # clean and split the input
-        parts = inp.lower().strip().split()
+        parts = text.lower().strip().split()
 
         # find the requested post number (if any)
         if len(parts) > 1:
diff --git a/plugins/shorten.py b/plugins/shorten.py
index f4bf685..d7cefbc 100644
--- a/plugins/shorten.py
+++ b/plugins/shorten.py
@@ -2,7 +2,7 @@ from cloudbot import hook, web
 
 @hook.command
 def isgd(text):
-    """isgd <url> [custom] - Shorten a url with is.gd. [custom] is an optional custom shortlink."""
+    """<url> [custom] - Shorten a url with is.gd with [custom] as an optional custom shortlink"""
     args   = text.split()
     url    = args[0]
     custom = args[1] if len(args) > 1 else None
@@ -15,7 +15,7 @@ def isgd(text):
 
 @hook.command
 def gitio(text):
-    """gitio <url> [custom] -- Shorten a Github url with git.io. [custom] is an optional custom shortlink."""
+    """<url> [custom] - shortens a github URL <url> using git.io with [custom] as an optional custom shortlink"""
     args   = text.split()
     url    = args[0]
     custom = args[1] if len(args) > 1 else None
@@ -24,4 +24,4 @@ def gitio(text):
     try:
         return gitio.shorten(url, custom)
     except web.ShortenError as e:
-        return e.message
\ No newline at end of file
+        return e.message
-- 
1.9.3

