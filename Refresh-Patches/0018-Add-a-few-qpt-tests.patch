From a976a3ab57090b86d1401fc2ada51c0e5c753221 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Wed, 23 Apr 2014 16:42:47 -0700
Subject: [PATCH] Add a few qpt tests:

- mass.py - Tests almost all bot commands, but requires the suer to watch console output for errors or incorrect results.
- test_admin.py - Tests the admin plugin accurantly, validating command results against regexes
- print_all_commands.py - Debugging test that just prints all the bot's commands to console, currently disabled

diff --git a/qpt_tests/mass.py b/qpt_tests/mass.py
new file mode 100644
index 0000000..8f6a221
--- /dev/null
+++ b/qpt_tests/mass.py
@@ -0,0 +1,304 @@
+import re
+
+from cloudbot.util import qpt
+
+
+# this is a list of commands to run, and the expected result
+tested_result_commands = [
+    (
+        "rpass",
+        r"NOTICE TestUser :Your password is '\w+ \w+ \w+ \w+'. Feel free to remove the spaces when using it."
+    ),
+    (
+        "bf ++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.",
+        r"PRIVMSG #channel :TestUser, Hello World!"
+    ),
+    (
+        "choose option1, option2 option3     option4",
+        r"PRIVMSG #channel :TestUser, (option1|option2|option3|option4)"
+    ),
+    (
+        "coin",
+        "PRIVMSG #channel :\x01ACTION flips a coin and gets (heads|tails).\x01"
+    ),
+    (
+        "coin 0",
+        "PRIVMSG #channel :\x01ACTION makes a coin flipping motion\x01"
+    ),
+]
+
+# this is a list of commands to run, with no expected result
+# this is for mass tests where you can just check the console results.
+# where expected result regexes haven't been written yet
+mass_valid_commands = [
+    # admin.py
+    "adduser TestUser2!~user@example.com admins",
+    "deluser TestUser2!~user@example.com",
+    "join #chan2",
+    "part #chan2",
+    "cycle #channel",
+    "permgroups",
+    "gperms admins",
+    "gusers admins",
+    "ugroups",
+    "uperms",
+    "me hi",
+    "me #chan2 hi",
+    "message TestUser2 Hi",
+    "nick TestBot2",
+    "raw PRIVMSG #channel :This is a raw message.",
+    # we can't test restart/stop, it would restart/stop the bot
+    "say hi",
+    "say #chan2 hi",
+    # attacks.py
+    "flirt TestUser",
+    "flirt itself",
+    "insult TestUser",
+    "insult itself",
+    "lart TestUser",
+    "lart itself",
+    # brainfuck.py - tested above
+    # choose.py - tested above
+    # coin.py - tested above
+    # core_ctcp, core_misc, core_sieve, core_tracker, correction - empty
+    # cryptocoins.py
+    "ltc",
+    "btc",
+    # cypher.py
+    "cypher mypassword mytext",
+    "decypher mypassword w5rDssOkw4bDq8On",
+    # dbtest.py - TODO
+    # debug.py
+    "debug",
+    # dice.py
+    "roll 2d6",
+    # dictionary.py
+    "define world",
+    "e world",
+    # domainr.py
+    "domain cloudbot",
+    # drama.py
+    "drama world",
+    # eightball.py
+    "8 ?",
+    # eliralin_teamcity.py
+    "listci",
+    "reloadci",
+    "ci SkyWars",
+    # eliralin_utility.py
+    "colors",
+    "dns qx.lc",
+    "hug TestUser2",
+    "jose 5",
+    "rdns qx.lc",
+    "tree",
+    # encrypt.py - test_encrypt.py
+    # fact.py
+    "fact",
+    # factoids.py - test_factoids.py
+    # fishbans.py
+    "bancount notch",
+    "bancount daboross",
+    "bans notch",
+    "bans daboross",
+    # fmylife.py
+    "fml",
+    # foods.py
+    "cake TestUser2",
+    "cookie TestUser2",
+    "potato TestUser2",
+    # fortune.py
+    "fortune",
+    # geoip.py
+    "geoip daboross.net",
+    "gitio github.com/ClouDev/CloudBot",
+    # github.py
+    "ghissues ClouDev/CloudBot",
+    # google.py
+    "g cloudbot",
+    "gis cloudbot",
+    # google_translate.py - TODO
+    # googleurlparse.py - TODO
+    # help.py
+    "help",
+    "help lart",
+    # history.py - TODO
+    # horoscope.py
+    "horoscope",
+    # hulu.py - TODO
+    # ignore.py - TODO
+    # imdb.py - TODO
+    # imgur.py
+    "imgur",
+    # kernel.py
+    "kernel",
+    # kill.py
+    "kill TestUser",  # TODO: kill should be in attacks
+    # lastfm.py - TODO
+    # lmgtfy.py
+    "lmgtfy cloudbot",
+    # lyrics.py - TODO
+    # metacritic.py - TODO
+    # minecraft_bukget.py
+    "plugin skywars",
+    "randomplugin",
+    # minecraft_items.py
+    "mcid cobblestone",
+    "mccraft stonestairs",
+    # minecraft_ping.py
+    "mcping play.aemservers.net",
+    # minecraft_status.py
+    "mcstatus",
+    # minecraft_user.py
+    "mcuser zbsh",
+    "mcuser iamnotausernameplz",
+    # minecraft_wiki.py
+    "mcwiki stone",
+    # mlia.py
+    "mlia",
+    # namegen.py
+    "namegen",
+    "namegen dragons",  # TODO: namegen for each in list
+    "namegen list",
+    # newegg.py
+    "newegg monitor",
+    # notes.py - TODO
+    # op.py
+    "ban Dabo",
+    "unban Dabo",
+    "voice Dabo",
+    "devoice Dabo",
+    "kick Dabo",
+    "lock Dabo",
+    "unlock Dabo",
+    "mute Dabo",
+    "unmute Dabo",
+    "op Dabo",
+    "deop Dabo",
+    "quiet Dabo",
+    "unquiet Dabo",
+    "remove Dabo",
+    "topic Hey a topic",
+    "remove Dabo",
+    # osrc.py
+    "osrc daboross",
+    # pagecheck.py
+    "down daboross.net",
+    "isup daboross.net",
+    "down asdffdsaasdffdsa.net",
+    "isup asdffdsaasdffdsa.net",
+    # password.py
+    "password 8",
+    "readablepassword 8",
+    # ping.py
+    "ping dabo.guru",
+    # plpaste.py
+    "plpaste admin",
+    # prefixes.py
+    "addprefix %",
+    "delprefix %",
+    # profiling.py
+    "threaddump",
+    # pympler_* / show_* not included
+    # python.py
+    "python print('Hello World!')",
+    # qrcode.py
+    "qr dabo.guru",
+    # quote.py - TODO
+    # rdio.py - TODO
+    # recipe.py
+    "dinner",
+    "recipe",
+    # reddit.py - TODO
+    # rottentomatoes.py - TODO
+    # rss.py - TODO
+    # scene.py - TODO
+    # shorten.py
+    "shorten dabo.guru",
+    # slap.py
+    "slap Dabo",  # TODO: This should be in attacks
+    # slogan.py
+    "slogan CloudBot",
+    # snopes.py - TODO
+    # soundcloud.py - TODO
+    # spellcheck.py
+    "spell hallo",
+    # spotify.py - TODO
+    # steam.py - TODO
+    # steam_calc.py - TODO
+    # stock.py - TODO
+    # suggest.py
+    "suggest cloudb",
+    # system.py
+    "memory",
+    "pid",
+    "system",
+    "uptime",
+    # time_plugin.py - TODO
+    # title.py
+    "title dabo.guru",
+    # tvdb.py - TODO
+    # twitch.py - TODO
+    # urban.py
+    "urban cloud",
+    "upper cloudbot",
+    # utility.py
+    # - case manipulation
+    "titlecase cloud bot",
+    "lower ClOuDbOt",
+    "swapcase cloudBOT",
+    "capitalize cloudbot. period.",
+    # - encoding
+    "rot13 hi",
+    "rot13 uv",
+    "base64 hi",
+    "unbase64 aGk=",
+    "isbase64 hi",
+    "isbase64 aGk=",
+    "escape \u26c2",
+    "unescape \\u26c2",
+    # - other string stuff
+    "length cloudbot",
+    "reverse racecars",
+    "hash cloudbot",
+    "munge cloudbot",
+    # - colors
+    "rainbow cloudbot",
+    "wrainbow cloudbot",
+    "usa cloudbot",
+    # validate.py
+    "validate dabo.guru",
+    # valvesounds.py .- TODO
+    # vimeo.py - TODO
+    # weather.py
+    "weather seattle",
+    # wikipedia.py
+    "wiki seattle",
+    # wolframalpha.py
+    "wa 2 + 2",
+    # xkcd.py
+    "xkcd NRO",
+    # yahooanswers.py
+    "answer why is the world green?",
+    # youtube.py
+    "youtube asdf",
+    "youtime asdf"
+]
+
+
+@qpt.test(times=len(tested_result_commands))
+def test_command_results(test_number, run_command, get):
+    """
+    :type test_number: int
+    """
+    command, expected_result = tested_result_commands[test_number]
+    yield from run_command(command)
+    result = yield from get()
+    assert re.match(expected_result, result), "{} didn't match {}".format(expected_result, result)
+
+
+@qpt.test(times=len(mass_valid_commands))
+def mass_test(test_number, run_command, get):
+    yield from run_command(mass_valid_commands[test_number])
+    # get an result, even if it isn't used.
+    yield from get()
diff --git a/qpt_tests/test_admin.py b/qpt_tests/test_admin.py
new file mode 100644
index 0000000..b1b189e
--- /dev/null
+++ b/qpt_tests/test_admin.py
@@ -0,0 +1,28 @@
+import re
+
+from cloudbot.util.qpt import test
+
+
+@test()
+def mass_test(conn, run_command, get):
+    """
+    :type conn: cloudbot.core.connection.BotConnection
+    """
+    conn.permissions.add_user_to_group("TestUser!~user@example.com", "admins")
+    conn.bot.config.save_config()
+    conn.permissions.reload()
+    yield from run_command("groups")
+    assert re.match(r"PRIVMSG #channel :TestUser, Valid groups: {('\S+', )+'\S+'}", (yield from get()))
+    for group in conn.permissions.get_groups():
+        yield from run_command("gperms {}".format(group))
+        assert re.match(
+            r"PRIVMSG #channel :TestUser, Group \S+ has permissions \[('\S+', )*'\S+'\]|"
+            r"PRIVMSG #channel :TestUser, Group \S+ exists, but has no permissions",
+            (yield from get())
+        )
+        yield from run_command("gusers {}".format(group))
+        assert re.match(
+            r"PRIVMSG #channel :TestUser, Group \S+ has members: \[('\S+', )*'\S+'\]|"
+            r"PRIVMSG #channel :TestUser, Group \S+ exists, but has no members",
+            (yield from get())
+        )
diff --git a/qpt_tests/test_encrypt.py b/qpt_tests/test_encrypt.py
new file mode 100644
index 0000000..8642ea7
--- /dev/null
+++ b/qpt_tests/test_encrypt.py
@@ -0,0 +1,13 @@
+import re
+
+from cloudbot.util import qpt
+
+
+@qpt.test()
+def test_encrypt(run_command, get):
+    yield from run_command("encrypt mypass mytext")
+    match = re.match(r"PRIVMSG #channel :TestUser, (.+)", (yield from get()))
+    assert match
+    assert match.groups()
+    yield from run_command("decrypt mypass {}".format(match.groups()[0]))
+    assert re.match(r"PRIVMSG #channel :TestUser, mytext", (yield from get()))
\ No newline at end of file
diff --git a/qpt_tests/test_factoids.py b/qpt_tests/test_factoids.py
new file mode 100644
index 0000000..52efcb5
--- /dev/null
+++ b/qpt_tests/test_factoids.py
@@ -0,0 +1,17 @@
+import re
+
+from cloudbot.util import qpt
+
+
+@qpt.test()
+def test_factoids(run_command, send, get):
+    yield from run_command("r qpttest qpttestcode")
+    yield from get()
+    yield from send(":TestUser!~user@example.com PRIVMSG #channel :^qpttest")
+    assert re.match(r"PRIVMSG #channel :qpttestcode", (yield from get()))
+
+    yield from run_command("f qpttestcode")
+    yield from get()
+
+    yield from run_command("listfactoids")
+    yield from get()
\ No newline at end of file
diff --git a/qpt_tests/z_print.py b/qpt_tests/z_print.py
new file mode 100644
index 0000000..807620a
--- /dev/null
+++ b/qpt_tests/z_print.py
@@ -0,0 +1,16 @@
+from operator import attrgetter
+
+from cloudbot.util.qpt import test
+
+
+@test()
+def print_all_commands(bot):
+    """
+    Prints all commands on a bot, sorted by plugin. This is used for debug.
+    :type bot: cloudbot.core.bot.CloudBot
+    """
+    plugins = sorted(bot.plugin_manager.plugins.values(), key=attrgetter("title"))
+    for plugin in plugins:
+        print(plugin.title + ":")
+        for command in sorted(plugin.commands, key=attrgetter("name")):
+            print("\t{} - {}".format("/".join(command.aliases), command.has_run))
-- 
1.9.3

