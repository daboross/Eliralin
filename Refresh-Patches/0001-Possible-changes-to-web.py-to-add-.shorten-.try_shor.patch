From e8d5af547da36d3cfb4f927f4aa1d847f67aef6a Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Sat, 31 May 2014 19:27:28 -0700
Subject: [PATCH] Possible changes to web.py to add .shorten .try_shorten and
 .paste, replacing .Isgd().shorten() and .haste() - also updates plugins


diff --git a/cloudbot/util/web.py b/cloudbot/util/web.py
index f8152f0..944f4f0 100644
--- a/cloudbot/util/web.py
+++ b/cloudbot/util/web.py
@@ -2,36 +2,92 @@
 
 import requests
 
-class ShortenError(Exception):
+
+class ServiceError(Exception):
     def __init__(self, message, request):
         self.message = message
         self.request = request
 
     def __str__(self):
         return "[HTTP {}] {}".format(self.request.status_code, self.message)
-        
-class Shortener:
-    def shorten(self, url, custom=None):
+
+
+class ShorteningService:
+    def shorten(self, url, custom):
         return url
-    
-    def try_shorten(self, url, custom=None):
+
+    def try_shorten(self, url, custom):
         try:
             return self.shorten(url, custom)
-        except ShortenError as e:
+        except ServiceError as e:
             return url
 
-class Isgd(Shortener):
-    def shorten(self, url, custom=None):
+
+class PasteService:
+    def paste(self, data, ext, custom_server=None):
+        raise NotImplementedError
+
+
+shortening_services = {}
+paste_services = {}
+
+
+# decorators for fanciness
+
+def _shortening_service(name):
+    def _decorator(cls):
+        shortening_services[name] = cls()
+
+    return _decorator
+
+
+def _paste_service(name):
+    def _decorator(cls):
+        paste_services[name] = cls()
+
+    return _decorator
+
+
+def shorten(url, service="is.gd", custom=None):
+    impl = shortening_services.get(service)
+    assert impl is not None, "invalid service {}".format(service)
+
+    return impl.shorten(url, custom)
+
+
+def try_shorten(url, service="is.gd", custom=None):
+    impl = shortening_services.get(service)
+    assert impl is not None, "invalid service {}".format(service)
+
+    return impl.try_shorten(url, custom)
+
+
+def paste(data, service="hastebin", ext=None, custom_server=None):
+    impl = paste_services.get(service)
+    assert impl is not None, "invalid service {}".format(service)
+
+    if custom_server:
+        # if/else for support of default values per service
+        return impl.shorten(data, ext, server=custom_server)
+    else:
+        return impl.shorten(data, ext)
+
+
+@_shortening_service("is.gd")
+class Isgd(ShorteningService):
+    def shorten(self, url, custom):
         p = {'url': url, 'shorturl': custom, 'format': 'json'}
         r = requests.get('http://is.gd/create.php', params=p)
-        
+
         j = r.json()
         if 'shorturl' in j:
             return j['shorturl']
         else:
-            raise ShortenError(j['errormessage'], r)
-        
-class Gitio(Shortener):
+            raise ServiceError(j['errormessage'], r)
+
+
+@_shortening_service("git.io")
+class Gitio(ShorteningService):
     def shorten(self, url, custom=None):
         p = {'url': url, 'code': custom}
         r = requests.post('http://git.io', data=p)
@@ -39,14 +95,24 @@ class Gitio(Shortener):
         if r.status_code == requests.codes.created:
             s = r.headers['location']
             if custom and not custom in s:
-                raise ShortenError("That URL is already in use.", r)
+                raise ServiceError("That URL is already in use.", r)
             else:
                 return s
         else:
-            raise ShortenError("Unknown Error", r)
+            raise ServiceError("Unknown Error", r)
+
 
-def haste(data, ext='txt', server='http://hastebin.com'):
-    r = requests.post(server + '/documents', data=data)
-    j = r.json()
+@_paste_service("hastebin")
+class Hastebin(PasteService):
+    def paste(self, data, ext, server='http://hastebin.com'):
+        r = requests.post(server + '/documents', data=data)
 
-    return "{}/{}.{}".format(server, j['key'], ext)
+        if r.status_code != requests.codes.ok:
+            raise ServiceError(r.text, r)
+
+        j = r.json()
+
+        if ext is not None:
+            return "{}/{}.{}".format(server, j['key'], ext)
+        else:
+            return "{}/{}".format(server, j['key'])
diff --git a/plugins/fact.py b/plugins/fact.py
index 9594c10..95c0c0e 100644
--- a/plugins/fact.py
+++ b/plugins/fact.py
@@ -32,6 +32,6 @@ def fact():
                 attempts += 1
                 continue
 
-    url = web.try_isgd(link)
+    url = web.try_shorten(link)
 
     return "{} - {}".format(fact_data, url)
diff --git a/plugins/github.py b/plugins/github.py
index 9b77db7..69e61f0 100644
--- a/plugins/github.py
+++ b/plugins/github.py
@@ -1,25 +1,24 @@
-from cloudbot import hook, web, formatting
-
 import requests
 
+from cloudbot import hook, formatting, web
+
 shortcuts = {
     'cloudbot': 'CloudBotIRC/Refresh'
 }
 
+
 @hook.command
 def issues(text):
     """issues <repo> [issue] - Get issues for <repo>. If [issue] is specified, summarize that issue."""
     args = text.split()
     repo = args[0] if args[0] not in shortcuts else shortcuts[args[0]]
-    issue = args[1] if len(args) > 1 else None   
+    issue = args[1] if len(args) > 1 else None
 
     if issue:
         r = requests.get("https://api.github.com/repos/{}/issues/{}".format(repo, issue))
         j = r.json()
-        
-        gitio = web.Gitio()
 
-        url          = gitio.shorten(j["html_url"])
+        url          = web.try_shorten(j["html_url"], service="git.io")
         number       = j["number"]
         user         = j["user"]["login"]
         title        = j["title"]
@@ -33,7 +32,7 @@ def issues(text):
     else:
         r = requests.get("https://api.github.com/repos/{}/issues".format(repo))
         j = r.json()
-        
+
         count = len(j)
         if count is 0:
             return "Repository has no open issues."
diff --git a/plugins/imgur.py b/plugins/imgur.py
index b88a297..61eede9 100644
--- a/plugins/imgur.py
+++ b/plugins/imgur.py
@@ -76,6 +76,6 @@ def imgur(text):
         return "No images found (use .imgur <subreddit> nsfw to show explicit content)"
 
     if show_nsfw:
-        return "{} \x02NSFW\x02".format(web.isgd("http://imgur.com/" + ','.join(items)))
+        return "{} \x02NSFW\x02".format(web.try_shorten("http://imgur.com/" + ','.join(items)))
     else:
-        return web.isgd("http://imgur.com/" + ','.join(items))
+        return web.try_shorten("http://imgur.com/" + ','.join(items))
diff --git a/plugins/lmgtfy.py b/plugins/lmgtfy.py
index de03830..0458be3 100644
--- a/plugins/lmgtfy.py
+++ b/plugins/lmgtfy.py
@@ -7,7 +7,4 @@ def lmgtfy(text):
 
     link = "http://lmgtfy.com/?q={}".format(http.quote_plus(text))
 
-    try:
-        return web.isgd(link)
-    except (web.ShortenError, http.HTTPError):
-        return link
+    return web.try_shorten(link)
diff --git a/plugins/lyrics.py b/plugins/lyrics.py
index da35e35..a9e6152 100644
--- a/plugins/lyrics.py
+++ b/plugins/lyrics.py
@@ -26,7 +26,7 @@ def lyrics(inp):
             newsoup = http.get_soup(link)
             try:
                 lyrics = newsoup.find('div', {'style': 'margin-left:10px;margin-right:10px;'}).text.strip()
-                pasteurl = " " + web.haste(lyrics)
+                pasteurl = " " + web.paste(lyrics)
             except Exception as e:
                 pasteurl = " (\x02Unable to paste lyrics\x02 [{}])".format(str(e))
         else:
@@ -37,7 +37,7 @@ def lyrics(inp):
             lyricsum = " / ".join(lyricsum.strip().split("\r\n")[0:4])  # truncate, format
         else:
             lyricsum = " / ".join(lyricsum.strip().split("\n")[0:4])  # truncate, format
-        return "\x02{}\x02 by \x02{}\x02 {}{} - {}".format(title, artist, web.try_isgd(link), pasteurl,
+        return "\x02{}\x02 by \x02{}\x02 {}{} - {}".format(title, artist, web.try_shorten(link), pasteurl,
                                                            lyricsum[:-3])
     else:
         return "No song results. " + url + inp.replace(" ", "+")
diff --git a/plugins/minecraft_bukget.py b/plugins/minecraft_bukget.py
index b32f88c..b79759d 100644
--- a/plugins/minecraft_bukget.py
+++ b/plugins/minecraft_bukget.py
@@ -99,7 +99,7 @@ def format_output(data):
     version_number = data['versions'][0]['version']
 
     bukkit_versions = ", ".join(current_version['game_versions'])
-    link = web.try_isgd(current_version['link'])
+    link = web.try_shorten(current_version['link'])
 
     if description:
         line_a = "\x02{}\x02, by \x02{}\x02 - {} - ({}) \x02{}".format(name, authors, description, stage, url)
@@ -156,4 +156,4 @@ def randomplugin(reply, message):
     line_a, line_b = format_output(data)
 
     reply(line_a)
-    message(line_b)
\ No newline at end of file
+    message(line_b)
diff --git a/plugins/newegg.py b/plugins/newegg.py
index c78816c..3ca14f2 100644
--- a/plugins/newegg.py
+++ b/plugins/newegg.py
@@ -53,7 +53,7 @@ def format_item(item, show_url=True):
 
     if show_url:
         # create the item URL and shorten it
-        url = web.try_isgd(ITEM_URL.format(item["NeweggItemNumber"]))
+        url = web.try_shorten(ITEM_URL.format(item["NeweggItemNumber"]))
         return "\x02{}\x02 ({}) - {} - {} - {}".format(title, price, rating,
                                                        tag_text, url)
     else:
diff --git a/plugins/osrc.py b/plugins/osrc.py
index 8468bec..977e052 100644
--- a/plugins/osrc.py
+++ b/plugins/osrc.py
@@ -22,6 +22,6 @@ def osrc(text):
     # string to remove the trailing full stop.
     report = " ".join(report.split())[:-1]
 
-    short_url = web.try_isgd(url)
+    short_url = web.try_shorten(url)
 
     return "{} - {}".format(report, short_url)
diff --git a/plugins/plpaste.py b/plugins/plpaste.py
index 2cd984a..874459f 100644
--- a/plugins/plpaste.py
+++ b/plugins/plpaste.py
@@ -12,9 +12,9 @@ def plpaste(text, bot):
     if text in bot.plugin_manager.commands:
         file_path = bot.plugin_manager.commands[text].plugin.file_path
         with open(file_path) as f:
-            return web.haste(f.read(), ext='py')
+            return web.paste(f.read(), ext='py')
     elif text + ".py" in listdir('plugins/'):
         with open('plugins/{}.py'.format(text)) as f:
-            return web.haste(f.read(), ext='py')
+            return web.paste(f.read(), ext='py')
     else:
         return "Could not find specified plugin."
diff --git a/plugins/qrcode.py b/plugins/qrcode.py
index 4c31144..8831e5d 100644
--- a/plugins/qrcode.py
+++ b/plugins/qrcode.py
@@ -15,4 +15,4 @@ def qrcode(text):
 
     link = http.prepare_url("http://chart.googleapis.com/chart", args)
 
-    return web.try_isgd(link)
+    return web.try_shorten(link)
diff --git a/plugins/recipe.py b/plugins/recipe.py
index d1153d9..2ba55b4 100644
--- a/plugins/recipe.py
+++ b/plugins/recipe.py
@@ -80,7 +80,7 @@ def recipe(text):
         return "Could not parse recipe: {}".format(e)
 
     name = data["name"].strip()
-    return "Try eating \x02{}!\x02 - {}".format(name, web.try_isgd(url))
+    return "Try eating \x02{}!\x02 - {}".format(name, web.try_shorten(url))
 
 
 @hook.command(autohelp=False)
@@ -103,4 +103,4 @@ def dinner():
     if censor:
         text = text.replace("FUCK", "F**K")
 
-    return "{} - {}".format(text, web.try_isgd(url))
+    return "{} - {}".format(text, web.try_shorten(url))
diff --git a/plugins/rss.py b/plugins/rss.py
index 663a997..2c0930e 100644
--- a/plugins/rss.py
+++ b/plugins/rss.py
@@ -27,10 +27,7 @@ def rss(text, message):
 
     for row in result.rows:
         title = formatting.truncate_str(row["title"], 100)
-        try:
-            link = web.isgd(row["link"])
-        except (web.ShortenError, http.HTTPError, http.URLError):
-            link = row["link"]
+        link = web.try_shorten(row["link"])
         message("{} - {}".format(title, link))
 
 
diff --git a/plugins/shorten.py b/plugins/shorten.py
index f4bf685..a6aca70 100644
--- a/plugins/shorten.py
+++ b/plugins/shorten.py
@@ -1,27 +1,40 @@
 from cloudbot import hook, web
 
+
 @hook.command
-def isgd(text):
-    """isgd <url> [custom] - Shorten a url with is.gd. [custom] is an optional custom shortlink."""
-    args   = text.split()
-    url    = args[0]
+def shorten(text):
+    """shorten <url> [custom] - Shorten a url. [custom] is an optional custom shortlink."""
+    args = text.split()
+    url = args[0]
     custom = args[1] if len(args) > 1 else None
-    
-    isgd = web.Isgd()
+
     try:
-        return isgd.shorten(url, custom)
-    except web.ShortenError as e:
+        return web.shorten(url, custom=custom)
+    except web.ServiceError as e:
         return e.message
 
+
 @hook.command
 def gitio(text):
     """gitio <url> [custom] -- Shorten a Github url with git.io. [custom] is an optional custom shortlink."""
-    args   = text.split()
-    url    = args[0]
+    args = text.split()
+    url = args[0]
+    custom = args[1] if len(args) > 1 else None
+
+    try:
+        return web.shorten(url, service="git.io", custom=custom)
+    except web.ServiceError as e:
+        return e.message
+
+
+@hook.command
+def isgd(text):
+    """shorten <url> [custom] - Shorten a url with is.gd. [custom] is an optional custom shortlink."""
+    args = text.split()
+    url = args[0]
     custom = args[1] if len(args) > 1 else None
-    
-    gitio = web.Gitio()
+
     try:
-        return gitio.shorten(url, custom)
-    except web.ShortenError as e:
-        return e.message
\ No newline at end of file
+        return web.shorten(url, service="is.gd", custom=custom)
+    except web.ServiceError as e:
+        return e.message
diff --git a/plugins/soundcloud.py b/plugins/soundcloud.py
index bd13391..e65deaf 100644
--- a/plugins/soundcloud.py
+++ b/plugins/soundcloud.py
@@ -21,7 +21,7 @@ def soundcloud(url, api_key):
     else:
         genre = ""
 
-    url = web.try_isgd(data['permalink_url'])
+    url = web.try_shorten(data['permalink_url'])
 
     return "SoundCloud track: \x02{}\x02 by \x02{}\x02 {}{}- {} plays, {} downloads, {} comments - {}".format(
         data['title'], data['user']['username'], desc, genre, data['playback_count'], data['download_count'],
diff --git a/plugins/spotify.py b/plugins/spotify.py
index dcac6e5..cfc5f0c 100644
--- a/plugins/spotify.py
+++ b/plugins/spotify.py
@@ -28,7 +28,7 @@ def sptfy(inp, sptfy=False):
                 'class': 'messagebox_text'}).find('p').text.split("<br/>")[0])
             return message
     else:
-        return web.try_isgd(inp)
+        return web.try_shorten(inp)
 
 
 @hook.command('sptrack')
diff --git a/plugins/update.py b/plugins/update.py
index aae5258..d022172 100644
--- a/plugins/update.py
+++ b/plugins/update.py
@@ -12,7 +12,7 @@ def update():
     except Exception as e:
         return e
     if "\n" in pull:
-        return web.haste(pull)
+        return web.paste(pull)
     else:
         return pull
 
diff --git a/plugins/valvesounds.py b/plugins/valvesounds.py
index 9207350..7684d14 100644
--- a/plugins/valvesounds.py
+++ b/plugins/valvesounds.py
@@ -29,7 +29,7 @@ def get_sound_info(game, search):
     if len(items) == 1:
         return items[0]
     else:
-        return "{} (and {} others: {})".format(items[0], len(items) - 1, web.haste("\n".join(items)))
+        return "{} (and {} others: {})".format(items[0], len(items) - 1, web.paste("\n".join(items)))
 
 
 @hook.command
diff --git a/plugins/wolframalpha.py b/plugins/wolframalpha.py
index 303406f..71dc482 100644
--- a/plugins/wolframalpha.py
+++ b/plugins/wolframalpha.py
@@ -18,7 +18,7 @@ def wolframalpha(text, bot):
     # get the URL for a user to view this query in a browser
     query_url = "http://www.wolframalpha.com/input/?i=" + \
                 http.quote_plus(text.encode('utf-8'))
-    short_url = web.try_isgd(query_url)
+    short_url = web.try_shorten(query_url)
 
     pod_texts = []
     for pod in result.xpath("//pod[@primary='true']"):
diff --git a/plugins/yahooanswers.py b/plugins/yahooanswers.py
index b68ff0a..423f919 100644
--- a/plugins/yahooanswers.py
+++ b/plugins/yahooanswers.py
@@ -8,7 +8,7 @@ def answer(text):
     query = "SELECT Subject, ChosenAnswer, Link FROM answers.search WHERE query=@query LIMIT 1"
     result = web.query(query, {"query": text.strip()}).one()
 
-    short_url = web.try_isgd(result["Link"])
+    short_url = web.try_shorten(result["Link"])
 
     # we split the answer and .join() it to remove newlines/extra spaces
     answer_text = formatting.truncate_str(' '.join(result["ChosenAnswer"].split()), 80)
-- 
2.0.0

