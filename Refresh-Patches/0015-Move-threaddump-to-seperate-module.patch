From 919ca146bf720307b9a3f15d0462a9f456b7360a Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 12 May 2014 15:12:57 -0700
Subject: [PATCH] Move threaddump to seperate module


diff --git a/modules/profiling.py b/modules/profiling.py
index 07574f8..e0aea21 100644
--- a/modules/profiling.py
+++ b/modules/profiling.py
@@ -1,65 +1,15 @@
-import os
-import threading
-import traceback
-import sys
-import objgraph
 import gc
-from pympler import muppy, summary, tracker
-
-from util import hook, web
-
-
-def get_name(thread_id):
-    current_thread = threading.current_thread()
-    if thread_id == current_thread._ident:
-        is_current = True
-        thread = threading.current_thread()
-    else:
-        is_current = False
-        thread = threading._active.get(thread_id)
-
-    if thread is not None:
-        if thread.name is not None:
-            name = thread.name
-        else:
-            name = "Unnamed thread"
-    else:
-        name = "Unknown thread"
 
-    if is_current:
-        name += " - Current thread"
-
-    return name
-
-
-def get_thread_dump():
-    code = []
-    threads = [(get_name(thread_id), traceback.extract_stack(stack))
-               for thread_id, stack in sys._current_frames().items()]
-    current_dir = os.path.abspath(".")
-    for thread_name, stack in threads:
-        code.append("# {}".format(thread_name))
+import objgraph
+from pympler import muppy, summary, tracker
 
-        for filename, lineno, name, line in stack:
-            assert isinstance(filename, str)
-            if filename.startswith(current_dir):
-                filename = "." + filename[len(current_dir):]
-            elif filename.startswith("/usr/lib/python"):
-                # this is totally os-biased
-                filename = filename[len("/usr/lib/"):]
-            elif filename.startswith("/usr/local/lib/python"):
-                filename = filename[len("/usr/local/lib/"):]
-            code.append("{}:{} - {}".format(filename, lineno, name))
-            if line:
-                code.append("  {}".format(line.strip()))
-        code.append("")  # new line
-    return web.haste("\n".join(code), ext='txt')
+from util import hook, threaddump
 
 
 @hook.command(autohelp=False, permissions=["botcontrol"])
 def threaddump(reply):
     reply("Running thread dump")
-    return "Thread dump located at {}".format(get_thread_dump())
+    return "Thread dump located at {}".format(threaddump.get_thread_dump())
 
 
 @hook.command(autohelp=False, permissions=["botcontrol"])
@@ -86,6 +36,7 @@ def create_tracker():
     global tr
     tr = tracker.SummaryTracker()
 
+
 @hook.command(autohelp=False, permissions=["botcontrol"])
 def pympler_diff():
     print("Printing diff")
diff --git a/util/threaddump.py b/util/threaddump.py
new file mode 100644
index 0000000..a980ae6
--- /dev/null
+++ b/util/threaddump.py
@@ -0,0 +1,42 @@
+import threading
+import traceback
+import sys
+
+from util import web
+
+
+def get_name(thread_id):
+    current_thread = threading.current_thread()
+    if thread_id == current_thread._ident:
+        is_current = True
+        thread = current_thread
+    else:
+        is_current = False
+        thread = threading._active.get(thread_id)
+
+    if thread is not None:
+        if thread.name is not None:
+            name = thread.name
+        else:
+            name = "Unnamed thread"
+    else:
+        name = "Unknown thread"
+
+    if is_current:
+        name += " - Current thread"
+
+    return name
+
+
+def get_thread_dump():
+    code = []
+    threads = [(get_name(thread_id), traceback.extract_stack(stack))
+               for thread_id, stack in sys._current_frames().items()]
+    for thread_name, stack in threads:
+        code.append("# {}".format(thread_name))
+        for filename, lineno, name, line in stack:
+            code.append("{}:{} - {}".format(filename, lineno, name))
+            if line:
+                code.append("    {}".format(line.strip()))
+        code.append("")  # new line
+    return web.haste("\n".join(code), ext='txt')
-- 
1.9.3

