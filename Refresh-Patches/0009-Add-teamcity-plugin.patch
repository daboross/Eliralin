From 89e7304a44a9273bae6561536dc4f37f284d5b9f Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Sat, 18 Jan 2014 03:22:17 -0800
Subject: [PATCH] Add teamcity plugin


diff --git a/modules/eliralin_teamcity.py b/modules/eliralin_teamcity.py
new file mode 100644
index 0000000..2e5ecf1
--- /dev/null
+++ b/modules/eliralin_teamcity.py
@@ -0,0 +1,158 @@
+from xml.etree.ElementTree import ParseError
+import traceback
+from xml.etree import ElementTree
+import time
+
+import requests
+from requests.auth import HTTPBasicAuth
+
+from util import hook
+
+teamcity_url = "http://ci.daboross.net/ci"
+
+
+class ProjectDatabase:
+    def __init__(self):
+        self.reload_timestamp = 0
+        self.projects = []
+        self.username = "default"
+        self.password = "default"
+        self.teamcity_url = teamcity_url
+        self.loaded_key = False
+
+    def download(self, url):
+        if url.startswith("/httpAuth"):
+            data = requests.get(self.teamcity_url + url, auth=HTTPBasicAuth(self.username, self.password)).text
+        elif url.startswith("/guestAuth"):
+            data = requests.get(self.teamcity_url + url).text
+        elif self.loaded_key:
+            data = requests.get("{}/httpAuth{}".format(self.teamcity_url, url),
+                                auth=HTTPBasicAuth(self.username, self.password)).text
+        else:
+            data = requests.get("{}/guestAuth{}".format(self.teamcity_url, url)).text
+        try:
+            return ElementTree.fromstring(data)
+        except ParseError:
+            print("Error loading {} ({})".format(url, data))
+            raise
+
+    def load_key(self, bot):
+        if not self.loaded_key:
+            api_keys = bot.config.get("api_keys", None)
+            if api_keys:
+                self.username = api_keys.get("teamcity_username")
+                self.password = api_keys.get("teamcity_password")
+                self.loaded_key = True
+            else:
+                print("Warning, couldn't find teamcity api key")
+
+    def reload_database(self):
+        self.reload_timestamp = time.time()
+        self.projects = []
+        root = self.download("/app/rest/projects")
+        for project in root:
+            if project.get("id") != "_Root":
+                self.projects.append(Project(project))
+
+    def ensure_loaded(self, bot=None):
+        if bot and not self.loaded_key:
+            self.load_key(bot)
+        if self.reload_timestamp == 0:
+            self.reload_database()
+
+    def after_check(self):
+        if time.time() > self.reload_timestamp + 300:
+            self.reload_database()
+
+
+class Project:
+    def __init__(self, project):
+        self.name = project.get("name")
+        self.project_id = project.get("id")
+        self.project_url = project.get("href")
+        self.downloads = []
+        project_element = database.download(self.project_url)
+        build_types = project_element.find("buildTypes")
+        if build_types and len(build_types) > 0:
+            for build_type in build_types.findall("buildType"):
+                download = find_download_url(build_type)
+                if download:
+                    self.downloads.append(download)
+
+        self.search_name = self.name.lower()
+        self.search_id = self.project_id.lower()
+
+    def search(self, search):
+        if search == self.search_name or search == self.search_id:
+            return 2
+        elif search in self.search_name or search in self.search_id:
+            return 1
+        return 0
+
+
+def find_download_url(build_type_element):
+    try:
+        build_type_id = build_type_element.get("id")
+        href = build_type_element.get("href")
+        builds_url = database.download(href).find("builds").get("href")
+        build_url = database.download(builds_url).find("build").get("href")
+        artifacts_url = database.download(build_url).find("artifacts").get("href")
+        files = database.download(artifacts_url).findall("file")
+        filenames = [download_file.get("name") for download_file in files]
+        return {"id": build_type_id, "files": filenames}
+    except AttributeError:
+        traceback.print_exc()
+        return None
+    except ParseError:
+        traceback.print_exc()
+        return None
+
+
+database = ProjectDatabase()
+
+
+@hook.command(["teamcity", "ci"])
+def teamcity(inp, bot, reply, message):
+    """teamcity [project] - Searches for project on teamcity, and displays project URL and download"""
+    database.ensure_loaded(bot=bot)
+    search = inp.lower()
+    level_found = 0
+    project_found = None
+    other_matches = []
+    for project in database.projects:
+        level = project.search(search)
+        if level > level_found:
+            if project_found:
+                other_matches.append(project_found.name)
+            project_found = project
+            level_found = level
+        elif level > 0:
+            other_matches.append(project.name)
+
+    if project_found is not None:
+        reply("{} - Project: http://ci.daboross.net/p/{}".format(project_found.name, project_found.project_id))
+        for download in project_found.downloads:
+            for download_file in download["files"]:
+                message("Download: http://ci.daboross.net/d/{}/{}".format(download["id"], download_file))
+        if len(other_matches) > 0:
+            message("(Other matches: {})".format(", ".join(other_matches)))
+    else:
+        reply("No projects found matching '{}'".format(inp))
+    database.after_check()
+
+
+@hook.command(["reloadci", "reload_teamcity"], permissions=["botcontrol"], autohelp=False)
+def reload_teamcity(bot, reply):
+    """reloadci - Reloads teamcity database manually"""
+    database.load_key(bot)
+    database.reload_database()
+    reply("Reloaded teamcity, found {} projects.".format(len(database.projects)))
+    database.after_check()
+
+
+@hook.command(["listci", "list_teamcity"], permissions=["botcontrol"], autohelp=False)
+def list_teamcity(bot, reply):
+    """listci - Lists all projects loaded into database from teamcity"""
+    database.ensure_loaded(bot=bot)
+    reply("Projects: {}".format(", ".join([project.name for project in database.projects])))
+    database.after_check()
-- 
1.9.2

