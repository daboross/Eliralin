From bc1641508604f3502fb85d5f7b8fd0189f7923fb Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 12 May 2014 15:37:52 -0700
Subject: [PATCH] Test files


diff --git a/oldtest.py b/oldtest.py
new file mode 100755
index 0000000..58d0e27
--- /dev/null
+++ b/oldtest.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3.4
+import asyncio
+from util import threaddump
+
+
+@asyncio.coroutine
+def run_queue_thing():
+    q = asyncio.Queue()
+    yield from q.get()
+
+
+@asyncio.coroutine
+def wait_for_future(future):
+    print("Waiting for {}".format(future))
+    result = yield from future
+    print("Result {}".format(result))
+
+
+@asyncio.coroutine
+def main_loop():
+    print("Statement 1")
+    yield from asyncio.sleep(0.1)
+    print("Statement 2")
+    future = asyncio.async(run_queue_thing())
+    future2 = asyncio.async(wait_for_future(future))
+    print("Statement 3")
+    yield from asyncio.sleep(0.1)
+    future.cancel()
+    print("Statement 4")
+    yield from asyncio.sleep(0.1)
+    print("Final: {}, {}".format(future, future2))
+    print(threaddump.get_thread_dump())
+
+
+@asyncio.coroutine
+def get_the_things():
+    return 4
+
+
+@asyncio.coroutine
+def get_the_things2():
+    yield from asyncio.sleep(0.1)
+    return 4
+
+
+@asyncio.coroutine
+def second_test():
+    a = yield from get_the_things()
+    print("1: {}".format(a))
+    a = yield from get_the_things2()
+    print("2: {}".format(a))
+
+
+def main():
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(second_test())
+
+
+if __name__ == "__main__":
+    main()
diff --git a/test.py b/test.py
new file mode 100755
index 0000000..d1f423c
--- /dev/null
+++ b/test.py
@@ -0,0 +1,31 @@
+#!/usr/bin/env python3.4
+import asyncio
+import traceback
+
+
+@asyncio.coroutine
+def get(queue):
+    try:
+        # Get the message from the queue
+        yield from queue.get()
+    except Exception:
+        # This is just to show the exception stacktrace
+        traceback.print_exc()
+
+
+@asyncio.coroutine
+def main_loop():
+    queue = asyncio.Queue()
+
+    asyncio.async(get(queue))
+
+    # Add a pair of placeholder values.
+    asyncio.async(queue.put((asyncio.Future(), None)))
+
+    # We need to let this function sleep, so the event loop can process the get() method
+    yield from asyncio.sleep(0.5)
+
+
+if __name__ == "__main__":
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(main_loop())
-- 
1.9.3

