From 173553ca12f99bac51505648b11bc1b778f7dec2 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Tue, 10 Jun 2014 16:35:24 -0700
Subject: [PATCH] Rename event.irc_message to event.content. This also only
 sets event.context if the IRC command is PRIVMSG. This allows for checking if
 an event is a message without relying on irc_* params, and anyways plugins
 can use event.irc_paramlist[-1] if they want the last param for non-message
 events.


diff --git a/cloudbot/core/bot.py b/cloudbot/core/bot.py
index 5788ff6..8bdc59e 100644
--- a/cloudbot/core/bot.py
+++ b/cloudbot/core/bot.py
@@ -210,14 +210,14 @@ class CloudBot:
             for raw_hook in self.plugin_manager.raw_triggers[event.irc_command]:
                 tasks.append(self.plugin_manager.launch(raw_hook, BaseEvent(bot=self, hook=raw_hook, base_event=event)))
 
-        if event.irc_command == 'PRIVMSG':
+        if event.content is not None:
             # Commands
             if event.chan.lower() == event.nick.lower():  # private message, no command prefix
                 command_re = r'(?i)^(?:[{}]?|{}[,;:]+\s+)(\w+)(?:$|\s+)(.*)'.format(command_prefix, event.conn.nick)
             else:
                 command_re = r'(?i)^(?:[{}]|{}[,;:]+\s+)(\w+)(?:$|\s+)(.*)'.format(command_prefix, event.conn.nick)
 
-            match = re.match(command_re, event.irc_message)
+            match = re.match(command_re, event.content)
 
             if match:
                 command = match.group(1).lower()
@@ -243,7 +243,7 @@ class CloudBot:
 
             # Regex hooks
             for regex, regex_hook in self.plugin_manager.regex_hooks:
-                match = regex.search(event.irc_message)
+                match = regex.search(event.content)
                 if match:
                     regex_event = RegexEvent(bot=self, hook=regex_hook, match=match, base_event=event)
                     tasks.append(self.plugin_manager.launch(regex_hook, regex_event))
diff --git a/cloudbot/core/connection.py b/cloudbot/core/connection.py
index 64bb737..b47c387 100644
--- a/cloudbot/core/connection.py
+++ b/cloudbot/core/connection.py
@@ -361,23 +361,23 @@ class IRCProtocol(asyncio.Protocol):
 
             command_params = irc_param_re.findall(params)
 
+            content = None
             if command_params:
-                # If the last param is in the format of `:message text` remove the `:` from it, so that it is just the content.
+                # If the last param is in the format of `:content` remove the `:` from it, and set content equal to it
                 if command_params[-1].startswith(":"):
                     command_params[-1] = command_params[-1][1:]
-                irc_message_content = command_params[-1]
-            else:
-                irc_message_content = None
+                    # we should only set content for regular user messages
+                    if command == "PRIVMSG":
+                        content = command_params[-1]
 
             # Reply to pings immediately
             if command == "PING":
-                asyncio.async(self.send("PONG :" + irc_message_content))
+                asyncio.async(self.send("PONG :" + command_params[-1]))
 
             # Set up parsed message
             # TODO: Do we really want to send the raw `prefix` and `command_params` here?
             event = BaseEvent(conn=self.botconn, irc_raw=line, irc_prefix=prefix, irc_command=command,
-                              irc_paramlist=command_params, irc_message=irc_message_content, nick=nick, user=user,
-                              host=host,
+                              irc_paramlist=command_params, content=content, nick=nick, user=user, host=host,
                               mask=mask)
 
             # handle the message, async
diff --git a/cloudbot/core/events.py b/cloudbot/core/events.py
index 2f5324c..bcf574b 100644
--- a/cloudbot/core/events.py
+++ b/cloudbot/core/events.py
@@ -10,23 +10,26 @@ class BaseEvent:
     :type bot: cloudbot.core.bot.CloudBot
     :type conn: cloudbot.core.connection.BotConnection
     :type hook: cloudbot.core.pluginmanager.Hook
+    :type content: str
     :type nick: str
     :type user: str
     :type host: str
     :type mask: str
     :type db: sqlalchemy.orm.Session
     :type db_executor: concurrent.futures.ThreadPoolExecutor
-    :type irc_message: str
     :type irc_raw: str
     :type irc_prefix: str
     :type irc_command: str
     :type irc_paramlist: str
     """
 
-    def __init__(self, *, bot=None, hook=None, conn=None, base_event=None, irc_message=None, nick=None, user=None,
-                 host=None, mask=None, irc_raw=None, irc_prefix=None, irc_command=None, irc_paramlist=None):
+    def __init__(self, bot=None, conn=None, hook=None, base_event=None, content=None, irc_raw=None, irc_prefix=None,
+                 irc_command=None, irc_paramlist=None, nick=None, user=None, host=None, mask=None):
         """
-        All of these parameters except for *bot* and *hook* are optional, *bot* may be left out when using base_event.
+        All of these parameters except for `bot` and `hook` are optional.
+        The irc_* parameters should only be specified for IRC events.
+
+        Note that the `bot` argument may be left out if you specify a `base_event`.
 
         :param bot: The CloudBot instance this event was triggered from
         :param conn: The Connection instance this event was triggered from
@@ -37,21 +40,21 @@ class BaseEvent:
         :param user: The user of the sender that triggered this event
         :param host: The host of the sender that triggered this event
         :param mask: The mask of the sender that triggered this event (nick!user@host)
+        :param content: The content of the message, or the reason for an join or part
         :param irc_raw: The raw IRC line
         :param irc_prefix: The raw IRC prefix
         :param irc_command: The IRC command
         :param irc_paramlist: The list of params for the IRC command. If the last param is a content param, the ':'
                                 should be removed from the front.
-        :param irc_message: The content of the message, or the reason for an join or part
         :type bot: cloudbot.core.bot.CloudBot
         :type conn: cloudbot.core.connection.BotConnection
         :type hook: cloudbot.core.pluginmanager.Hook
         :type base_event: cloudbot.core.events.BaseEvent
+        :type content: str
         :type nick: str
         :type user: str
         :type host: str
         :type mask: str
-        :type irc_message: str
         :type irc_raw: str
         :type irc_prefix: str
         :type irc_command: str
@@ -62,6 +65,7 @@ class BaseEvent:
         self.bot = bot
         self.conn = conn
         self.hook = hook
+        self.content = content
         if base_event is not None:
             # We're copying an event, so inherit values
             if self.bot is None and base_event.bot is not None:
@@ -70,20 +74,20 @@ class BaseEvent:
                 self.conn = base_event.conn
             if self.hook is None and base_event.hook is not None:
                 self.hook = base_event.hook
+            if self.content is None and base_event.content is not None:
+                self.content = base_event.content
 
             # inherit nick/usr/host/mask/irc_* without checking internal values, as we always want to inherit these
             self.nick = base_event.nick
             self.user = base_event.user
             self.host = base_event.host
             self.mask = base_event.mask
-            self.irc_message = base_event.irc_message
             self.irc_raw = base_event.irc_raw
             self.irc_prefix = base_event.irc_prefix
             self.irc_command = base_event.irc_command
             self.irc_paramlist = base_event.irc_paramlist
         else:
             # if we're not inheriting an event, we can take these parameters
-            self.irc_message = irc_message
             self.irc_raw = irc_raw
             self.irc_prefix = irc_prefix
             self.irc_command = irc_command
@@ -301,7 +305,7 @@ class CommandEvent(BaseEvent):
     :type triggered_command: str
     """
 
-    def __init__(self, *, bot=None, hook, text, triggered_command, conn=None, base_event=None, irc_message=None,
+    def __init__(self, *, bot=None, hook, text, triggered_command, conn=None, base_event=None, content=None,
                  nick=None, user=None, host=None, mask=None, irc_raw=None, irc_prefix=None, irc_command=None,
                  irc_paramlist=None):
         """
@@ -310,9 +314,9 @@ class CommandEvent(BaseEvent):
         :type text: str
         :type triggered_command: str
         """
-        super().__init__(bot=bot, hook=hook, conn=conn, base_event=base_event, nick=nick, user=user, host=host,
-                         mask=mask, irc_message=irc_message, irc_raw=irc_raw, irc_prefix=irc_prefix,
-                         irc_command=irc_command, irc_paramlist=irc_paramlist)
+        super().__init__(bot=bot, hook=hook, conn=conn, base_event=base_event, content=content, nick=nick, user=user,
+                         host=host, mask=mask, irc_raw=irc_raw, irc_prefix=irc_prefix, irc_command=irc_command,
+                         irc_paramlist=irc_paramlist)
         self.hook = hook
         self.text = text
         self.triggered_command = triggered_command
@@ -337,13 +341,13 @@ class RegexEvent(BaseEvent):
     :type match: re.__Match
     """
 
-    def __init__(self, *, bot=None, hook, match, conn=None, base_event=None, irc_message=None, nick=None, user=None,
+    def __init__(self, *, bot=None, hook, match, conn=None, base_event=None, content=None, nick=None, user=None,
                  host=None, mask=None, irc_raw=None, irc_prefix=None, irc_command=None, irc_paramlist=None):
         """
         :param: match: The match objected returned by the regex search method
         :type match: re.__Match
         """
-        super().__init__(bot=bot, conn=conn, hook=hook, base_event=base_event, nick=nick, user=user, host=host,
-                         mask=mask, irc_message=irc_message, irc_raw=irc_raw, irc_prefix=irc_prefix,
-                         irc_command=irc_command, irc_paramlist=irc_paramlist)
+        super().__init__(bot=bot, hook=hook, conn=conn, base_event=base_event, content=content, nick=nick, user=user,
+                         host=host, mask=mask, irc_raw=irc_raw, irc_prefix=irc_prefix, irc_command=irc_command,
+                         irc_paramlist=irc_paramlist)
         self.match = match
diff --git a/plugins/history.py b/plugins/history.py
index 8f09019..4865ffc 100644
--- a/plugins/history.py
+++ b/plugins/history.py
@@ -27,13 +27,9 @@ def track_seen(event, db, conn):
     """
     db_init(db, conn)
     # keep private messages private
-    if event.chan[:1] == "#" and not re.findall('^s/.*/.*/$', event.irc_message.lower()):
-        db.execute("insert or replace into seen_user(name, time, quote, chan, host)"
-                   "values(:name,:time,:quote,:chan,:host)", {'name': event.nick.lower(),
-                                                              'time': time.time(),
-                                                              'quote': event.irc_message,
-                                                              'chan': event.chan,
-                                                              'host': event.mask})
+    if event.chan[:1] == "#" and not re.findall('^s/.*/.*/$', event.content.lower()):
+        db.execute("insert or replace into seen_user(name, time, quote, chan, host) values(:name,:time,:quote,:chan,:host)",
+                   {'name': event.nick.lower(), 'time': time.time(), 'quote': event.content, 'chan': event.chan, 'host': event.mask})
         db.commit()
 
 
@@ -48,7 +44,7 @@ def track_history(event, message_time, conn):
         conn.history[event.chan] = deque(maxlen=100)
         history = conn.history[event.chan]
 
-    data = (event.nick, message_time, event.irc_message)
+    data = (event.nick, message_time, event.content)
     history.append(data)
 
 
diff --git a/plugins/ignore.py b/plugins/ignore.py
index fed4128..61cedd8 100644
--- a/plugins/ignore.py
+++ b/plugins/ignore.py
@@ -35,7 +35,7 @@ def ignore_sieve(bot, event, _hook):
         return event
 
     # don't block an event that could be unignoring
-    if event.irc_command == "PRIVMSG" and event.irc_message[1:] == "unignore":
+    if event.content is not None and event.content[1:] == "unignore":
         return event
 
     if event.mask is None:
diff --git a/plugins/log.py b/plugins/log.py
index 6522fba..d3390c3 100644
--- a/plugins/log.py
+++ b/plugins/log.py
@@ -69,7 +69,7 @@ def beautify(event):
 
     args = {
         "server": event.conn.readable_name, "param_tail": " ".join(event.irc_paramlist[1:]),
-        "message": irc_color_re.sub("", event.irc_message), "nick": event.nick, "chan": event.chan,
+        "message": irc_color_re.sub("", event.content or event.irc_paramlist[-1]), "nick": event.nick, "chan": event.chan,
         "user": event.user, "host": event.host
     }
 
@@ -78,8 +78,8 @@ def beautify(event):
         args["param" + str(n)] = p
         args["param_" + str(abs(n - _len))] = p
 
-    if event.irc_command == "PRIVMSG" and event.irc_message.count("\x01") >= 2:
-        ctcp_split = event.irc_message.split("\x01", 2)[1].split(' ', 1)
+    if event.content is not None and event.content.count("\x01") >= 2:
+        ctcp_split = event.content.split("\x01", 2)[1].split(' ', 1)
 
         args["ctcpcmd"] = ctcp_split[0]
         if len(ctcp_split) < 2:
diff --git a/plugins/tell.py b/plugins/tell.py
index 046e2b9..8a8e5e1 100644
--- a/plugins/tell.py
+++ b/plugins/tell.py
@@ -77,7 +77,7 @@ def tellinput(event, conn, db, nick, notice):
     :type conn: cloudbot.core.connection.BotConnection
     :type db: sqlalchemy.orm.Session
     """
-    if 'showtells' in event.irc_message.lower():
+    if 'showtells' in event.content.lower():
         return
 
     tells = get_unread(db, conn.server, nick)
-- 
2.0.0

