From 06e8da94f237174e3ee92f44e4d90076041edb5f Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Fri, 20 Jun 2014 14:10:21 -0500
Subject: [PATCH] Rename BaseEvent to Event


diff --git a/cloudbot/bot.py b/cloudbot/bot.py
index a7eead2..4b93f48 100644
--- a/cloudbot/bot.py
+++ b/cloudbot/bot.py
@@ -14,7 +14,7 @@ from cloudbot.client import Client
 from cloudbot.config import Config
 from cloudbot.reloader import PluginReloader
 from cloudbot.plugin import PluginManager
-from cloudbot.event import BaseEvent, CommandEvent, RegexEvent, EventType
+from cloudbot.event import Event, CommandEvent, RegexEvent, EventType
 from cloudbot.util import botvars, formatting
 from cloudbot.clients.irc import IrcClient
 
@@ -192,7 +192,7 @@ class CloudBot:
     @asyncio.coroutine
     def process(self, event):
         """
-        :type event: BaseEvent
+        :type event: Event
         """
         run_before_tasks = []
         tasks = []
@@ -203,17 +203,17 @@ class CloudBot:
             # run catch-all coroutine hooks before all others - TODO: Make this a plugin argument
             if not raw_hook.threaded:
                 run_before_tasks.append(
-                    self.plugin_manager.launch(raw_hook, BaseEvent(hook=raw_hook, base_event=event)))
+                    self.plugin_manager.launch(raw_hook, Event(hook=raw_hook, base_event=event)))
             else:
-                tasks.append(self.plugin_manager.launch(raw_hook, BaseEvent(hook=raw_hook, base_event=event)))
+                tasks.append(self.plugin_manager.launch(raw_hook, Event(hook=raw_hook, base_event=event)))
         if event.irc_command in self.plugin_manager.raw_triggers:
             for raw_hook in self.plugin_manager.raw_triggers[event.irc_command]:
-                tasks.append(self.plugin_manager.launch(raw_hook, BaseEvent(hook=raw_hook, base_event=event)))
+                tasks.append(self.plugin_manager.launch(raw_hook, Event(hook=raw_hook, base_event=event)))
 
         # Event hooks
         if event.type in self.plugin_manager.event_type_hooks:
             for event_hook in self.plugin_manager.event_type_hooks[event.type]:
-                tasks.append(self.plugin_manager.launch(event_hook, BaseEvent(hook=event_hook, base_event=event)))
+                tasks.append(self.plugin_manager.launch(event_hook, Event(hook=event_hook, base_event=event)))
 
         if event.type is EventType.message:
             # Commands
diff --git a/cloudbot/clients/irc.py b/cloudbot/clients/irc.py
index 3c8b1a4..27ecfe1 100644
--- a/cloudbot/clients/irc.py
+++ b/cloudbot/clients/irc.py
@@ -6,7 +6,7 @@ import logging
 from ssl import SSLContext
 
 from cloudbot.client import Client
-from cloudbot.event import BaseEvent, EventType
+from cloudbot.event import Event, EventType
 
 logger = logging.getLogger("cloudbot")
 
@@ -369,10 +369,9 @@ class _IrcProtocol(asyncio.Protocol):
 
             # Set up parsed message
             # TODO: Do we really want to send the raw `prefix` and `command_params` here?
-            event = BaseEvent(bot=self.bot, conn=self.conn, event_type=event_type, content=content, target=target,
-                              channel=channel, nick=nick, user=user, host=host, mask=mask, irc_raw=line,
-                              irc_prefix=prefix, irc_command=command, irc_paramlist=command_params,
-                              irc_ctcp_text=ctcp_text)
+            event = Event(bot=self.bot, conn=self.conn, event_type=event_type, content=content, target=target,
+                          channel=channel, nick=nick, user=user, host=host, mask=mask, irc_raw=line, irc_prefix=prefix,
+                          irc_command=command, irc_paramlist=command_params, irc_ctcp_text=ctcp_text)
 
             # handle the message, async
             asyncio.async(self.bot.process(event), loop=self.loop)
diff --git a/cloudbot/event.py b/cloudbot/event.py
index 531911c..f35b1e6 100644
--- a/cloudbot/event.py
+++ b/cloudbot/event.py
@@ -18,7 +18,7 @@ class EventType(enum.Enum):
     other = 6
 
 
-class BaseEvent:
+class Event:
     """
     :type bot: cloudbot.bot.CloudBot
     :type conn: cloudbot.client.Client
@@ -71,7 +71,7 @@ class BaseEvent:
         :type bot: cloudbot.bot.CloudBot
         :type conn: cloudbot.client.Client
         :type hook: cloudbot.plugin.Hook
-        :type base_event: cloudbot.event.BaseEvent
+        :type base_event: cloudbot.event.Event
         :type content: str
         :type target: str
         :type event_type: EventType
@@ -209,7 +209,7 @@ class BaseEvent:
     @property
     def event(self):
         """
-        :rtype: BaseEvent
+        :rtype: Event
         """
         return self
 
@@ -311,7 +311,7 @@ class BaseEvent:
         return result
 
 
-class CommandEvent(BaseEvent):
+class CommandEvent(Event):
     """
     :type hook: cloudbot.plugin.CommandHook
     :type text: str
@@ -354,7 +354,7 @@ class CommandEvent(BaseEvent):
         self.notice(message, target=target)
 
 
-class RegexEvent(BaseEvent):
+class RegexEvent(Event):
     """
     :type hook: cloudbot.plugin.RegexHook
     :type match: re.__Match
diff --git a/cloudbot/plugin.py b/cloudbot/plugin.py
index d779bd5..e6719b8 100644
--- a/cloudbot/plugin.py
+++ b/cloudbot/plugin.py
@@ -8,7 +8,7 @@ import re
 
 import sqlalchemy
 
-from cloudbot import event
+from cloudbot.event import Event
 from cloudbot.util import botvars
 
 logger = logging.getLogger("cloudbot")
@@ -159,7 +159,7 @@ class PluginManager:
 
         # run onload hooks
         for onload_hook in plugin.run_on_load:
-            success = yield from self.launch(onload_hook, event.BaseEvent(bot=self.bot, hook=onload_hook))
+            success = yield from self.launch(onload_hook, Event(bot=self.bot, hook=onload_hook))
             if not success:
                 logger.warning("Not registering hooks from plugin {}: onload hook errored".format(plugin.title))
 
@@ -299,7 +299,7 @@ class PluginManager:
         Prepares arguments for the given hook
 
         :type hook: cloudbot.plugin.Hook
-        :type event: cloudbot.event.BaseEvent
+        :type event: cloudbot.event.Event
         :rtype: list
         """
         parameters = []
@@ -317,7 +317,7 @@ class PluginManager:
     def _execute_hook_threaded(self, hook, event):
         """
         :type hook: Hook
-        :type event: cloudbot.event.BaseEvent
+        :type event: cloudbot.event.Event
         """
         event.prepare_threaded()
 
@@ -334,7 +334,7 @@ class PluginManager:
     def _execute_hook_sync(self, hook, event):
         """
         :type hook: Hook
-        :type event: cloudbot.event.BaseEvent
+        :type event: cloudbot.event.Event
         """
         yield from event.prepare()
 
@@ -355,7 +355,7 @@ class PluginManager:
         Returns False if the hook errored, True otherwise.
 
         :type hook: cloudbot.plugin.Hook
-        :type event: cloudbot.event.BaseEvent
+        :type event: cloudbot.event.Event
         :rtype: bool
         """
         try:
@@ -383,9 +383,9 @@ class PluginManager:
     def _sieve(self, sieve, event, hook):
         """
         :type sieve: cloudbot.plugin.Hook
-        :type event: cloudbot.event.BaseEvent
+        :type event: cloudbot.event.Event
         :type hook: cloudbot.plugin.Hook
-        :rtype: cloudbot.event.BaseEvent
+        :rtype: cloudbot.event.Event
         """
         try:
             if sieve.threaded:
@@ -405,7 +405,7 @@ class PluginManager:
 
         Returns False if the hook didn't run successfully, and True if it ran successfully.
 
-        :type event: cloudbot.event.BaseEvent | cloudbot.event.CommandEvent
+        :type event: cloudbot.event.Event | cloudbot.event.CommandEvent
         :type hook: cloudbot.plugin.Hook | cloudbot.plugin.CommandHook
         :rtype: bool
         """
diff --git a/plugins/core_sieve.py b/plugins/core_sieve.py
index b95a659..64b72b9 100644
--- a/plugins/core_sieve.py
+++ b/plugins/core_sieve.py
@@ -14,7 +14,7 @@ buckets = {}
 def sieve_suite(bot, event, _hook):
     """
     :type bot: cloudbot.bot.CloudBot
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type _hook: cloudbot.plugin.Hook
     """
     conn = event.conn
diff --git a/plugins/history.py b/plugins/history.py
index 0c27e30..c0b46c9 100644
--- a/plugins/history.py
+++ b/plugins/history.py
@@ -23,7 +23,7 @@ def db_init(db, conn_name):
 
 def track_seen(event, db, conn):
     """ Tracks messages for the .seen command
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type db: sqlalchemy.orm.Session
     :type conn: cloudbot.client.Client
     """
@@ -37,7 +37,7 @@ def track_seen(event, db, conn):
 
 def track_history(event, message_time, conn):
     """
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type conn: cloudbot.client.Client
     """
     try:
@@ -54,7 +54,7 @@ def track_history(event, message_time, conn):
 def chat_tracker(event, db, conn):
     """
     :type db: sqlalchemy.orm.Session
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type conn: cloudbot.client.Client
     """
     message_time = time.time()
@@ -66,7 +66,7 @@ def chat_tracker(event, db, conn):
 @hook.command(autohelp=False)
 def resethistory(event, conn):
     """- resets chat history for the current channel
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type conn: cloudbot.client.Client
     """
     try:
@@ -81,7 +81,7 @@ def resethistory(event, conn):
 def seen(text, nick, chan, db, event, conn):
     """<nick> <channel> - tells when a nickname was last in active in one of my channels
     :type db: sqlalchemy.orm.Session
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type conn: cloudbot.client.Client
     """
 
diff --git a/plugins/ignore.py b/plugins/ignore.py
index 9f729cc..0372144 100644
--- a/plugins/ignore.py
+++ b/plugins/ignore.py
@@ -28,7 +28,7 @@ def ensure_ignored(bot):
 def ignore_sieve(bot, event, _hook):
     """ blocks events from ignored channels/hosts
     :type bot: cloudbot.bot.CloudBot
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type _hook: cloudbot.plugin.Hook
     """
     # don't block event hooks
diff --git a/plugins/log.py b/plugins/log.py
index d7e8c37..6eea19c 100644
--- a/plugins/log.py
+++ b/plugins/log.py
@@ -48,7 +48,7 @@ ctcp_unknown_with_message = ("[{server}:{channel}] {nick} [{user}@{host}] "
 def format_event(event):
     """
     Format an event
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :rtype: str
     """
 
@@ -202,7 +202,7 @@ def get_raw_log_stream(server):
 @hook.irc_raw("*", singlethread=True)
 def log_raw(event):
     """
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     """
     logging_config = event.bot.config.get("logging", {})
     if not logging_config.get("raw_file_log", False):
@@ -214,7 +214,7 @@ def log_raw(event):
 @hook.irc_raw("*", singlethread=True)
 def log(event):
     """
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     """
     text = format_event(event)
 
@@ -229,7 +229,7 @@ def log(event):
 def console_log(bot, event):
     """
     :type bot: cloudbot.bot.CloudBot
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     """
     text = format_event(event)
     if text is not None:
diff --git a/plugins/tell.py b/plugins/tell.py
index 1b00656..a3686c7 100644
--- a/plugins/tell.py
+++ b/plugins/tell.py
@@ -75,7 +75,7 @@ def add_tell(db, server, sender, target, message):
 @hook.event(EventType.message, singlethread=True)
 def tellinput(event, conn, db, nick, notice):
     """
-    :type event: cloudbot.event.BaseEvent
+    :type event: cloudbot.event.Event
     :type conn: cloudbot.client.Client
     :type db: sqlalchemy.orm.Session
     """
-- 
2.0.0

