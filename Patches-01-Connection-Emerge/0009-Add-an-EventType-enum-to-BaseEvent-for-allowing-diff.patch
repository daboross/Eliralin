From 0bc18b5e5b2d27e698083e9a0255c5a01506fc5c Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Mon, 16 Jun 2014 22:55:47 -0700
Subject: [PATCH] Add an EventType enum to BaseEvent for allowing different
 events (JOIN, PART, MESSAGE, KICK, NOTICE) to be separated in a
 non-IRC-specific manner, not relying on irc_command


diff --git a/cloudbot/core/bot.py b/cloudbot/core/bot.py
index 5c267e7..173fc62 100644
--- a/cloudbot/core/bot.py
+++ b/cloudbot/core/bot.py
@@ -14,7 +14,7 @@ from cloudbot.core.connection import Connection, IrcConnection
 from cloudbot.core.config import Config
 from cloudbot.core.reloader import PluginReloader
 from cloudbot.core.pluginmanager import PluginManager
-from cloudbot.core.events import BaseEvent, CommandEvent, RegexEvent
+from cloudbot.core.events import BaseEvent, CommandEvent, RegexEvent, EventType
 from cloudbot.util import botvars, formatting
 
 logger = logging.getLogger("cloudbot")
@@ -209,7 +209,7 @@ class CloudBot:
             for raw_hook in self.plugin_manager.raw_triggers[event.irc_command]:
                 tasks.append(self.plugin_manager.launch(raw_hook, BaseEvent(hook=raw_hook, base_event=event)))
 
-        if event.content is not None:
+        if event.type is EventType.message:
             # Commands
             if event.chan.lower() == event.nick.lower():  # private message, no command prefix
                 command_re = r'(?i)^(?:[{}]?|{}[,;:]+\s+)(\w+)(?:$|\s+)(.*)'.format(command_prefix, event.conn.nick)
diff --git a/cloudbot/core/connection.py b/cloudbot/core/connection.py
index f5a3d14..eafce15 100644
--- a/cloudbot/core/connection.py
+++ b/cloudbot/core/connection.py
@@ -6,7 +6,7 @@ import logging
 from ssl import SSLContext
 
 from cloudbot.core.permissions import PermissionManager
-from cloudbot.core.events import BaseEvent
+from cloudbot.core.events import BaseEvent, EventType
 
 logger = logging.getLogger("cloudbot")
 
@@ -15,6 +15,14 @@ irc_noprefix_re = re.compile(r"([^ ]*) (.*)")
 irc_netmask_re = re.compile(r"([^!@]*)!([^@]*)@(.*)")
 irc_param_re = re.compile(r"(?:^|(?<= ))(:.*|[^ ]+)")
 
+irc_command_to_event_type = {
+    "PRIVMSG": EventType.message,
+    "JOIN": EventType.join,
+    "PART": EventType.part,
+    "KICK": EventType.kick,
+    "NOTICE": EventType.notice
+}
+
 
 class Connection:
     """
@@ -311,6 +319,12 @@ class IrcConnection(Connection):
 
 
 class _IrcProtocol(asyncio.Protocol):
+    """
+    :type loop: asyncio.events.AbstractEventLoop
+    :type bot: cloudbot.core.bot.CloudBot
+    :type conn: cloudbot.core.connection.Connection
+    :type _input_buffer: bytes
+    """
     def __init__(self, conn):
         """
         :type conn: IrcConnection
@@ -365,6 +379,9 @@ class _IrcProtocol(asyncio.Protocol):
         self.transport.write(data)
 
     def data_received(self, data):
+        """
+        :type data: bytes
+        """
         self._input_buffer += data
 
         while b"\r\n" in self._input_buffer:
@@ -409,23 +426,62 @@ class _IrcProtocol(asyncio.Protocol):
 
             command_params = irc_param_re.findall(params)
 
-            content = None
-            if command_params:
-                # If the last param is in the format of `:content` remove the `:` from it, and set content equal to it
-                if command_params[-1].startswith(":"):
-                    command_params[-1] = command_params[-1][1:]
-                    # we should only set content for regular user messages
-                    if command == "PRIVMSG":
-                        content = command_params[-1]
-
             # Reply to pings immediately
+
             if command == "PING":
-                asyncio.async(self.send("PONG :" + command_params[-1]), loop=self.loop)
+                asyncio.async(self.send("PONG " + command_params[-1]), loop=self.loop)
+
+            # Parse the command and params
+
+            # Content
+            if command_params and command_params[-1].startswith(":"):
+                # If the last param is in the format of `:content` remove the `:` from it, and set content from it
+                content = command_params[-1][1:]
+            else:
+                content = None
+
+            # Event type
+            if command in irc_command_to_event_type:
+                event_type = irc_command_to_event_type[command]
+            else:
+                event_type = EventType.other
+
+            # Target (for KICK, INVITE)
+            if event_type is EventType.kick:
+                target = command_params[1]
+            elif command == "INVITE":
+                target = command_params[0]
+            else:
+                # TODO: Find more commands which give a target
+                target = None
+
+            # Parse for CTCP
+            if event_type is EventType.message and content.count("\x01") >= 2 and content.startswith("\x01"):
+                # Remove the first \x01, then rsplit to remove the last one, and ignore text after the last \x01
+                ctcp_text = content[1:].rsplit("\x01", 1)[0]
+                # this shouldn't be considered a regular message
+                event_type = EventType.other
+            else:
+                ctcp_text = None
+
+            # Channel
+            # TODO: Migrate plugins using chan for storage to use chan.lower() instead so we can pass the original case
+            if command_params and (len(command_params) > 2 or not command_params[0].startswith(":")):
+
+                if command_params[0].lower() == self.conn.nick.lower():
+                    # this is a private message - set the channel to the sender's nick
+                    channel = nick.lower()
+                else:
+                    channel = command_params[0].lower()
+            else:
+                channel = None
 
             # Set up parsed message
             # TODO: Do we really want to send the raw `prefix` and `command_params` here?
-            event = BaseEvent(bot=self.bot, conn=self.conn, content=content, nick=nick, user=user, host=host, mask=mask,
-                              irc_raw=line, irc_prefix=prefix, irc_command=command, irc_paramlist=command_params)
+            event = BaseEvent(bot=self.bot, conn=self.conn, event_type=event_type, content=content, target=target,
+                              channel=channel, nick=nick, user=user, host=host, mask=mask, irc_raw=line,
+                              irc_prefix=prefix, irc_command=command, irc_paramlist=command_params,
+                              irc_ctcp_text=ctcp_text)
 
             # handle the message, async
             asyncio.async(self.bot.process(event), loop=self.loop)
diff --git a/cloudbot/core/events.py b/cloudbot/core/events.py
index 7ba49f9..1b66b83 100644
--- a/cloudbot/core/events.py
+++ b/cloudbot/core/events.py
@@ -1,16 +1,32 @@
 import asyncio
+import enum
 import logging
 import concurrent.futures
 
 logger = logging.getLogger("cloudbot")
 
 
+@enum.unique
+class EventType(enum.Enum):
+    message = 0
+    action = 1
+    # TODO: Do we actually want to have a 'notice' event type? Should the NOTICE command be a 'message' type?
+    notice = 2
+    join = 3
+    part = 4
+    kick = 5
+    other = 6
+
+
 class BaseEvent:
     """
     :type bot: cloudbot.core.bot.CloudBot
     :type conn: cloudbot.core.connection.Connection
     :type hook: cloudbot.core.pluginmanager.Hook
+    :type type: EventType
     :type content: str
+    :type target: str
+    :type chan: str
     :type nick: str
     :type user: str
     :type host: str
@@ -21,10 +37,12 @@ class BaseEvent:
     :type irc_prefix: str
     :type irc_command: str
     :type irc_paramlist: str
+    :type irc_ctcp_text: str
     """
 
-    def __init__(self, bot=None, conn=None, hook=None, base_event=None, content=None, irc_raw=None, irc_prefix=None,
-                 irc_command=None, irc_paramlist=None, nick=None, user=None, host=None, mask=None):
+    def __init__(self, *, bot=None, hook=None, conn=None, base_event=None, event_type=EventType.other, content=None,
+                 target=None, channel=None, nick=None, user=None, host=None, mask=None, irc_raw=None, irc_prefix=None,
+                 irc_command=None, irc_paramlist=None, irc_ctcp_text=None):
         """
         All of these parameters except for `bot` and `hook` are optional.
         The irc_* parameters should only be specified for IRC events.
@@ -36,21 +54,27 @@ class BaseEvent:
         :param hook: The hook this event will be passed to
         :param base_event: The base event that this event is based on. If this parameter is not None, then nick, user,
                             host, mask, and irc_* arguments are ignored
+        :param event_type: The type of the event
+        :param content: The content of the message, or the reason for an join or part
+        :param target: The target of the action, for example the user being kicked, or invited
+        :param channel: The channel that this action took place in
         :param nick: The nickname of the sender that triggered this event
         :param user: The user of the sender that triggered this event
         :param host: The host of the sender that triggered this event
         :param mask: The mask of the sender that triggered this event (nick!user@host)
-        :param content: The content of the message, or the reason for an join or part
         :param irc_raw: The raw IRC line
         :param irc_prefix: The raw IRC prefix
         :param irc_command: The IRC command
         :param irc_paramlist: The list of params for the IRC command. If the last param is a content param, the ':'
                                 should be removed from the front.
+        :param irc_ctcp_text: CTCP text if this message is a CTCP command
         :type bot: cloudbot.core.bot.CloudBot
         :type conn: cloudbot.core.connection.Connection
         :type hook: cloudbot.core.pluginmanager.Hook
         :type base_event: cloudbot.core.events.BaseEvent
         :type content: str
+        :type target: str
+        :type event_type: EventType
         :type nick: str
         :type user: str
         :type host: str
@@ -59,13 +83,13 @@ class BaseEvent:
         :type irc_prefix: str
         :type irc_command: str
         :type irc_paramlist: list[str]
+        :type irc_ctcp_text: str
         """
         self.db = None
         self.db_executor = None
         self.bot = bot
         self.conn = conn
         self.hook = hook
-        self.content = content
         if base_event is not None:
             # We're copying an event, so inherit values
             if self.bot is None and base_event.bot is not None:
@@ -74,28 +98,38 @@ class BaseEvent:
                 self.conn = base_event.conn
             if self.hook is None and base_event.hook is not None:
                 self.hook = base_event.hook
-            if self.content is None and base_event.content is not None:
-                self.content = base_event.content
 
-            # inherit nick/usr/host/mask/irc_* without checking internal values, as we always want to inherit these
+            # If base_event is provided, don't check these parameters, just inherit
+            self.type = base_event.type
+            self.content = base_event.content
+            self.target = base_event.target
+            self.chan = base_event.chan
             self.nick = base_event.nick
             self.user = base_event.user
             self.host = base_event.host
             self.mask = base_event.mask
+            # irc-specific parameters
             self.irc_raw = base_event.irc_raw
             self.irc_prefix = base_event.irc_prefix
             self.irc_command = base_event.irc_command
             self.irc_paramlist = base_event.irc_paramlist
+            self.irc_ctcp_text = base_event.irc_ctcp_text
         else:
-            # if we're not inheriting an event, we can take these parameters
-            self.irc_raw = irc_raw
-            self.irc_prefix = irc_prefix
-            self.irc_command = irc_command
-            self.irc_paramlist = irc_paramlist
+            # Since base_event wasn't provided, we can take these parameters
+            self.type = event_type
+            self.content = content
+            self.target = target
+            self.chan = channel
             self.nick = nick
             self.user = user
             self.host = host
             self.mask = mask
+            # irc-specific parameters
+            self.irc_raw = irc_raw
+            self.irc_prefix = irc_prefix
+            self.irc_command = irc_command
+            self.irc_paramlist = irc_paramlist
+            self.irc_ctcp_text = irc_ctcp_text
 
     @asyncio.coroutine
     def prepare(self):
@@ -173,20 +207,6 @@ class BaseEvent:
             self.db = None
 
     @property
-    def chan(self):
-        """
-        :rtype: str
-        """
-        if self.irc_paramlist:
-            if self.irc_paramlist[0].lower() == self.conn.nick.lower():
-                # this is a private message - set the nick to the sender's nick
-                return self.nick.lower()
-            else:
-                return self.irc_paramlist[0].lower()
-        else:
-            return None
-
-    @property
     def event(self):
         """
         :rtype; cloudbot.core.events.BaseEvent
@@ -253,7 +273,7 @@ class BaseEvent:
                 raise ValueError("Target must be specified when chan is not assigned")
             target = self.chan
         if not hasattr(self.conn, "ctcp"):
-            raise ValueError("CTCP can only be used on IRC connections")
+            raise ValueError("CTCP is not supported by {}".format(type(self.conn).__name__))
         # noinspection PyUnresolvedReferences
         self.conn.ctcp(target, ctcp_type, message)
 
@@ -298,18 +318,18 @@ class CommandEvent(BaseEvent):
     :type triggered_command: str
     """
 
-    def __init__(self, *, bot=None, hook, text, triggered_command, conn=None, base_event=None, content=None,
-                 nick=None, user=None, host=None, mask=None, irc_raw=None, irc_prefix=None, irc_command=None,
-                 irc_paramlist=None):
+    def __init__(self, *, bot=None, hook, text, triggered_command, conn=None, base_event=None, event_type=None,
+                 content=None, target=None, channel=None, nick=None, user=None, host=None, mask=None, irc_raw=None,
+                 irc_prefix=None, irc_command=None, irc_paramlist=None):
         """
         :param text: The arguments for the command
         :param triggered_command: The command that was triggered
         :type text: str
         :type triggered_command: str
         """
-        super().__init__(bot=bot, hook=hook, conn=conn, base_event=base_event, content=content, nick=nick, user=user,
-                         host=host, mask=mask, irc_raw=irc_raw, irc_prefix=irc_prefix, irc_command=irc_command,
-                         irc_paramlist=irc_paramlist)
+        super().__init__(bot=bot, hook=hook, conn=conn, base_event=base_event, event_type=event_type, content=content,
+                         target=target, channel=channel, nick=nick, user=user, host=host, mask=mask, irc_raw=irc_raw,
+                         irc_prefix=irc_prefix, irc_command=irc_command, irc_paramlist=irc_paramlist)
         self.hook = hook
         self.text = text
         self.triggered_command = triggered_command
@@ -340,13 +360,14 @@ class RegexEvent(BaseEvent):
     :type match: re.__Match
     """
 
-    def __init__(self, *, bot=None, hook, match, conn=None, base_event=None, content=None, nick=None, user=None,
-                 host=None, mask=None, irc_raw=None, irc_prefix=None, irc_command=None, irc_paramlist=None):
+    def __init__(self, *, bot=None, hook, match, conn=None, base_event=None, event_type=None, content=None, target=None,
+                 channel=None, nick=None, user=None, host=None, mask=None, irc_raw=None, irc_prefix=None,
+                 irc_command=None, irc_paramlist=None):
         """
         :param: match: The match objected returned by the regex search method
         :type match: re.__Match
         """
-        super().__init__(bot=bot, hook=hook, conn=conn, base_event=base_event, content=content, nick=nick, user=user,
-                         host=host, mask=mask, irc_raw=irc_raw, irc_prefix=irc_prefix, irc_command=irc_command,
-                         irc_paramlist=irc_paramlist)
+        super().__init__(bot=bot, conn=conn, hook=hook, base_event=base_event, event_type=event_type, content=content,
+                         target=target, channel=channel, nick=nick, user=user, host=host, mask=mask, irc_raw=irc_raw,
+                         irc_prefix=irc_prefix, irc_command=irc_command, irc_paramlist=irc_paramlist)
         self.match = match
-- 
2.0.0

