From 85144bb07de71e3beee42a7112ff3d452e96373f Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Sat, 21 Jun 2014 21:00:35 -0500
Subject: [PATCH] Add a PluginManager.add_hook method, for adding internal
 hooks


diff --git a/cloudbot/plugin.py b/cloudbot/plugin.py
index f029331..11daa24 100644
--- a/cloudbot/plugin.py
+++ b/cloudbot/plugin.py
@@ -23,6 +23,10 @@ class HookType(enum.Enum):
     irc_raw = 6,
     sieve = 3,
 
+# cloudbot.hook imports plugin.HookType, so to not cause a circular import error, we import cloudbot.hook after defining
+#  the HookType enum. TODO: is there *any* better way to do this?
+import cloudbot.hook
+
 
 def find_hooks(parent, module):
     """
@@ -305,6 +309,79 @@ class PluginManager:
             logger.info("Loaded {}".format(hook))
             logger.debug("Loaded {}".format(repr(hook)))
 
+    # TODO: create remove_hook() method
+    def add_hook(self, hook_type, function, *args, **kwargs):
+        """
+        Add an internal hook, like a plugin @hook.X, but for methods in the core. Kind of like an internal event system.
+        :param hook_type: The type of the hook (command, regex, event, sieve, or irc_raw)
+        :param function: The function to call
+        :param args: Arguments to pass to the hook, dependent on the hook type
+        :param kwargs: Keyword arguments to pass to the hook, dependent on the hook type
+        :type hook_type: HookType
+        """
+        # Get the plugin, or create it - we want one unique plugin for each core file.
+        file = inspect.getmodule(function).__file__
+        # filename is used as the unique key for the plugin.
+        # we prepend internal/ so that this isn't confused with internal plugins.
+        # We *do* assume here that no core files will have the same basename, even if they are in different directories.
+        # I think that is a sane assumption.
+        filename = "internal/" + os.path.basename(file)
+        if filename in self.plugins:
+            plugin = self.plugins[filename]
+        else:
+            filepath = os.path.abspath(file)
+            title = os.path.splitext(filename)[0]
+            plugin = Plugin(filepath, filename, title)
+            self.plugins[filename] = plugin
+
+        # we don't allow onload hooks for internal. We don't have to check a valid type otherwise, because
+        # the _hook_name_to_hook[hook_type] call will raise a KeyError already.
+        if hook_type is HookType.onload:
+            raise ValueError("onload hooks not allowed")
+
+        # this might seem a little hacky, but I think it's a good design choice.
+        # hook.py is in charge of argument processing, so it should process them here to
+        _processing_hook = cloudbot.hook._hook_name_to_hook[hook_type](function)
+        _processing_hook.add_hook(*args, **kwargs)
+        # create the *Hook object
+        hook = _hook_type_to_plugin[hook_type](plugin, _processing_hook)
+
+        # Register the hook.
+        # I *think* this is the best way to do this, there might be a more pythonic way though, not sure.
+        if hook_type is HookType.command:
+            # TODO: Should we disallow internal command hooks? It seems like it could be a bad design choice
+            #  to allow them
+            for alias in hook.aliases:
+                if alias in self.commands:
+                    logger.warning(
+                        "Internal file {} attempted to register command {} which was already registered by {}. "
+                        "Ignoring new assignment.".format(plugin.title, alias, self.commands[alias].plugin.title))
+                else:
+                    self.commands[alias] = hook
+        elif hook_type is HookType.irc_raw:
+            if hook.is_catch_all():
+                self.catch_all_triggers.append(hook)
+            else:
+                for trigger in hook.triggers:
+                    if trigger in self.raw_triggers:
+                        self.raw_triggers[trigger].append(hook)
+                    else:
+                        self.raw_triggers[trigger] = [hook]
+        elif hook_type is HookType.event:
+            for event_type in hook.types:
+                if event_type in self.event_type_hooks:
+                    self.event_type_hooks[event_type].append(hook)
+                else:
+                    self.event_type_hooks[event_type] = [hook]
+        elif hook_type is HookType.regex:
+            for regex_match in hook.regexes:
+                self.regex_hooks.append((regex_match, hook))
+        elif hook_type is HookType.sieve:
+            self.sieves.append(hook)
+
+        # Log the hook. TODO: Do we want to do this for internal hooks?
+        self._log_hook(hook)
+
     def _prepare_parameters(self, hook, event):
         """
         Prepares arguments for the given hook
@@ -486,8 +563,10 @@ class Plugin:
     :type tables: list[sqlalchemy.Table]
     """
 
-    def __init__(self, filepath, filename, title, code):
+    def __init__(self, filepath, filename, title, code=None):
         """
+        :param code: Optional code argument, should be specified for all *actual* plugins.
+                        If provided, all hooks will be retrieved and attached to this plugin from the code.
         :type filepath: str
         :type filename: str
         :type code: object
@@ -495,10 +574,12 @@ class Plugin:
         self.file_path = filepath
         self.file_name = filename
         self.title = title
-        self.commands, self.regexes, self.raw_hooks, self.sieves, self.events, self.run_on_load = find_hooks(self, code)
-        # we need to find tables for each plugin so that they can be unloaded from the global metadata when the
-        # plugin is reloaded
-        self.tables = find_tables(code)
+        if code is not None:
+            self.commands, self.regexes, self.raw_hooks, self.sieves, self.events, self.run_on_load = find_hooks(self,
+                                                                                                                 code)
+            # we need to find tables for each plugin so that they can be unloaded from the global metadata when the
+            # plugin is reloaded
+            self.tables = find_tables(code)
 
     @asyncio.coroutine
     def create_tables(self, bot):
-- 
2.0.0

