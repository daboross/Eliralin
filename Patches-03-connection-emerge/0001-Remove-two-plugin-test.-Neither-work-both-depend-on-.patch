From 3f26ba8cb5049eb8a0deda421be969155ef5db69 Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Wed, 18 Jun 2014 17:11:31 -0500
Subject: [PATCH] Remove two plugin test. Neither work, both depend on
 cloudbot.util.http which is no longer used.


diff --git a/plugins/test/test_fact.py b/plugins/test/test_fact.py
deleted file mode 100644
index e32dbc3..0000000
--- a/plugins/test/test_fact.py
+++ /dev/null
@@ -1,96 +0,0 @@
-import urllib.error  # to allow raising urllib.U
-
-from bs4 import BeautifulSoup
-import pytest
-
-from plugins.fact import fact
-from cloudbot import http, web
-
-testpage = """
-<html>
-<body>
-<h1><a href="http://www.omgfacts.com/Animals/A-rhinoceros-horn-is-made-out-of-the-sam/15458" class="surprise">A rhinoceros horn is made out of the same material as human hair!</a></h1>
-</body>
-</html>
-"""
-testurl = "http://www.omgfacts.com/Animals/A-rhinoceros-horn-is-made-out-of-the-sam/15458"
-testfact = "A rhinoceros horn is made out of the same material as human hair!"
-
-
-def test_fact(monkeypatch):
-    def fake_http(url):
-        assert url == "http://www.omg-facts.com/random"
-        return BeautifulSoup(testpage, 'lxml')
-
-    def fake_isgd(url):
-        assert url == testurl
-        return "isgd link"
-
-    monkeypatch.setattr(http, "get_soup", fake_http)
-    monkeypatch.setattr(web, "try_isgd", fake_isgd)
-
-    assert fact() == testfact + " - isgd link"
-
-
-def test_except(monkeypatch):
-    class TestException(Exception):
-        # exception that shouldn't be caught
-        pass
-
-    def fake_http(url):
-        assert url == "http://www.omg-facts.com/random"
-        raise TestException
-
-    def fake_isgd(url):
-        assert url == testurl
-        return "isgd link"
-
-    monkeypatch.setattr(http, "get_soup", fake_http)
-    monkeypatch.setattr(web, "try_isgd", fake_isgd)
-
-    with pytest.raises(TestException):
-        fact()
-
-
-def test_timeout(monkeypatch):
-    excepted = False
-
-    def fake_http(url):
-        nonlocal excepted  # nonlocal is a py3 thing, yay you, eh?
-        assert url == "http://www.omg-facts.com/random"
-        if excepted:
-            return BeautifulSoup(testpage, "lxml")
-        else:
-            excepted = True
-            raise urllib.error.URLError(1)
-
-    def fake_isgd(url):
-        assert url == testurl
-        return "isgd link"
-
-    monkeypatch.setattr(http, "get_soup", fake_http)
-    monkeypatch.setattr(web, "try_isgd", fake_isgd)
-
-    assert fact() == testfact + " - isgd link"
-
-
-def test_multi_timeout(monkeypatch):
-    excepted = 0
-
-    def fake_http(url):
-        nonlocal excepted  # nonlocal is a py3 thing, yay you, eh?
-        assert url == "http://www.omg-facts.com/random"
-        if excepted == 5:
-            return BeautifulSoup(testpage, "lxml")
-        else:
-            excepted += 1
-            raise urllib.error.URLError(1)
-
-    def fake_isgd(url):
-        assert url == testurl
-        return "isgd link"
-
-    monkeypatch.setattr(http, "get_soup", fake_http)
-    monkeypatch.setattr(web, "try_isgd", fake_isgd)
-
-    assert fact() == "Could not find a fact!"
\ No newline at end of file
diff --git a/plugins/test/test_fishbans.py b/plugins/test/test_fishbans.py
deleted file mode 100644
index 3c9405b..0000000
--- a/plugins/test/test_fishbans.py
+++ /dev/null
@@ -1,113 +0,0 @@
-import json
-import pytest
-
-from plugins.fishbans import fishbans, bancount
-from cloudbot import http
-
-test_user = "notch"
-
-test_api = """
-{"success":true,"stats":{"username":"notch","uuid":"069a79f444e94726a5befca90e38aaf5","totalbans":11,"service":{"mcbans":0,"mcbouncer":11,"mcblockit":0,"minebans":0,"glizer":0}}}
-"""
-test_api_single = """
-{"success":true,"stats":{"username":"notch","uuid":"069a79f444e94726a5befca90e38aaf5","totalbans":1,"service":{"mcbans":0,"mcbouncer":1,"mcblockit":0,"minebans":0,"glizer":0}}}
-"""
-test_api_none = """
-{"success":true,"stats":{"username":"notch","uuid":"069a79f444e94726a5befca90e38aaf5","totalbans":0,"service":{"mcbans":0,"mcbouncer":0,"mcblockit":0,"minebans":0,"glizer":0}}}
-"""
-test_api_failed = """
-{"success":false}
-"""
-
-bans_reply = "The user \x02notch\x02 has \x0211\x02 bans - http://fishbans.com/u/notch/"
-count_reply = "Bans for \x02notch\x02: mcbouncer: \x0211\x02 - http://fishbans.com/u/notch/"
-
-bans_reply_single = "The user \x02notch\x02 has \x021\x02 ban - http://fishbans.com/u/notch/"
-
-bans_reply_failed = "Could not fetch ban data for notch."
-count_reply_failed = "Could not fetch ban data for notch."
-
-bans_reply_none = "The user \x02notch\x02 has no bans - http://fishbans.com/u/notch/"
-count_reply_none = "The user \x02notch\x02 has no bans - http://fishbans.com/u/notch/"
-
-
-def test_bans(monkeypatch):
-    """ tests fishbans with a successful API response having multiple bans
-    """
-
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert fishbans(test_user) == bans_reply
-
-
-def test_bans_single(monkeypatch):
-    """ tests fishbans with a successful API response having a single ban
-    """
-
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api_single)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert fishbans(test_user) == bans_reply_single
-
-
-def test_bans_failed(monkeypatch):
-    """ tests fishbans with a failed API response
-    """
-
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api_failed)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert fishbans(test_user) == bans_reply_failed
-
-
-def test_bans_none(monkeypatch):
-    """ tests fishbans with a successful API response having no bans
-    """
-
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api_none)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert fishbans(test_user) == bans_reply_none
-
-
-def test_count(monkeypatch):
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert bancount(test_user) == count_reply
-
-
-def test_count_failed(monkeypatch):
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api_failed)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert bancount(test_user) == count_reply_failed
-
-
-def test_count_no_bans(monkeypatch):
-    def fake_http(url):
-        assert url == "http://api.fishbans.com/stats/notch/"
-        return json.loads(test_api_none)
-
-    monkeypatch.setattr(http, "get_json", fake_http)
-
-    assert bancount(test_user) == count_reply_none
-- 
2.0.0

