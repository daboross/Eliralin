From 247fa3d33b2bbe54e3f058be430498fcab7b54cf Mon Sep 17 00:00:00 2001
From: Dabo Ross <daboross@daboross.net>
Date: Fri, 20 Jun 2014 12:43:17 -0500
Subject: [PATCH] Rename Connection to Client and IrcConnection to IrcClient,
 and update documentation and plugins accordingly.


diff --git a/cloudbot/bot.py b/cloudbot/bot.py
index 3dbc2ee..0bc9456 100644
--- a/cloudbot/bot.py
+++ b/cloudbot/bot.py
@@ -10,13 +10,13 @@ from sqlalchemy.orm import scoped_session, sessionmaker
 from sqlalchemy.schema import MetaData
 
 import cloudbot
-from cloudbot.connection import Connection
+from cloudbot.client import Client
 from cloudbot.config import Config
 from cloudbot.reloader import PluginReloader
 from cloudbot.pluginmanager import PluginManager
 from cloudbot.events import BaseEvent, CommandEvent, RegexEvent, EventType
 from cloudbot.util import botvars, formatting
-from cloudbot.implementations.irc import IrcConnection
+from cloudbot.implementations.irc import IrcClient
 
 logger = logging.getLogger("cloudbot")
 
@@ -33,7 +33,7 @@ class CloudBot:
     """
     :type start_time: float
     :type running: bool
-    :type connections: list[Connection | IrcConnection]
+    :type connections: list[Client | IrcClient]
     :type data_dir: bytes
     :type config: core.config.Config
     :type plugin_manager: PluginManager
@@ -126,9 +126,9 @@ class CloudBot:
             server = conf['connection']['server']
             port = conf['connection'].get('port', 6667)
 
-            self.connections.append(IrcConnection(self, name, nick, config=conf, channels=conf['channels'],
-                                                  readable_name=readable_name, server=server, port=port,
-                                                  use_ssl=conf['connection'].get('ssl', False)))
+            self.connections.append(IrcClient(self, name, nick, config=conf, channels=conf['channels'],
+                                              readable_name=readable_name, server=server, port=port,
+                                              use_ssl=conf['connection'].get('ssl', False)))
             logger.debug("[{}] Created connection.".format(readable_name))
 
     @asyncio.coroutine
diff --git a/cloudbot/client.py b/cloudbot/client.py
new file mode 100644
index 0000000..7909fd6
--- /dev/null
+++ b/cloudbot/client.py
@@ -0,0 +1,123 @@
+import asyncio
+import logging
+
+from cloudbot.permissions import PermissionManager
+
+logger = logging.getLogger("cloudbot")
+
+
+class Client:
+    """
+    A Client representing each connection the bot makes to a single server
+    :type bot: cloudbot.bot.CloudBot
+    :type loop: asyncio.events.AbstractEventLoop
+    :type name: str
+    :type readable_name: str
+    :type channels: list[str]
+    :type config: dict[str, unknown]
+    :type nick: str
+    :type vars: dict
+    :type history: dict[str, list[tuple]]
+    :type permissions: PermissionManager
+    """
+
+    def __init__(self, bot, name, nick, *, readable_name, channels=None, config=None):
+        """
+        :type bot: cloudbot.bot.CloudBot
+        :type name: str
+        :type readable_name: str
+        :type nick: str
+        :type channels: list[str]
+        :type config: dict[str, unknown]
+        """
+        self.bot = bot
+        self.loop = bot.loop
+        self.name = name
+        self.nick = nick
+        self.readable_name = readable_name
+
+        if channels is None:
+            self.channels = []
+        else:
+            self.channels = channels
+
+        if config is None:
+            self.config = {}
+        else:
+            self.config = config
+        self.vars = {}
+        self.history = {}
+
+        # create permissions manager
+        self.permissions = PermissionManager(self)
+
+    def describe_server(self):
+        raise NotImplementedError
+
+    @asyncio.coroutine
+    def connect(self):
+        """
+        Connects to the server, or reconnects if already connected.
+        """
+        raise NotImplementedError
+
+    def quit(self, reason=None):
+        """
+        Gracefully disconnects from the server with reason <reason>, close() should be called shortly after.
+        """
+        raise NotImplementedError
+
+    def close(self):
+        """
+        Disconnects from the server, only for use when this Client object will *not* ever be connected again
+        """
+        raise NotImplementedError
+
+    def message(self, target, text):
+        """
+        Sends a message to the given target
+        :type target: str
+        :type text: str
+        """
+        raise NotImplementedError
+
+    def action(self, target, text):
+        """
+        Sends an action (or /me) to the given target channel
+        :type target: str
+        :type text: str
+        """
+        raise NotImplementedError
+
+    def notice(self, target, text):
+        """
+        Sends a notice to the given target
+        :type target: str
+        :type text: str
+        """
+        raise NotImplementedError
+
+    def set_nick(self, nick):
+        """
+        Sets the bot's nickname
+        :type nick: str
+        """
+        raise NotImplementedError
+
+    def join(self, channel):
+        """
+        Joins a given channel
+        :type channel: str
+        """
+        raise NotImplementedError
+
+    def part(self, channel):
+        """
+        Parts a given channel
+        :type channel: str
+        """
+        raise NotImplementedError
+
+    @property
+    def connected(self):
+        raise NotImplementedError
diff --git a/cloudbot/config.py b/cloudbot/config.py
index 22574c7..0a582f1 100644
--- a/cloudbot/config.py
+++ b/cloudbot/config.py
@@ -6,6 +6,7 @@ import logging
 
 from watchdog.observers import Observer
 from watchdog.tricks import Trick
+
 import cloudbot
 
 logger = logging.getLogger("cloudbot")
diff --git a/cloudbot/connection.py b/cloudbot/connection.py
deleted file mode 100644
index 4bdf6b1..0000000
--- a/cloudbot/connection.py
+++ /dev/null
@@ -1,123 +0,0 @@
-import asyncio
-import logging
-
-from cloudbot.permissions import PermissionManager
-
-logger = logging.getLogger("cloudbot")
-
-
-class Connection:
-    """
-    A Connection representing each connection the bot makes to a single server
-    :type bot: cloudbot.bot.CloudBot
-    :type loop: asyncio.events.AbstractEventLoop
-    :type name: str
-    :type readable_name: str
-    :type channels: list[str]
-    :type config: dict[str, unknown]
-    :type nick: str
-    :type vars: dict
-    :type history: dict[str, list[tuple]]
-    :type permissions: PermissionManager
-    """
-
-    def __init__(self, bot, name, nick, *, readable_name, channels=None, config=None):
-        """
-        :type bot: cloudbot.bot.CloudBot
-        :type name: str
-        :type readable_name: str
-        :type nick: str
-        :type channels: list[str]
-        :type config: dict[str, unknown]
-        """
-        self.bot = bot
-        self.loop = bot.loop
-        self.name = name
-        self.nick = nick
-        self.readable_name = readable_name
-
-        if channels is None:
-            self.channels = []
-        else:
-            self.channels = channels
-
-        if config is None:
-            self.config = {}
-        else:
-            self.config = config
-        self.vars = {}
-        self.history = {}
-
-        # create permissions manager
-        self.permissions = PermissionManager(self)
-
-    def describe_server(self):
-        raise NotImplementedError
-
-    @asyncio.coroutine
-    def connect(self):
-        """
-        Connects to the server, or reconnects if already connected.
-        """
-        raise NotImplementedError
-
-    def quit(self, reason=None):
-        """
-        Gracefully disconnects from the server with reason <reason>, close() should be called shortly after.
-        """
-        raise NotImplementedError
-
-    def close(self):
-        """
-        Disconnects from the server, only for use when this Connection object will *not* ever be connected again
-        """
-        raise NotImplementedError
-
-    def message(self, target, text):
-        """
-        Sends a message to the given target
-        :type target: str
-        :type text: str
-        """
-        raise NotImplementedError
-
-    def action(self, target, text):
-        """
-        Sends an action (or /me) to the given target channel
-        :type target: str
-        :type text: str
-        """
-        raise NotImplementedError
-
-    def notice(self, target, text):
-        """
-        Sends a notice to the given target
-        :type target: str
-        :type text: str
-        """
-        raise NotImplementedError
-
-    def set_nick(self, nick):
-        """
-        Sets the bot's nickname
-        :type nick: str
-        """
-        raise NotImplementedError
-
-    def join(self, channel):
-        """
-        Joins a given channel
-        :type channel: str
-        """
-        raise NotImplementedError
-
-    def part(self, channel):
-        """
-        Parts a given channel
-        :type channel: str
-        """
-        raise NotImplementedError
-
-    @property
-    def connected(self):
-        raise NotImplementedError
diff --git a/cloudbot/events.py b/cloudbot/events.py
index ec96914..8681317 100644
--- a/cloudbot/events.py
+++ b/cloudbot/events.py
@@ -21,7 +21,7 @@ class EventType(enum.Enum):
 class BaseEvent:
     """
     :type bot: cloudbot.bot.CloudBot
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type hook: cloudbot.pluginmanager.Hook
     :type type: EventType
     :type content: str
@@ -50,7 +50,7 @@ class BaseEvent:
         Note that the `bot` argument may be left out if you specify a `base_event`.
 
         :param bot: The CloudBot instance this event was triggered from
-        :param conn: The Connection instance this event was triggered from
+        :param conn: The Client instance this event was triggered from
         :param hook: The hook this event will be passed to
         :param base_event: The base event that this event is based on. If this parameter is not None, then nick, user,
                             host, mask, and irc_* arguments are ignored
@@ -69,7 +69,7 @@ class BaseEvent:
                                 should be removed from the front.
         :param irc_ctcp_text: CTCP text if this message is a CTCP command
         :type bot: cloudbot.bot.CloudBot
-        :type conn: cloudbot.connection.Connection
+        :type conn: cloudbot.client.Client
         :type hook: cloudbot.pluginmanager.Hook
         :type base_event: cloudbot.events.BaseEvent
         :type content: str
diff --git a/cloudbot/implementations/irc.py b/cloudbot/implementations/irc.py
index 1803d1e..ef06266 100644
--- a/cloudbot/implementations/irc.py
+++ b/cloudbot/implementations/irc.py
@@ -5,8 +5,7 @@ import ssl
 import logging
 from ssl import SSLContext
 
-from cloudbot.connection import Connection
-
+from cloudbot.client import Client
 from cloudbot.events import BaseEvent, EventType
 
 logger = logging.getLogger("cloudbot")
@@ -25,9 +24,9 @@ irc_command_to_event_type = {
 }
 
 
-class IrcConnection(Connection):
+class IrcClient(Client):
     """
-    An implementation of Connection for IRC.
+    An implementation of Client for IRC.
     :type use_ssl: bool
     :type server: str
     :type port: int
@@ -186,7 +185,7 @@ class IrcConnection(Connection):
         :type line: str
         """
         if not self._connected:
-            raise ValueError("Connection must be connected to irc server to use send")
+            raise ValueError("Client must be connected to irc server to use send")
         self.loop.call_soon_threadsafe(self._send, line)
 
     def _send(self, line):
@@ -205,7 +204,7 @@ class IrcConnection(Connection):
 class _IrcProtocol(asyncio.Protocol):
     """
     :type loop: asyncio.events.AbstractEventLoop
-    :type conn: IrcConnection
+    :type conn: IrcClient
     :type bot: cloudbot.bot.CloudBot
     :type _input_buffer: bytes
     :type _connected: bool
@@ -215,7 +214,7 @@ class _IrcProtocol(asyncio.Protocol):
 
     def __init__(self, conn):
         """
-        :type conn: IrcConnection
+        :type conn: IrcClient
         """
         self.loop = conn.loop
         self.bot = conn.bot
diff --git a/cloudbot/permissions.py b/cloudbot/permissions.py
index 6652252..e2db5af 100644
--- a/cloudbot/permissions.py
+++ b/cloudbot/permissions.py
@@ -16,7 +16,7 @@ class PermissionManager(object):
 
     def __init__(self, conn):
         """
-        :type conn: cloudbot.connection.Connection
+        :type conn: cloudbot.client.Client
         """
         logger.info("[{}] Created permission manager for {}.".format(conn.readable_name, conn.name))
 
diff --git a/plugins/admin.py b/plugins/admin.py
index c36b572..effb0d5 100644
--- a/plugins/admin.py
+++ b/plugins/admin.py
@@ -8,7 +8,7 @@ from cloudbot import hook
 @hook.command("groups", "listgroups", "permgroups", permissions=["permissions_users"], autohelp=False)
 def get_permission_groups(conn):
     """- lists all valid groups
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     return "Valid groups: {}".format(conn.permissions.get_groups())
 
@@ -18,7 +18,7 @@ def get_permission_groups(conn):
 def get_group_permissions(text, conn, notice):
     """<group> - lists permissions given to <group>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     group = text.strip().lower()
     permission_manager = conn.permissions
@@ -37,7 +37,7 @@ def get_group_permissions(text, conn, notice):
 def get_group_users(text, conn, notice):
     """<group> - lists users in <group>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     group = text.strip().lower()
     permission_manager = conn.permissions
@@ -56,7 +56,7 @@ def get_group_users(text, conn, notice):
 def get_user_permissions(text, conn, mask, has_permission, notice):
     """[user] - lists all permissions given to [user], or the caller if no user is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type mask: str
     """
     if text:
@@ -81,7 +81,7 @@ def get_user_permissions(text, conn, mask, has_permission, notice):
 def get_user_groups(text, conn, mask, has_permission, notice):
     """[user] - lists all permissions given to [user], or the caller if no user is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type mask: str
     """
     if text:
@@ -107,7 +107,7 @@ def remove_permission_user(text, bot, conn, notice, reply):
     """<user> [group] - removes <user> from [group], or from all groups if no group is specified
     :type text: str
     :type bot: cloudbot.bot.CloudBot
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     split = text.split()
     if len(split) > 2:
@@ -162,7 +162,7 @@ def remove_permission_user(text, bot, conn, notice, reply):
 def add_permissions_user(text, conn, bot, notice, reply):
     """<user> <group> - adds <user> to <group>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type bot: cloudbot.bot.CloudBot
     """
     split = text.split()
@@ -229,7 +229,7 @@ def restart(text, bot):
 def join(text, conn, notice):
     """<channel> - joins <channel>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     for target in text.split():
         if not target.startswith("#"):
@@ -243,7 +243,7 @@ def join(text, conn, notice):
 def part(text, conn, chan, notice):
     """[#channel] - parts [#channel], or the caller's channel if no channel is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     """
     if text:
@@ -262,7 +262,7 @@ def part(text, conn, chan, notice):
 def cycle(text, conn, chan, notice):
     """[#channel] - cycles [#channel], or the caller's channel if no channel is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     """
     if text:
@@ -282,7 +282,7 @@ def cycle(text, conn, chan, notice):
 def nick(text, conn, notice):
     """<nick> - changes my nickname to <nick>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     if not re.match("^[a-z0-9_|.-\]\[]*$", text.lower()):
         notice("Invalid username '{}'".format(text))
@@ -296,7 +296,7 @@ def nick(text, conn, notice):
 def raw(text, conn, notice):
     """<command> - sends <command> as a raw IRC command
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     notice("Raw command sent.")
     conn.send(text)
@@ -307,7 +307,7 @@ def raw(text, conn, notice):
 def say(text, conn, chan):
     """[#channel] <message> - says <message> to [#channel], or to the caller's channel if no channel is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     """
     text = text.strip()
@@ -326,7 +326,7 @@ def say(text, conn, chan):
 def message(text, conn):
     """<name> <message> - says <message> to <name>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     split = text.split(None, 1)
     channel = split[0]
@@ -339,7 +339,7 @@ def message(text, conn):
 def me(text, conn, chan):
     """[#channel] <action> - acts out <action> in a [#channel], or in the current channel of none is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     """
     text = text.strip()
diff --git a/plugins/attacks.py b/plugins/attacks.py
index cacca55..0c29af8 100644
--- a/plugins/attacks.py
+++ b/plugins/attacks.py
@@ -31,7 +31,7 @@ def load_attacks(bot):
 
 def is_self(conn, target):
     """
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type target: str
     """
     if re.search("(^..?.?.?self|{})".format(re.escape(conn.nick.lower())), target.lower()):
@@ -45,7 +45,7 @@ def is_self(conn, target):
 def lart(text, conn, nick, notice, action):
     """<user> - LARTs <user>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type nick: str
     """
     target = text.strip()
@@ -69,7 +69,7 @@ def lart(text, conn, nick, notice, action):
 def insult(text, conn, nick, notice, message):
     """<user> - insults <user>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type nick: str
     """
     target = text.strip()
@@ -90,7 +90,7 @@ def insult(text, conn, nick, notice, message):
 def flirt(text, conn, nick, notice, message):
     """<user> - flirts with <user>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type nick: str
     """
     target = text.strip()
@@ -111,7 +111,7 @@ def flirt(text, conn, nick, notice, message):
 def kill(text, conn, nick, notice, action):
     """<user> - kills <user>
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type nick: str
     """
     target = text.strip()
diff --git a/plugins/core_misc.py b/plugins/core_misc.py
index 5a9413b..5596924 100644
--- a/plugins/core_misc.py
+++ b/plugins/core_misc.py
@@ -12,7 +12,7 @@ socket.setdefaulttimeout(10)
 def invite(irc_paramlist, conn):
     """
     :type irc_paramlist: list[str]
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     invite_join = conn.config.get('invite_join', True)
     if invite_join:
@@ -24,7 +24,7 @@ def invite(irc_paramlist, conn):
 @hook.irc_raw('004')
 def onjoin(conn, bot):
     """
-    :type conn: cloudbot.implementations.irc.IrcConnection
+    :type conn: cloudbot.implementations.irc.IrcClient
     :type bot: cloudbot.bot.CloudBot
     """
     bot.logger.info("ONJOIN hook triggered.")
@@ -64,7 +64,7 @@ def onjoin(conn, bot):
 @hook.irc_raw('004')
 def keep_alive(conn):
     """
-    :type conn: cloudbot.implementations.irc.IrcConnection
+    :type conn: cloudbot.implementations.irc.IrcClient
     """
     keepalive = conn.config.get('keep_alive', False)
     if keepalive:
diff --git a/plugins/core_tracker.py b/plugins/core_tracker.py
index 2c68aaf..89b8207 100644
--- a/plugins/core_tracker.py
+++ b/plugins/core_tracker.py
@@ -15,7 +15,7 @@ nick_re = re.compile(":(.+?)!")
 @hook.irc_raw("KICK")
 def on_kick(conn, chan, nick):
     """
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     :type nick: str
     """
@@ -32,7 +32,7 @@ def on_kick(conn, chan, nick):
 def on_nick(irc_paramlist, conn, irc_raw):
     """
     :type irc_paramlist: list[str]
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type irc_raw: str
     """
     old_nick = nick_re.search(irc_raw).group(1)
@@ -48,7 +48,7 @@ def on_nick(irc_paramlist, conn, irc_raw):
 @hook.irc_raw("JOIN")
 def on_join(conn, chan, nick):
     """
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     :type nick: str
     """
diff --git a/plugins/correction.py b/plugins/correction.py
index 674f4fe..4cbf32e 100644
--- a/plugins/correction.py
+++ b/plugins/correction.py
@@ -11,7 +11,7 @@ correction_re = re.compile(r"^[sS]/([^/]*)/([^/]*)(/.*)?\s*$")
 def correction(match, conn, chan, message):
     """
     :type match: re.__Match
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type chan: str
     """
     print(match.groups())
diff --git a/plugins/help.py b/plugins/help.py
index 72b51dd..429f0fc 100644
--- a/plugins/help.py
+++ b/plugins/help.py
@@ -10,7 +10,7 @@ from cloudbot import hook
 def help_command(text, conn, bot, notice, has_permission):
     """[command] - gives help for [command], or lists all available commands if no command is specified
     :type text: str
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type bot: cloudbot.bot.CloudBot
     """
     if text:
diff --git a/plugins/history.py b/plugins/history.py
index 7408c5a..c479c94 100644
--- a/plugins/history.py
+++ b/plugins/history.py
@@ -25,7 +25,7 @@ def track_seen(event, db, conn):
     """ Tracks messages for the .seen command
     :type event: cloudbot.events.BaseEvent
     :type db: sqlalchemy.orm.Session
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     db_init(db, conn)
     # keep private messages private
@@ -38,7 +38,7 @@ def track_seen(event, db, conn):
 def track_history(event, message_time, conn):
     """
     :type event: cloudbot.events.BaseEvent
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     try:
         history = conn.history[event.chan]
@@ -55,7 +55,7 @@ def chat_tracker(event, db, conn):
     """
     :type db: sqlalchemy.orm.Session
     :type event: cloudbot.events.BaseEvent
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     message_time = time.time()
     track_seen(event, db, conn)
@@ -67,7 +67,7 @@ def chat_tracker(event, db, conn):
 def resethistory(event, conn):
     """- resets chat history for the current channel
     :type event: cloudbot.events.BaseEvent
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
     try:
         conn.history[event.chan].clear()
@@ -82,7 +82,7 @@ def seen(text, nick, chan, db, event, conn):
     """<nick> <channel> - tells when a nickname was last in active in one of my channels
     :type db: sqlalchemy.orm.Session
     :type event: cloudbot.events.BaseEvent
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     """
 
     if event.conn.nick.lower() == text.lower():
diff --git a/plugins/tell.py b/plugins/tell.py
index db2f87a..5955108 100644
--- a/plugins/tell.py
+++ b/plugins/tell.py
@@ -76,7 +76,7 @@ def add_tell(db, server, sender, target, message):
 def tellinput(event, conn, db, nick, notice):
     """
     :type event: cloudbot.events.BaseEvent
-    :type conn: cloudbot.connection.Connection
+    :type conn: cloudbot.client.Client
     :type db: sqlalchemy.orm.Session
     """
     if 'showtells' in event.content.lower():
-- 
2.0.0

